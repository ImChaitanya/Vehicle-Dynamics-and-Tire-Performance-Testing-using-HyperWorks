//////////////////////////////////////////////////////////////////////
 Altair HyperWorks

 Version : HWVERSION_2022.0.0.33_Mar 29 2022_22:27:26

 Model : Model

 Customer ID : 

 Date : Wed Feb  1 18:33:01 2023
//////////////////////////////////////////////////////////////////////

*BeginMDL( the_model, "Model", "2022.0.0.33" )

  *StandardInclude(FILE)
  *SetCurrentSolverMode(MotionSolve)
  *LoadPreferenceFile(MBD-Vehicle Dynamics Tools)
  *DefinitionInclude( "hwmv://autoent/../mdllib/Libs/Tasks/AltairDriver/altair_driver_system.mdl" )
  *DefinitionInclude( "hwmv://autoent/../mdllib/Libs/Tasks/AltairDriver/Straight_line_acc.mdl" )
  *System( sys_body, "Body", sysdef_body )
  *System( sys_instrumentation, "Instrumentation", def_sys_instrumentation_ver2, sys_body
           , sys_frnt_susp, sys_rear_susp, sys_tires.ts_front, sys_tires.ts_rear )
  *System( sys_frnt_susp, "Frnt SLA susp (2 pc. LCA)", sysdef_sla_frnt, sys_body.b_body
           , sys_body.b_body, sys_body.b_body )
  *System( sys_steering, "Rackpin steering", sysdef_str_links, sys_frnt_susp.b_kn
           , sys_body.b_body, sys_frnt_susp.p_otrb )
  *System( sys_rear_susp, "Rear SLA susp (2 pc. LCA)", sysdef_sla_rear, sys_body.b_body
           , sys_body.b_body, sys_body.b_body, sys_body.b_body )
  *System( sys_pwrtrain, "Longitudinal engine/trans", sysdef_pwrtrain, sys_body.b_body )
  *System( sys_tires, "AutoTires", sysdef_tires, sys_frnt_susp.p_wc
           , sys_rear_susp.p_wc, sys_frnt_susp.p_spalign, sys_rear_susp.p_spalign, sys_frnt_susp.b_wheel, sys_rear_susp.b_wheel )
  *System( sys_brakes, "Disk Brakes", def_disk_brakes, sys_frnt_susp.j_w_spin_rj
           , sys_rear_susp.j_w_spin_rj )
  *System( sys_driveline, "Independent 4wd", sysdef_indep_4wd, sys_frnt_susp.b_wheel
           , sys_frnt_susp.p_wc, sys_pwrtrain.b_pwrtrain, sys_frnt_susp.ds_wh_align )
  *System( sys_frnt_driveshaft, "Front driveshaft", sysdef_driveshaft, sys_transfer_case.b_frnt_drive
           , sys_driveline.b_pinion, sys_transfer_case.p_frnt_uj, sys_transfer_case.p_frnt_drive, sys_driveline.p_ujoint, sys_driveline.p_pinion )
  *System( sys_r_driveline, "Rear diff and halfshafts", sysdef_r_indep, sys_rear_susp.b_wheel
           , sys_rear_susp.p_wc, sys_body.b_body, sys_rear_susp.ds_wh_align )
  *System( sys_rear_driveshaft, "Rear driveshaft", sysdef_r_driveshaft, sys_pwrtrain.b_main_shaft
           , sys_r_driveline.b_pinion, sys_transfer_case.p_rear_uj, sys_transfer_case.p_rear_drive, sys_r_driveline.p_ujoint, sys_r_driveline.p_pinion )
  *System( sys_transfer_case, "Transfer case", sysdef_transfer_case, sys_pwrtrain.b_pwrtrain
           , sys_frnt_driveshaft.b_yoke, sys_rear_driveshaft.b_yoke, sys_pwrtrain.p_trans_tail, sys_pwrtrain.j_main_shaft )
  *System( altair_driver, "Altair Driver", def_ma_driver, sys_steering.sys_column.j_st_wheel
           , sys_instrumentation.b_Dummy_for_vehBody, sys_tires.m_road_ref_frnt.l, Global_Frame, sys_pwrtrain.sv_engine_speed, sys_pwrtrain.sv_throttle_output
           , sys_brakes.sv_brake_demand, sys_pwrtrain.sv_clutch_output, sys_pwrtrain.sv_driver_gear_output, sys_pwrtrain.crv_gear_ratio )
  *Analysis( event_0, "StraightLineAcc 0", def_ana_straight_line_acc )
  *Analysis( event_1, "StraightLineAcc 1", def_ana_straight_line_acc )
  *Analysis( event_2, "StraightLineAcc 2", def_ana_straight_line_acc )
  *SetActiveAnalysis( event_2 )
  *DefineSystem( sysdef_body )
    *String( Vehicle_type, "Vehicle type", EDIT )
    *AttachmentCandidate( cand_0, "Attachment Candidate 0", p_body_cg )
    *Point( p_body_cg, "Vehicle Body CG" )
    *Body( b_body, "Vehicle Body", p_body_cg, , , ,  )
    *PerpAxesJoint( j_clamp_1_body, "Body Clamp PERP", b_body, B_Ground, p_body_cg, VECTOR, Global_Frame.xaxis, VECTOR, Global_Frame.yaxis )
    *InlineJoint( j_clamp_2_body, "Body Clamp INLI", b_body, B_Ground, p_body_cg, AXIS, VECTOR, Global_Frame.zaxis )
    *Graphic( g_clamp_body, "CG clamp on body", CYLINDER, b_body, p_body_cg, VECTOR, Global_Frame.zaxis, 0, 33.33, 50, 0, CAPEND, 3 )
    *Graphic( g_clamp_grnd, "CG clamp on ground", CYLINDER, B_Ground, p_body_cg, VECTOR, Global_Frame.zaxis, 33.33, 0, 50, -50, CAPBEGIN, 3 )
    *Graphic( graSys_vehBody, "Vehicle Graphics", graSysdef_vehBody, b_body )
    *SetString( Vehicle_type,               "Car" )
    *SetAttachmentCandidateTag( cand_0,                     cg_location )
    *Set( graSys_vehBody.g_veh_Body.mesh_coarsening_level, "AGGRESSIVE" )
    *Set( graSys_vehBody.g_veh_FrontWindshield.mesh_coarsening_level, "AGGRESSIVE" )
    *Set( graSys_vehBody.g_veh_Headlight.mesh_coarsening_level, "AGGRESSIVE" )
    *Set( graSys_vehBody.g_veh_RearWindshield.mesh_coarsening_level, "AGGRESSIVE" )
    *Set( graSys_vehBody.g_veh_TailLight.mesh_coarsening_level, "AGGRESSIVE" )
    *Set( graSys_vehBody.g_veh_Windows.mesh_coarsening_level, "AGGRESSIVE" )
    *SetGraphicAttributes( graSys_vehBody.g_veh_Body,       TRANSPARENT )
    *SetGraphicAttributes( graSys_vehBody.g_veh_FrontWindshield,       TRANSPARENT )
    *SetGraphicAttributes( graSys_vehBody.g_veh_Headlight,       TRANSPARENT )
    *SetGraphicAttributes( graSys_vehBody.g_veh_RearWindshield,       TRANSPARENT )
    *SetGraphicAttributes( graSys_vehBody.g_veh_TailLight,       TRANSPARENT )
    *SetGraphicAttributes( graSys_vehBody.g_veh_Windows,       TRANSPARENT )
    *SetColorMaterialReference( graSys_vehBody.g_veh_Body,       MODEL.mat_gray3 )
    *SetColorMaterialReference( graSys_vehBody.g_veh_FrontWindshield,       MODEL.mat_glass_tinted )
    *SetColorMaterialReference( graSys_vehBody.g_veh_RearWindshield,       MODEL.mat_glass_tinted )
    *SetColorMaterialReference( graSys_vehBody.g_veh_Windows,       MODEL.mat_glass_tinted )
    *SetColorMaterialReference( graSys_vehBody.g_veh_Headlight,       MODEL.mat_glass )
    *SetColorMaterialReference( graSys_vehBody.g_veh_TailLight,       MODEL.mat_glass )
    *SetPoint( p_body_cg,                  2150, 0, 1250 )
    *SetBodyInertia( b_body,                     1000, 4.000e+08, 2.000e+09, 2.000e+09, 0.000e+00, 0.000e+00, 0.000e+00 )
  *EndDefine()
  *DefineGraphic( graSysdef_vehBody, veh_body )
    *Attachment( veh_body, "Attachment veh_body", Body, "Select attachment.", ,  )
    *Graphic( g_veh_Body, "Vehicle Body", FILE, veh_body, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Body/Roadster.h3d"}, {"Body"}, MARKER, Global_Frame, 2510.0, 0.0, 725.0, 0.0, 0.0, 0.0, 1.035, 1.0, 1.0 )
    *Graphic( g_veh_FrontWindshield, "Vehicle FrontWindshield", FILE, veh_body, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Body/Roadster.h3d"}, {"FrontWindshield"}, MARKER, Global_Frame, 2510.0, 0.0, 725.0, 0.0, 0.0, 0.0, 1.035, 1.0, 1.0 )
    *Graphic( g_veh_Headlight, "Vehicle Headlight", FILE, veh_body, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Body/Roadster.h3d"}, {"Headlight"}, MARKER, Global_Frame, 2510.0, 0.0, 725.0, 0.0, 0.0, 0.0, 1.035, 1.0, 1.0 )
    *Graphic( g_veh_RearWindshield, "Vehicle RearWindshield", FILE, veh_body, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Body/Roadster.h3d"}, {"RearWindshield"}, MARKER, Global_Frame, 2510.0, 0.0, 725.0, 0.0, 0.0, 0.0, 1.035, 1.0, 1.0 )
    *Graphic( g_veh_TailLight, "Vehicle TailLight", FILE, veh_body, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Body/Roadster.h3d"}, {"TailLight"}, MARKER, Global_Frame, 2510.0, 0.0, 725.0, 0.0, 0.0, 0.0, 1.035, 1.0, 1.0 )
    *Graphic( g_veh_Windows, "Vehicle Windows", FILE, veh_body, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Body/Roadster.h3d"}, {"Windows"}, MARKER, Global_Frame, 2510.0, 0.0, 725.0, 0.0, 0.0, 0.0, 1.035, 1.0, 1.0 )
  *EndDefine()
  *DefineSystem( def_sys_instrumentation_ver2, arg_sys_Body, arg_sys_FrntSusp, arg_sys_RearSusp
           , arg_sys_FrntTires, arg_sys_RearTires )
    *Attachment( arg_sys_Body, "Body/Chassis system", System, "Select attachment.", ,  )
    *Attachment( arg_sys_FrntSusp, "Front susp.", System, "Select attachment.", ,  )
    *Attachment( arg_sys_RearSusp, "Rear susp.", System, "Select attachment.", ,  )
    *Attachment( arg_sys_FrntTires, "Front tires.", System, "Select attachment.", ,  )
    *Attachment( arg_sys_RearTires, "Rear tires.", System, "Select attachment.", ,  )
    *Body( b_Dummy_for_vehBody, "Dummy_for_vehBody", arg_sys_Body.p_body_cg, , , ,  )
    *FixedJoint( j_Dummy_vehBody, "Dummy_vehBody", b_Dummy_for_vehBody, arg_sys_Body.b_body, arg_sys_Body.p_body_cg )
    *Marker( m_measurement, "Measurement Marker", b_Dummy_for_vehBody, arg_sys_Body.p_body_cg )
    *PointPair( p_frnt_tire_top, "Front Tire Top" )
    *PointPair( p_rear_tire_top, "Rear Tire Top" )
    *Point( p_body_fa, "Front axle mid" )
    *Point( p_body_ra, "Rear axle mid" )
    *MarkerPair( m_frnt_tire_top_mrk, "Front Tire Top Marker", b_Dummy_for_vehBody, p_frnt_tire_top )
    *MarkerPair( m_rear_tire_top_mrk, "Rear Tire Top Marker", b_Dummy_for_vehBody, p_rear_tire_top )
    *MarkerPair( m_veh_frnt, "Marker Vehicle Front", b_Dummy_for_vehBody, arg_sys_FrntSusp.p_wc )
    *MarkerPair( m_veh_rear, "Marker Vehicle Rear", b_Dummy_for_vehBody, arg_sys_RearSusp.p_wc )
    *MarkerPair( m_whl_frnt, "Marker Wheel Front", arg_sys_FrntSusp.j_w_spin_rj.b2, arg_sys_FrntSusp.p_wc )
    *MarkerPair( m_whl_rear, "Marker Wheel Rear", arg_sys_RearSusp.j_w_spin_rj.b2, arg_sys_RearSusp.p_wc )
    *Marker( m_frnt_axle_mid, "Front_axle_mid_body", b_Dummy_for_vehBody, p_body_fa )
    *Marker( m_rear_axle_mid, "Rear_axle_mid_body", b_Dummy_for_vehBody, p_body_ra )
    *Output( cg_disp, "Vehicle CG Displacements (m deg)", EXPR, `DX({m_measurement.id},{Global_Frame.idstring},{Global_Frame.idstring})/1000`, `DY({m_measurement.id},{Global_Frame.idstring},{Global_Frame.idstring})/1000`, `DZ({m_measurement.id},{Global_Frame.idstring},{Global_Frame.idstring})/1000`, `ROLL({m_measurement.id},{Global_Frame.idstring})*RTOD`, `PITCH({m_measurement.id},{Global_Frame.idstring})*RTOD`, `YAW({m_measurement.id},{Global_Frame.idstring})*RTOD` )
    *Output( cg_vel, "Vehicle CG Velocities (mm/sec deg/sec)", EXPR, `VX({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})`, `VY({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})`, `VZ({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})`, `WX({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD`, `WY({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD`, `WZ({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD` )
    *Output( cg_acc, "Vehicle CG Accelerations (g's deg/sec**2)", EXPR, `ACCX({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})/9810`, `ACCY({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})/9810`, `ACCZ({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})/9810`, `WDTX({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD`, `WDTY({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD`, `WDTZ({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD` )
    *Output( o_side_slip_ang, "Side Slip Angle", EXPR, `-1*rtod*(atan((VARVAL({sv_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_vx.idstring}))))))`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_front_susp_travel, "Front Susp Travel - F2: Average | F3: Left | F4: Right", EXPR, `(VARVAL({sv_front_left_susp_travel.idstring})+VARVAL({sv_front_right_susp_travel.idstring}))/2`, `VARVAL({sv_front_left_susp_travel.idstring})`, `VARVAL({sv_front_right_susp_travel.idstring})`, `0`, `0`, `0` )
    *Output( o_rear_susp_travel, "Rear Susp Travel - F2: Average | F3: Left | F4: Right", EXPR, `(VARVAL({sv_rear_left_susp_travel.idstring})+VARVAL({sv_rear_right_susp_travel.idstring}))/2`, `VARVAL({sv_rear_left_susp_travel.idstring})`, `VARVAL({sv_rear_right_susp_travel.idstring})`, `0`, `0`, `0` )
    *Output( o_f_side_slip, "Front Side Slip Angle-F2", EXPR, `-1*rtod*(atan((VARVAL({sv_f_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_f_vx.idstring}))))))`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_r_side_slip, "Rear Side Slip Angle-F2", EXPR, `-1*rtod*(atan((VARVAL({sv_r_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_r_vx.idstring}))))))`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_frnt_wc_displ_left, "Front Left Wheel Center Displacement", DISP, arg_sys_FrntSusp.p_wc.l, arg_sys_FrntSusp.j_w_spin_rj.l.b2., arg_sys_FrntSusp.p_wc.l, b_Dummy_for_vehBody, Global_Frame, BOTH_MARKERS )
    *Output( o_frnt_wc_displ_right, "Front Right Wheel Center Displacement", DISP, arg_sys_FrntSusp.p_wc.r, arg_sys_FrntSusp.j_w_spin_rj.r.b2., arg_sys_FrntSusp.p_wc.r, b_Dummy_for_vehBody, Global_Frame, BOTH_MARKERS )
    *Output( o_rear_wc_displ_left, "Rear Left Wheel Center Displacement", DISP, arg_sys_RearSusp.p_wc.l, arg_sys_RearSusp.j_w_spin_rj.l.b2., arg_sys_RearSusp.p_wc.l, b_Dummy_for_vehBody, Global_Frame, BOTH_MARKERS )
    *Output( o_rear_wc_displ_right, "Rear Right Wheel Center Displacements", DISP, arg_sys_RearSusp.p_wc.r, arg_sys_RearSusp.j_w_spin_rj.r.b2., arg_sys_RearSusp.p_wc.r, b_Dummy_for_vehBody, Global_Frame, BOTH_MARKERS )
    *Output( o_front_steer_angle, "Front Steer Angle", USER, `USER(223, {m_whl_frnt.l.idstring}, {m_whl_frnt.r.idstring}, {m_measurement.idstring})` )
    *Output( o_rear_steer_angle, "Rear Steer Angle", USER, `USER(223, {m_whl_rear.l.idstring}, {m_whl_rear.r.idstring}, {m_measurement.idstring})` )
    *Output( o_pitch, "Pitch", EXPR, `rtod*asin(VARVAL({sv_pitch.idstring}))`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_f_lift, "Front Lift", EXPR, `{sv_f_lift.VARVAL}`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_r_squat, "Rear Squat", EXPR, `{sv_r_squat.VARVAL}`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_f_axle_load, "Front Axle Load", EXPR, `JOINT({arg_sys_FrntSusp.j_w_spin_rj.l.idstring},0,4,0)+JOINT({arg_sys_FrntSusp.j_w_spin_rj.r.idstring},0,4,0)`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_r_axle_load, "Rear Axle Load", EXPR, `JOINT({arg_sys_RearSusp.j_w_spin_rj.l.idstring},0,4,0)+JOINT({arg_sys_RearSusp.j_w_spin_rj.r.idstring},0,4,0)`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_roll, "Vehicle Roll", USER, `USER(333, {b_Dummy_for_vehBody.cm.id}, {B_Ground.cm.id})` )
    *SolverVariable( sv_veh_long_accel, "Vehicle longitudinal acceleration" )
    *SolverVariable( sv_f_sideslip, "Front Side Slip Angle" )
    *SolverVariable( sv_r_sideslip, "Rear Side Slip Angle" )
    *SolverVariable( sv_f_vy, "Front Axle Lateral Velocity" )
    *SolverVariable( sv_f_vx, "Front Axle Long Velocity" )
    *SolverVariable( sv_r_vy, "Rear Axle Lateral Velocity" )
    *SolverVariable( sv_r_vx, "Rear Axle Long Velocity" )
    *SolverVariable( sv_vy, "Vehicle Lateral Velocity" )
    *SolverVariable( sv_vx, "Vehicle Long Velocity" )
    *SolverVariable( sv_f_left_toe, "Front Left Toe" )
    *SolverVariable( sv_f_right_toe, "Front Right Toe" )
    *SolverVariable( sv_r_left_toe, "Rear Left Toe" )
    *SolverVariable( sv_r_right_toe, "Rear Right Toe" )
    *SolverVariable( sv_front_left_susp_travel, "Front Left Susp Travel" )
    *SolverVariable( sv_front_right_susp_travel, "Front Right Susp Travel" )
    *SolverVariable( sv_rear_left_susp_travel, "Rear Left Susp Travel" )
    *SolverVariable( sv_rear_right_susp_travel, "Rear Right Susp Travel" )
    *SolverVariable( sv_pitch, "Pitch" )
    *SolverVariable( sv_yaw_rate, "Yaw Rate (from Global Frame)" )
    *SolverVariable( sv_f_lift, "Front Lift" )
    *SolverVariable( sv_r_squat, "Rear Squat" )
    *SetBodyInertia( b_Dummy_for_vehBody,        0.001, 10, 10, 10 )
    *SetPoint( p_frnt_tire_top,      LEFT, arg_sys_FrntSusp.p_wc.l.x, arg_sys_FrntSusp.p_wc.l.y, arg_sys_FrntSusp.p_wc.l.z + 500 )
    *SetPoint( p_rear_tire_top,      LEFT, arg_sys_RearSusp.p_wc.l.x, arg_sys_RearSusp.p_wc.l.y, arg_sys_RearSusp.p_wc.l.z + 500 )
    *SetPoint( p_body_fa,                  (arg_sys_FrntSusp.p_wc.l.x + arg_sys_FrntSusp.p_wc.r.x)/2, (arg_sys_FrntSusp.p_wc.l.y + arg_sys_FrntSusp.p_wc.r.y)/2, (arg_sys_FrntSusp.p_wc.l.z + arg_sys_FrntSusp.p_wc.r.z)/2 )
    *SetPoint( p_body_ra,                  (arg_sys_RearSusp.p_wc.l.x + arg_sys_RearSusp.p_wc.r.x)/2, (arg_sys_RearSusp.p_wc.l.y + arg_sys_RearSusp.p_wc.r.y)/2, (arg_sys_RearSusp.p_wc.l.z + arg_sys_RearSusp.p_wc.r.z)/2 )
    *SetEntityId( cg_disp,                    20000210 )
    *SetEntityId( cg_vel,                     20000220 )
    *SetEntityId( cg_acc,                     20000230 )
    *SetSolverVariable( sv_veh_long_accel,          EXPR, `-1*accx({b_Dummy_for_vehBody.cm.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_vy,                    EXPR, `vy({m_frnt_axle_mid.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_vx,                    EXPR, `-1*vx({m_frnt_axle_mid.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_vy,                    EXPR, `vy({m_rear_axle_mid.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_vx,                    EXPR, `-1*vx({m_rear_axle_mid.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_vy,                      EXPR, `vy({b_Dummy_for_vehBody.cm.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_vx,                      EXPR, `-1*vx({b_Dummy_for_vehBody.cm.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_sideslip,              EXPR, `-1*rtod*(atan((VARVAL({sv_f_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_f_vx.idstring}))))))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_sideslip,              EXPR, `-1*rtod*(atan((VARVAL({sv_r_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_r_vx.idstring}))))))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_left_toe,              EXPR, `rtod*(AZ({m_whl_frnt.l.idstring},{m_measurement.idstring}))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_right_toe,             EXPR, `rtod*(AZ({m_whl_frnt.r.idstring},{m_measurement.idstring}))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_left_toe,              EXPR, `rtod*(AZ({m_whl_rear.l.idstring},{m_measurement.idstring}))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_right_toe,             EXPR, `rtod*(AZ({m_whl_rear.r.idstring},{m_measurement.idstring}))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_front_left_susp_travel,       EXPR, `DZ({m_frnt_tire_top_mrk.l.idstring},{arg_sys_FrntTires.sys_tire_left.att_wheelOrientMarker.l.idstring},	{m_frnt_tire_top_mrk.l.idstring}) - ( {m_frnt_tire_top_mrk.origin.l.z - arg_sys_FrntTires.sys_tire_left.att_wheelOrientMarker.origin.l.z} )`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_front_right_susp_travel,       EXPR, `DZ({m_frnt_tire_top_mrk.r.idstring},{arg_sys_FrntTires.sys_tire_right.att_wheelOrientMarker.r.idstring},{m_frnt_tire_top_mrk.r.idstring}) - ( {m_frnt_tire_top_mrk.origin.r.z - arg_sys_FrntTires.sys_tire_right.att_wheelOrientMarker.origin.r.z} )`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_rear_left_susp_travel,       EXPR, `DZ({m_rear_tire_top_mrk.l.idstring},{arg_sys_RearTires.sys_tire_left.att_wheelOrientMarker.l.idstring},	{m_rear_tire_top_mrk.l.idstring}) - ( {m_rear_tire_top_mrk.origin.l.z - arg_sys_RearTires.sys_tire_left.att_wheelOrientMarker.origin.l.z} )`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_rear_right_susp_travel,       EXPR, `DZ({m_rear_tire_top_mrk.r.idstring},{arg_sys_RearTires.sys_tire_right.att_wheelOrientMarker.r.idstring},{m_rear_tire_top_mrk.r.idstring}) - ( {m_rear_tire_top_mrk.origin.l.z - arg_sys_RearTires.sys_tire_right.att_wheelOrientMarker.origin.r.z} )`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_pitch,                   EXPR, `(VARVAL({sv_f_lift.idstring})-VARVAL({sv_r_squat.idstring})) / ({mag (arg_sys_RearSusp.p_wc.l.data - arg_sys_FrntSusp.p_wc.l.data)})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_yaw_rate,                EXPR, `WZ({m_measurement.idstring}, {Global_Frame.idstring}, {m_measurement.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_lift,                  EXPR, `(DZ({m_veh_frnt.l.idstring},{m_whl_frnt.l.idstring},{b_Dummy_for_vehBody.cm.idstring})+DZ({m_veh_frnt.r.idstring},{m_whl_frnt.r.idstring},{b_Dummy_for_vehBody.cm.idstring}))/2`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_squat,                 EXPR, `(DZ({m_veh_rear.l.idstring},{m_whl_rear.l.idstring},{b_Dummy_for_vehBody.cm.idstring})+DZ({m_veh_rear.r.idstring},{m_whl_rear.r.idstring},{b_Dummy_for_vehBody.cm.idstring}))/2`, OFF, 0.0, false, false )
    *SetEntityId( o_side_slip_ang,            10000001 )
    *SetEntityId( o_front_susp_travel,        10000002 )
    *SetEntityId( o_rear_susp_travel,         10000003 )
    *SetEntityId( o_roll,                     10000004 )
    *SetEntityId( o_f_side_slip,              10000005 )
    *SetEntityId( o_r_side_slip,              10000006 )
    *SetEntityId( o_frnt_wc_displ_left,       10000007 )
    *SetEntityId( o_frnt_wc_displ_right,       10000008 )
    *SetEntityId( o_rear_wc_displ_left,       10000009 )
    *SetEntityId( o_rear_wc_displ_right,       10000010 )
    *SetEntityId( o_front_steer_angle,        10000011 )
    *SetEntityId( o_rear_steer_angle,         10000012 )
    *SetEntityId( o_pitch,                    10000013 )
    *SetEntityId( o_f_lift,                   10000014 )
    *SetEntityId( o_r_squat,                  10000015 )
    *SetEntityId( o_f_axle_load,              10000016 )
    *SetEntityId( o_r_axle_load,              10000017 )
    *SetLocalUserDLLFlag( o_roll,                     true )
    *SetLocalUserFunction( o_roll,                     "msautoutils", , "REQSUB" )
    *SetLocalUserDLLFlag( o_front_steer_angle,        true )
    *SetLocalUserFunction( o_front_steer_angle,        "msautoutils", , "REQSUB" )
    *SetLocalUserDLLFlag( o_rear_steer_angle,         true )
    *SetLocalUserFunction( o_rear_steer_angle,         "msautoutils", , "REQSUB" )
  *EndDefine()
  *DefineSystem( sysdef_sla_frnt, b_uca_att, b_lca_att, b_tens_strut_att )
    *Attachment( b_uca_att, "UCA attach body", BodyPair, "UCA attaching body", ,  )
    *Attachment( b_lca_att, "LCA attach body", BodyPair, "LCA attaching body", ,  )
    *Attachment( b_tens_strut_att, "Tstrut attach body", BodyPair, "Tens. strut attaching body", ,  )
    *Option( op_spin_comp, "Spindle compliance", 2, "No", "Yes", 1, 2, "No", "Yes", EDIT )
    *Option( op_TireGra, "Tire graphics", 2, "On", "Off", 1, 2, "On", "Off", EDIT )
    *PointPair( p_wheel_cg, "Wheel CG" )
    *PointPair( p_wc, "Wheel center" )
    *PointPair( p_spalign, "Spindle align" )
    *PointPair( p_kn_cg, "Knuckle CG" )
    *PointPair( p_lbj, "Lwr ball jt" )
    *PointPair( p_ubj, "Upr ball jt" )
    *PointPair( p_otrb, "Otr tierod ball jt" )
    *PointPair( p_lca_cg, "LCA CG" )
    *PointPair( p_tens_strut_cg, "Tension strut CG" )
    *PointPair( p_tens_strut_att, "Tension strut bush" )
    *PointPair( p_lca_bush, "LCA bush" )
    *PointPair( p_tstrut_at_lca, "Tension strut to LCA" )
    *PointPair( p_uca_cg, "UCA CG" )
    *PointPair( p_uca_frnt_bush, "UCA frnt bush" )
    *PointPair( p_uca_rear_bush, "UCA rear bush" )
    *PointPair( p_spr_upr, "Spring upr" )
    *PointPair( p_spr_lwr, "Spring lwr" )
    *PointPair( p_shk_upr_bush, "Shock upr bush" )
    *PointPair( p_shk_lwr_bush, "Shock lwr bush" )
    *BodyPair( b_wheel, "Wheel", p_wheel_cg, , , ,  )
    *BodyPair( b_hub, "Wheel hub", p_wheel_cg, , , ,  )
    *BodyPair( b_kn, "Knuckle", p_kn_cg, , , ,  )
    *BodyPair( b_lca, "Lwr control arm", p_lca_cg, , , ,  )
    *BodyPair( b_tens_strut, "Tension strut", p_tens_strut_cg, , , ,  )
    *BodyPair( b_uca, "Upr control arm", p_uca_cg, , , ,  )
    *BallJointPair( j_lbj, "Lwr ball jt", b_kn, b_lca, p_lbj )
    *BallJointPair( j_ubj, "Upr ball jt", b_kn, b_uca, p_ubj )
    *RevJointPair( j_w_spin_rj, "Wheel spindle rj", b_hub, b_kn, p_wc, POINT, p_spalign )
    *UJointPair( j_tens_strut_att, "Tension strut bushing", b_tens_strut, b_tens_strut_att, p_tens_strut_att, SHAFT, POINT, p_tstrut_at_lca, CROSSPIN, POINT, p_lca_bush, ALLOW_COMPLIANCE )
    *UJointPair( j_lca_att, "LCA bushing", b_lca, b_lca_att, p_lca_bush, SHAFT, POINT, p_lbj, CROSSPIN, POINT, p_tens_strut_att, ALLOW_COMPLIANCE )
    *BallJointPair( j_tstrut_to_lca, "Tension strut to LCA", b_tens_strut, b_lca, p_tstrut_at_lca, ALLOW_COMPLIANCE )
    *if( op_spin_comp.value == "No" )
      *FixedJointPair( j_w_hub_fix, "Wheel|Hub fix jt", b_wheel, b_hub, p_wc )
    *else()
      *UJointPair( j_w_hub_uj, "Wheel|Hub comp u jt", b_wheel, b_hub, p_wc, SHAFT, POINT, p_spalign, CROSSPIN, VECTOR, b_wheel.cm.xaxis )
      *BushPair( bsh_w_hub, "Wheel|hub comp. bsh", b_wheel, b_hub, p_wc )
    *endif()
    *if( Op_Compliant.value == "Yes" )
      *BushPair( bsh_uca_frnt, "UCA frnt bush", b_uca, b_uca_att, p_uca_frnt_bush )
      *BushPair( bsh_uca_rear, "UCA rear bush", b_uca, b_uca_att, p_uca_rear_bush )
      *Graphic( g_a_arm_sleeve1, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_uca
               , bsh_uca_frnt.i.origin, bsh_uca_frnt.i.zaxis )
      *Graphic( g_a_arm_bush1, "gra_a_arm_bush", gdef_a_arm_bush, bsh_uca_frnt.b2
               , bsh_uca_frnt.i.origin, bsh_uca_frnt.i.zaxis )
      *Graphic( g_a_arm_pin1, "gra_a_arm_pin", gdef_a_arm_pin, b_uca_att
               , bsh_uca_frnt.j.origin, bsh_uca_frnt.j.zaxis )
      *Graphic( g_a_arm_sleeve2, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_uca
               , bsh_uca_rear.i.origin, bsh_uca_rear.i.zaxis )
      *Graphic( g_a_arm_bush2, "gra_a_arm_bush", gdef_a_arm_bush, bsh_uca_rear.b2
               , bsh_uca_rear.i.origin, bsh_uca_rear.i.zaxis )
      *Graphic( g_a_arm_pin2, "gra_a_arm_pin", gdef_a_arm_pin, b_uca_att
               , bsh_uca_rear.j.origin, bsh_uca_rear.j.zaxis )
    *else()
      *RevJointPair( j_uca_bush, "UCA frnt|rear bush", b_uca, b_uca_att, p_uca_frnt_bush, POINT, p_uca_rear_bush )
      *GraphicPair( Sphere1, "Sphere", SPHERE, j_uca_bush.b1, p_uca_frnt_bush, 25, 3 )
      *GraphicPair( Sphere2, "Sphere", SPHERE, j_uca_bush.b1, p_uca_rear_bush, 25, 3 )
    *endif()
    *GraphicPair( g_lca1, "LCA1", CYLINDER, b_lca, p_lbj, POINT, p_tstrut_at_lca, 12, g_lca1.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_lca2, "LCA2", CYLINDER, b_lca, p_tstrut_at_lca, POINT, p_lca_bush, 12, g_lca2.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_tstrut, "Tstrut", CYLINDER, b_tens_strut, p_tstrut_at_lca, POINT, p_tens_strut_att, 12, g_tstrut.r1, , 0.0, CAPNONE, 3 )
    *Graphic( g_a_arm, "gra_a_arm", gdef_a_arm, b_uca
             , p_ubj, p_lbj, p_uca_frnt_bush, p_uca_rear_bush )
    *if( j_tens_strut_att.isbush == true )
      *Graphic( g_tstrut_cup1, "gra_a_arm_sleeve", gdef_tstrut_cup, b_tens_strut
               , j_tens_strut_att.i.origin, j_tens_strut_att.i.zaxis )
      *Graphic( g_tstrut_bush1, "gra_a_arm_bush", gdef_tstrut_bush, j_tens_strut_att.b2
               , j_tens_strut_att.i.origin, j_tens_strut_att.i.zaxis )
      *Graphic( g_tstrut_kn1, "gra_a_arm_pin", gdef_tstrut_kn, b_tens_strut_att
               , j_tens_strut_att.j.origin, j_tens_strut_att.j.zaxis )
    *else()
      *GraphicPair( Sphere3, "Sphere", SPHERE, j_tens_strut_att.b1, j_tens_strut_att.i.origin, 25, 3 )
    *endif()
    *if( j_lca_att.isbush == true )
      *Graphic( g_a_arm_sleeve4, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_lca
               , j_lca_att.i.origin, j_lca_att.i.zaxis )
      *Graphic( g_a_arm_bush4, "gra_a_arm_bush", gdef_a_arm_bush, j_lca_att.b2
               , j_lca_att.i.origin, j_lca_att.i.zaxis )
      *Graphic( g_a_arm_pin4, "gra_a_arm_pin", gdef_a_arm_pin, b_lca_att
               , j_lca_att.j.origin, j_lca_att.j.zaxis )
    *else()
      *GraphicPair( Sphere4, "Sphere", SPHERE, j_lca_att.b1, j_lca_att.i.origin, 25, 3 )
    *endif()
    *if( j_tstrut_to_lca.isbush == true )
      *Graphic( g_tstrut_cup3, "gra_a_arm_sleeve", gdef_tstrut_cup, b_tens_strut
               , j_tstrut_to_lca.i.origin, j_tstrut_to_lca.i.zaxis )
      *Graphic( g_tstrut_bush3, "gra_a_arm_bush", gdef_tstrut_bush, j_tstrut_to_lca.b2
               , j_tstrut_to_lca.i.origin, j_tstrut_to_lca.i.zaxis )
      *Graphic( g_tstrut_kn3, "gra_a_arm_pin", gdef_tstrut_kn, b_lca
               , j_tstrut_to_lca.j.origin, j_tstrut_to_lca.j.zaxis )
    *else()
      *GraphicPair( Sphere5, "Sphere", SPHERE, j_tstrut_to_lca.b1, j_tstrut_to_lca.i.origin, 25, 3 )
    *endif()
    *GraphicPair( Sphere6, "Sphere", SPHERE, j_lbj.b1, p_lbj, 15, 3 )
    *GraphicPair( Sphere7, "Sphere", SPHERE, j_ubj.b1, p_ubj, 15, 3 )
    *if( op_TireGra.value == "On" )
      *GraphicPair( g_tire, "Tire", TIRE, b_wheel, p_wc, POINT, p_spalign, "P215/70*15" )
    *endif()
    *Graphic( g_kn, "gra_kn", gdef_kn, b_kn
             , p_wc, p_spalign, p_ubj, p_lbj, p_otrb )
    *DataSet( ds_wh_align, "Static Wheel Alignment", def_ds_wh_align )
    *Form( frm_wh_align, "Static Wheel Alignment", def_frm_wh_align, ds_wh_align )
    *System( sys_frnt_shock, "Frnt shock absorber ( with inline jts )", sysdef_shock_inl, sys_body.b_body
             , sys_frnt_susp.b_lca, sys_frnt_susp.p_shk_upr_bush, sys_frnt_susp.p_shk_lwr_bush )
    *System( sys_frnt_spring, "Frnt coil spring", sysdef_coil_spr, sys_body.b_body
             , sys_frnt_susp.b_lca, sys_frnt_susp.p_spr_upr, sys_frnt_susp.p_spr_lwr )
    *System( sys_frnt_stabar, "Frnt stabar with links", sysdef_stabar, sys_frnt_susp.b_lca
             , sys_body.b_body )
    *SetPoint( p_wc,                 LEFT, 1000.00, -750.00, 1000.00 )
    *SetPoint( p_spalign,            LEFT, p_wc.l.x + 100*COS(ds_wh_align.camb.value*PI/180)*SIN(ds_wh_align.toe.value*PI/180), p_wc.l.y + 100*COS(ds_wh_align.camb.value*PI/180)*COS(ds_wh_align.toe.value*PI/180), p_wc.l.z + 100*SIN(ds_wh_align.camb.value*PI/180) )
    *SetPoint( p_lbj,                LEFT, 991.00, -668.00, 916.00 )
    *SetPoint( p_ubj,                LEFT, 1021.00, -614.00, 1171.00 )
    *SetPoint( p_otrb,               LEFT, 1120.00, -675.00, 1000.00 )
    *SetPoint( p_tens_strut_att,     LEFT, 650.00, -335.00, 911.00 )
    *SetPoint( p_tstrut_at_lca,      LEFT, 1005.00, -495.00, 920.00 )
    *SetPoint( p_lca_bush,           LEFT, 1020.00, -335.00, 921.00 )
    *SetPoint( p_uca_frnt_bush,      LEFT, 896.00, -464.00, 1181.00 )
    *SetPoint( p_uca_rear_bush,      LEFT, 1146.00, -464.00, 1141.00 )
    *SetPoint( p_spr_lwr,            LEFT, 1016.00, -493.00, 946.00 )
    *SetPoint( p_spr_upr,            LEFT, 1031.00, -483.00, 1071.00 )
    *SetPoint( p_shk_lwr_bush,       LEFT, 1016.00, -493.00, 946.00 )
    *SetPoint( p_shk_upr_bush,       LEFT, 1036.00, -468.00, 1196.00 )
    *SetPoint( p_wheel_cg,           LEFT, p_wc.l.x, p_wc.l.y, p_wc.l.z )
    *SetPoint( p_kn_cg,              LEFT, p_wc.l.x, p_wc.l.y+100, p_wc.l.z )
    *SetPoint( p_lca_cg,             LEFT, p_spr_lwr.l.x, p_spr_lwr.l.y, p_spr_lwr.l.z-20 )
    *SetPoint( p_tens_strut_cg,      LEFT, p_tstrut_at_lca.l.x, p_tstrut_at_lca.l.y, p_tstrut_at_lca.l.z )
    *SetPoint( p_uca_cg,             LEFT, p_ubj.l.x, p_ubj.l.y, p_ubj.l.z )
    *SetBodyInertia( b_wheel,              LEFT, 20, 1.750e+06, 1.750e+06, 3.000e+06, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_wheel.cm.l,               TWOAXES, ZX, POINT, p_spalign.l, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_wheel.cm.r,               TWOAXES, ZX, POINT, p_spalign.r, VECTOR, Global_Frame.zaxis )
    *SetBodyInertia( b_hub,                LEFT, 10.00e+000, 70000, 70000, 1e5, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetOrientation( b_hub.cm.l,                 TWOAXES, ZX, POINT, p_spalign.l, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_hub.cm.r,                 TWOAXES, ZX, POINT, p_spalign.r, VECTOR, Global_Frame.zaxis )
    *SetBodyIC( b_hub.l,                    , , , , , b_wheel.l.wz )
    *SetBodyIC( b_hub.r,                    , , , , , b_wheel.r.wz )
    *SetBodyICFlag( b_hub.l,                    false, false, false, false, false, false )
    *SetBodyICFlag( b_hub.r,                    false, false, false, false, false, false )
    *SetBodyInertia( b_kn,                 LEFT, 3.000e+000, 4.089e+003, 4.089e+003, 4.089e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_lca,                LEFT, 2.000e+000, 2.081e+003, 2.081e+003, 2.081e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_tens_strut,         LEFT, 2.000e+000, 2.081e+003, 2.081e+003, 2.081e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_uca,                LEFT, 2.000e+000, 2.081e+003, 2.081e+003, 2.081e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBush( j_tens_strut_att.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_tens_strut_att.bush, LEFT, ONEAXIS, Z, POINT, p_tstrut_at_lca.l )
    *SetBush( bsh_uca_frnt,         LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_uca_frnt,         LEFT, TWOAXES, ZX, POINT, p_uca_rear_bush.l, POINT, p_ubj.l )
    *SetBush( j_lca_att.bush,       LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_lca_att.bush,       LEFT, ONEAXIS, Z, POINT, p_tens_strut_att.l )
    *SetBush( bsh_uca_rear,         LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_uca_rear,         LEFT, TWOAXES, ZY, POINT, p_uca_frnt_bush.l, POINT, p_ubj.l )
    *SetBush( j_tstrut_to_lca.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_tstrut_to_lca.bush, LEFT, ONEAXIS, Z, POINT, p_tens_strut_att.l )
    *SetBush( bsh_w_hub,            LEFT, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 1745329.252*180/PI, LIN, 1745329.252*180/PI, LIN, 0.0*180/PI, LIN, 17453.29252*180/PI, LIN, 17453.29252*180/PI, LIN, 0.0*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_w_hub,            LEFT, TWOAXES, ZX, POINT, p_spalign.l, VECTOR, j_w_hub_uj.l.j.zaxis )
    *SetColorMaterialReference( g_tire.l,                   MODEL.mat_gray6 )
    *SetColorMaterialReference( g_tire.r,                   MODEL.mat_gray6 )
  *EndDefine()
  *DefineGraphic( gdef_a_arm_sleeve, body, p_bush, v_bush )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bush, "Attachment p_bush", PointPair, "Select attachment.", ,  )
    *Attachment( v_bush, "Attachment v_bush", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, p_bush, VECTOR, v_bush, 25, 25, 60, -30, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, p_bush, VECTOR, v_bush, 25, 22, 0.1, 30, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, p_bush, VECTOR, v_bush, 25, 22, 0.1, -30, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_a_arm_bush, body, p_bush, v_bush )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bush, "Attachment p_bush", PointPair, "Select attachment.", ,  )
    *Attachment( v_bush, "Attachment v_bush", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, p_bush, VECTOR, v_bush, 22, 22, 60, -30, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, p_bush, VECTOR, v_bush, 10, 22, 2, -32, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, p_bush, VECTOR, v_bush, 22, 10, 2, 30, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_a_arm_pin, body, p_bush, v_bush )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bush, "Attachment p_bush", PointPair, "Select attachment.", ,  )
    *Attachment( v_bush, "Attachment v_bush", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_pin, "Pin", CYLINDER, body, p_bush, VECTOR, v_bush, 10, 10, 74, -37, CAPBOTH, 3 )
  *EndDefine()
  *DefineGraphic( gdef_a_arm, body, p_bj, p_bal
           , p_bush1, p_bush2 )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bj, "Attachment p_bj", PointPair, "Select attachment.", ,  )
    *Attachment( p_bal, "Attachment p_bal", PointPair, "Select attachment.", ,  )
    *Attachment( p_bush1, "Attachment p_bush1", PointPair, "Select attachment.", ,  )
    *Attachment( p_bush2, "Attachment p_bush2", PointPair, "Select attachment.", ,  )
    *GraphicPair( g_frnt_arm, "Front arm", CYLINDER, body, p_bj, POINT, p_bush1, 12, g_frnt_arm.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_rear_arm, "Rear arm", CYLINDER, body, p_bj, POINT, p_bush2, 12, g_rear_arm.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_bj_tube, "Ball joint tube", CYLINDER, body, p_bj, POINT, p_bal, 25, 25, 35, -17.5, CAPBEGIN, 3 )
    *GraphicPair( g_bj_cap, "Ball joint cap", CYLINDER, body, p_bj, POINT, p_bal, 25, 15, 0.1, 17.5, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_tstrut_cup, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_pin, "Pin", CYLINDER, body, point, VECTOR, align, 10, 10, 10, -32, CAPBEGIN, 3 )
    *GraphicPair( g_washer1, "Washer 1", CYLINDER, body, point, VECTOR, align, 22, 22, 2, -22, CAPBOTH, 3 )
    *GraphicPair( g_washer2, "Washer 2", CYLINDER, body, point, VECTOR, align, 22, 22, 2, 20, CAPBOTH, 3 )
  *EndDefine()
  *DefineGraphic( gdef_tstrut_bush, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 20, 20, 40, -20, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 10, 20, 0.1, -20, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 20, 12, 0.1, 20, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_tstrut_kn, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 22, 22, 20, -10, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 22, 20, 0.1, -10, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 22, 20, 0.1, 10, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_kn, b_kn, p_wc, p_spalign
           , p_ubj, p_lbj, p_otrb )
    *Attachment( b_kn, "Attachment b_kn", BodyPair, "Select attachment.", ,  )
    *Attachment( p_wc, "Attachment p_wc", PointPair, "Select attachment.", ,  )
    *Attachment( p_spalign, "Attachment p_spalign", PointPair, "Select attachment.", ,  )
    *Attachment( p_ubj, "Attachment p_ubj", PointPair, "Select attachment.", ,  )
    *Attachment( p_lbj, "Attachment p_lbj", PointPair, "Select attachment.", ,  )
    *Attachment( p_otrb, "Attachment p_otrb", PointPair, "Select attachment.", ,  )
    *GraphicPair( g_upr_stud, "Upper stud", CYLINDER, b_kn, p_ubj, POINT, p_lbj, 12, 8, 35, 0, CAPNONE, 3 )
    *GraphicPair( g_lwr_stud, "Lower stud", CYLINDER, b_kn, p_lbj, POINT, p_ubj, 12, 8, 35, 0, CAPNONE, 3 )
    *GraphicPair( g_kingpin, "Kingpin", CYLINDER, b_kn, p_lbj, POINT, p_ubj, 8, g_kingpin.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_spindle, "Spindle", CYLINDER, b_kn, p_wc, POINT, p_spalign, 10, g_spindle.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_st_arm, "Steer arm", CYLINDER, b_kn, p_spalign, POINT, p_otrb, 8, g_st_arm.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_sp_at_kp, "Spindle at kingpin", SPHERE, b_kn, p_spalign, 10, 3 )
  *EndDefine()
  *DefineDataSet( def_ds_wh_align )
    *Real( toe, "Toe (deg)", EDIT )
    *Real( camb, "Camber (deg)", EDIT )
  *EndDefine()
  *DefineForm( def_frm_wh_align, ds )
    *SetRowsCols( 2, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 10 )
    *ColumnWidth( 2, 10 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.toe.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.toe.value, "", RIGHT, EDIT )
    *SetCell( 2, 1, ds.camb.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.camb.value, "", RIGHT, EDIT )
  *EndDefine()
  *DefineSystem( sysdef_shock_inl, b_shk_rod_att, b_shk_tube_att, p_shk_upr_bush
           , p_shk_lwr_bush )
    *Attachment( b_shk_rod_att, "Shk rod (upr shk) attach", BodyPair, "Shock rod|upr shk attaching body", ,  )
    *Attachment( b_shk_tube_att, "Shk tube (lwr shk) attach", BodyPair, "Shock tube|lwr shk attaching body", ,  )
    *Attachment( p_shk_upr_bush, "Shk upr bushing", PointPair, "Shock upper bushing location", ,  )
    *Attachment( p_shk_lwr_bush, "Shk lwr bushing", PointPair, "Shock lower bushing location", ,  )
    *PointPair( p_shk_rod_cg, "Shock rod CG" )
    *PointPair( p_shk_rod_lwr, "Shk rod lwr" )
    *PointPair( p_shk_upr_bush_ax, "Shk upr bush ax" )
    *PointPair( p_shk_tube_cg, "Shock tube CG" )
    *PointPair( p_shk_tube_upr, "Shk tube upr" )
    *PointPair( p_shk_lwr_bush_ax, "Shk lwr bush ax" )
    *BodyPair( b_shk_rod, "Shock rod (upr shk)", p_shk_rod_cg, , , ,  )
    *BodyPair( b_shk_tube, "Shock tube (lwr shk)", p_shk_tube_cg, , , ,  )
    *InlineJointPair( j_shk_lwr_inline, "Lwr shock inline joint", b_shk_rod, b_shk_tube, p_shk_rod_lwr, ORIGIN, POINT, p_shk_tube_upr )
    *InlineJointPair( j_shk_upr_inline, "Upr shock inline joint", b_shk_tube, b_shk_rod, p_shk_tube_upr, ORIGIN, POINT, p_shk_rod_lwr )
    *UJointPair( bsh_shk_upr, "Shk upr bush", b_shk_rod, b_shk_rod_att, p_shk_upr_bush, SHAFT, POINT, p_shk_lwr_bush, CROSSPIN, POINT, p_shk_upr_bush_ax, ALLOW_COMPLIANCE )
    *UJointPair( bsh_shk_lwr, "Shk lwr bush", b_shk_tube, b_shk_tube_att, p_shk_lwr_bush, SHAFT, POINT, p_shk_upr_bush, CROSSPIN, POINT, p_shk_lwr_bush_ax, ALLOW_COMPLIANCE )
    *CoilSpringPair( dmp, "Shock damper", b_shk_rod, b_shk_tube, p_shk_upr_bush, p_shk_lwr_bush )
    *Graphic( g_shk_rod, "gra_shk_rod", gdef_shk_rod, b_shk_rod
             , p_shk_upr_bush, p_shk_rod_lwr )
    *Graphic( g_shk_tube, "gra_shk_tube", gdef_shk_tube, b_shk_tube
             , p_shk_tube_upr, p_shk_lwr_bush )
    *if( bsh_shk_upr.isbush == true )
      *Graphic( g_shk_bush_sleeve1, "gra_shk_bush_sleeve", gdef_shk_bush_sleeve, b_shk_rod
               , bsh_shk_upr.i.origin, bsh_shk_upr.i.zaxis )
      *Graphic( g_shk_bush1, "gra_shk_bush", gdef_shk_bush, bsh_shk_upr.b2
               , bsh_shk_upr.i.origin, bsh_shk_upr.i.zaxis )
      *Graphic( g_shk_pin1, "gra_shk_pin", gdef_shk_pin, b_shk_rod_att
               , bsh_shk_upr.j.origin, bsh_shk_upr.j.zaxis )
    *else()
      *GraphicPair( Sphere1, "Sphere", SPHERE, b_shk_rod, p_shk_upr_bush, 15, 3 )
    *endif()
    *if( bsh_shk_lwr.isbush == true )
      *Graphic( g_shk_bush_sleeve2, "gra_shk_bush_sleeve", gdef_shk_bush_sleeve, b_shk_tube
               , bsh_shk_lwr.i.origin, bsh_shk_lwr.i.zaxis )
      *Graphic( g_shk_bush2, "gra_shk_bush", gdef_shk_bush, bsh_shk_lwr.b2
               , bsh_shk_lwr.i.origin, bsh_shk_lwr.i.zaxis )
      *Graphic( g_shk_pin2, "gra_shk_pin", gdef_shk_pin, b_shk_tube_att
               , bsh_shk_lwr.j.origin, bsh_shk_lwr.j.zaxis )
    *else()
      *GraphicPair( Sphere2, "Sphere", SPHERE, b_shk_tube, p_shk_lwr_bush, 15, 3 )
    *endif()
    *Output( shk_l_disp, "Left shock disp", DISP, j_shk_lwr_inline.l.i.origin, j_shk_lwr_inline.l.b1, j_shk_lwr_inline.l.i.origin, j_shk_lwr_inline.l.b2, j_shk_lwr_inline.l.j, BOTH_MARKERS )
    *Output( shk_r_disp, "Right shock disp", DISP, j_shk_lwr_inline.r.i.origin, j_shk_lwr_inline.r.b1, j_shk_lwr_inline.r.i.origin, j_shk_lwr_inline.r.b2, j_shk_lwr_inline.r.j, BOTH_MARKERS )
    *Output( shk_l_vel, "Left shock vel", VEL, dmp.l.i.origin, dmp.l.b1, dmp.l.j.origin, dmp.l.b2, j_shk_lwr_inline.l.j, BOTH_MARKERS )
    *Output( shk_r_vel, "Right shock vel", VEL, dmp.r.i.origin, dmp.r.b1, dmp.r.j.origin, dmp.r.b2, j_shk_lwr_inline.r.j, BOTH_MARKERS )
    *DataSet( ds_shk, "Shock rod/tube lengths", dsdef_shock )
    *Form( frm_shk, "Shock rod/tube lengths", frmdef_shock, ds_shk )
    *SetEntityId( shk_l_disp,                 30102010 )
    *SetEntityId( shk_r_disp,                 30102110 )
    *SetEntityId( shk_l_vel,                  30102020 )
    *SetEntityId( shk_r_vel,                  30102120 )
    *SetReal( ds_shk.shk_len,             sqrt((p_shk_upr_bush.l.x-p_shk_lwr_bush.l.x)^2 +(p_shk_upr_bush.l.y-p_shk_lwr_bush.l.y)^2+(p_shk_upr_bush.l.z-p_shk_lwr_bush.l.z)^2) )
    *SetReal( ds_shk.shk_rod_len,         150 )
    *SetReal( ds_shk.shk_tube_len,        153 )
    *SetPoint( p_shk_upr_bush_ax,    LEFT, p_shk_upr_bush.l.x + 100, p_shk_upr_bush.l.y, p_shk_upr_bush.l.z )
    *SetPoint( p_shk_lwr_bush_ax,    LEFT, p_shk_lwr_bush.l.x + 100, p_shk_lwr_bush.l.y, p_shk_lwr_bush.l.z )
    *SetPoint( p_shk_rod_lwr,        LEFT, p_shk_upr_bush.l.x + (p_shk_lwr_bush.l.x-p_shk_upr_bush.l.x)/ds_shk.shk_len.value*ds_shk.shk_rod_len.value, p_shk_upr_bush.l.y + (p_shk_lwr_bush.l.y-p_shk_upr_bush.l.y)/ds_shk.shk_len.value*ds_shk.shk_rod_len.value, p_shk_upr_bush.l.z + (p_shk_lwr_bush.l.z-p_shk_upr_bush.l.z)/ds_shk.shk_len.value*ds_shk.shk_rod_len.value )
    *SetPoint( p_shk_tube_upr,       LEFT, p_shk_lwr_bush.l.x + (p_shk_upr_bush.l.x-p_shk_lwr_bush.l.x)/ds_shk.shk_len.value*ds_shk.shk_tube_len.value, p_shk_lwr_bush.l.y + (p_shk_upr_bush.l.y-p_shk_lwr_bush.l.y)/ds_shk.shk_len.value*ds_shk.shk_tube_len.value, p_shk_lwr_bush.l.z + (p_shk_upr_bush.l.z-p_shk_lwr_bush.l.z)/ds_shk.shk_len.value*ds_shk.shk_tube_len.value )
    *SetPoint( p_shk_rod_cg,         LEFT, p_shk_upr_bush.l.x / 2 + p_shk_rod_lwr.l.x / 2, p_shk_upr_bush.l.y / 2 + p_shk_rod_lwr.l.y / 2, p_shk_upr_bush.l.z / 2 + p_shk_rod_lwr.l.z / 2 )
    *SetPoint( p_shk_tube_cg,        LEFT, p_shk_lwr_bush.l.x / 2 + p_shk_tube_upr.l.x / 2, p_shk_lwr_bush.l.y / 2 + p_shk_tube_upr.l.y / 2, p_shk_lwr_bush.l.z / 2 + p_shk_tube_upr.l.z / 2 )
    *SetBodyInertia( b_shk_rod,            LEFT, 1.000e+000, 6.553e+002, 6.553e+002, 6.553e+002, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_shk_tube,           LEFT, 1.000e+000, 6.553e+002, 6.553e+002, 6.553e+002, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetCoilSpring( dmp,                  LEFT, LIN, 0, LIN, 12, 0, 0 )
    *SetBush( bsh_shk_lwr.bush,     LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_shk_lwr.bush,     LEFT, TWOAXES, XZ, POINT, p_shk_upr_bush.l, POINT, p_shk_lwr_bush_ax.l )
    *SetBush( bsh_shk_upr.bush,     LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_shk_upr.bush,     LEFT, TWOAXES, XZ, POINT, p_shk_lwr_bush.l, POINT, p_shk_upr_bush_ax.l )
  *EndDefine()
  *DefineGraphic( gdef_shk_rod, b_shk_upr_sleeve, p_rod_upr, p_rod_lwr )
    *Attachment( b_shk_upr_sleeve, "Attachment b_shk_upr_sleeve", BodyPair, "Select attachment.", ,  )
    *Attachment( p_rod_upr, "Attachment p_rod_upr", PointPair, "Select attachment.", ,  )
    *Attachment( p_rod_lwr, "Attachment p_rod_lwr", PointPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_shk_upr_sleeve, p_rod_upr, POINT, p_rod_lwr, 18, 18, 145, 18, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_shk_upr_sleeve, p_rod_upr, POINT, p_rod_lwr, 7, 18, 5, 13, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_shk_tube, b_shk_lwr_sleeve, p_tube_upr, p_tube_lwr )
    *Attachment( b_shk_lwr_sleeve, "Attachment b_shk_lwr_sleeve", BodyPair, "Select attachment.", ,  )
    *Attachment( p_tube_upr, "Attachment p_tube_upr", PointPair, "Select attachment.", ,  )
    *Attachment( p_tube_lwr, "Attachment p_tube_lwr", PointPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_shk_lwr_sleeve, p_tube_lwr, POINT, p_tube_upr, 14, 14, 125, 18, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_shk_lwr_sleeve, p_tube_lwr, POINT, p_tube_upr, 7, 14, 5, 13, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_shk_bush_sleeve, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, body, point, VECTOR, align, 15, 15, 18, -9, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, body, point, VECTOR, align, 15, 13, 0.1, 9, CAPNONE, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, body, point, VECTOR, align, 13, 15, 0.1, -9, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_shk_bush, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, body, point, VECTOR, align, 13, 13, 18, -9, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, body, point, VECTOR, align, 6, 13, 2, -11, CAPNONE, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, body, point, VECTOR, align, 13, 6, 2, 9, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_shk_pin, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, body, point, VECTOR, align, 6, 6, 30, -15, CAPBOTH, 3 )
  *EndDefine()
  *DefineDataSet( dsdef_shock )
    *Real( shk_len, "Shock length", EDIT )
    *Real( shk_rod_len, "Shock rod (upr shk) length", EDIT )
    *Real( shk_tube_len, "Shock tube (lwr shk) length", EDIT )
  *EndDefine()
  *DefineForm( frmdef_shock, ds )
    *SetRowsCols( 3, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 40 )
    *ColumnLabel( 1, 2, "Rod/Tube Lengths" )
    *SetCell( 1, 1, ds.shk_len.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.shk_len.value, "%5.1f", RIGHT, NO_EDIT )
    *SetCell( 2, 1, ds.shk_rod_len.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.shk_rod_len.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 3, 1, ds.shk_tube_len.label, "", LEFT, NO_EDIT )
    *SetCell( 3, 2, ds.shk_tube_len.value, "%5.1f", RIGHT, EDIT )
  *EndDefine()
  *DefineSystem( sysdef_coil_spr, b_spr_upr_att, b_spr_lwr_att, p_spr_upr
           , p_spr_lwr )
    *Attachment( b_spr_upr_att, "Spr upr attach", BodyPair, "Spring upper attach", ,  )
    *Attachment( b_spr_lwr_att, "Spr lwr attach", BodyPair, "Spring lower attach", ,  )
    *Attachment( p_spr_upr, "Spr upr point", PointPair, "Spr upr point", ,  )
    *Attachment( p_spr_lwr, "Spr lwr point", PointPair, "Spr lwr point", ,  )
    *System( sys_travel_lock, "Travel Lock", sysdef_travel_lock_coil, cspr )
    *CoilSpringPair( cspr, "Coil spring", b_spr_upr_att, b_spr_lwr_att, p_spr_upr, p_spr_lwr )
    *GraphicPair( g_spring, "Coil spring", SPRING, cspr, cspr.p1, cspr.p2, 4, 50 )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_spr_upr_att, p_spr_upr, POINT, p_spr_lwr, 60, 60, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_spr_upr_att, p_spr_upr, POINT, p_spr_lwr, 35, 35, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, b_spr_upr_att, p_spr_upr, POINT, p_spr_lwr, 60, 35, 0.1, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder4, "Cylinder", CYLINDER, b_spr_lwr_att, p_spr_lwr, POINT, p_spr_upr, 60, 60, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder5, "Cylinder", CYLINDER, b_spr_lwr_att, p_spr_lwr, POINT, p_spr_upr, 35, 35, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder6, "Cylinder", CYLINDER, b_spr_lwr_att, p_spr_lwr, POINT, p_spr_upr, 60, 35, 0.1, -10, CAPNONE, 3 )
    *Output( spr_l_disp, "Left spring length", DISP, cspr.l.i.origin, cspr.l.b1, cspr.l.j.origin, cspr.l.b2, cspr.l.i, BOTH_MARKERS )
    *Output( spr_r_disp, "Right spring length", DISP, cspr.r.i.origin, cspr.r.b1, cspr.r.j.origin, cspr.r.b2, cspr.r.i, BOTH_MARKERS )
    *Output( spr_l_vel, "Left spring vel", VEL, cspr.l.i.origin, cspr.l.b1, cspr.l.j.origin, cspr.l.b2, cspr.l.i, BOTH_MARKERS )
    *Output( spr_r_vel, "Right spring vel", VEL, cspr.r.i.origin, cspr.r.b1, cspr.r.j.origin, cspr.r.b2, cspr.r.i, BOTH_MARKERS )
    *SetNote( sys_travel_lock,            "This system defines how travel should be locked, when computing virtual steer axis inside the msautoutils subroutines, that compute scrub radius, caster trail and similar numbers. \n" )
    *SetEntityId( spr_l_disp,                 30103010 )
    *SetEntityId( spr_r_disp,                 30103110 )
    *SetEntityId( spr_l_vel,                  30103020 )
    *SetEntityId( spr_r_vel,                  30103120 )
    *SetCoilSpring( cspr,                 LEFT, LIN, 120, LIN, 0.000e+00, 7000, sqrt((p_spr_upr.l.x-p_spr_lwr.l.x)^2+(p_spr_upr.l.y-p_spr_lwr.l.y)^2+(p_spr_upr.l.z-p_spr_lwr.l.z)^2) )
  *EndDefine()
  *DefineSystem( sysdef_travel_lock_coil, spr )
    *Attachment( spr, "Attachment spr", SpringDamperPair, "Select attachment.", ,  )
    *SolverArray( sa_lock_register_array_l, "Lock Register Array-left", IC )
    *SolverArray( sa_lock_register_array_r, "Lock Register Array-right", IC )
    *DataSet( ds_lock_application_l, "Lock Application-left", def_ds_lock_or_actuation_application )
    *DataSet( ds_lock_application_r, "Lock Application-right", def_ds_lock_or_actuation_application )
    *DataSet( ds_lock_registerdata, "Lock Register Data", def_ds_travel_lock_registerdata )
    *SolverString( ss_lock_ent_fullvar_l, "Lock Entity Full Varname-left" )
    *SolverString( ss_lock_ent_fullvar_r, "Lock Entity Full Varname-right" )
    *SolverString( ss_lock_reg_l, "LockRegistration-left" )
    *SolverString( ss_lock_reg_r, "LockRegistration-right" )
    *SetNote( ds_lock_application_l,       "This Dataset captures the information, to which marker, in what direction a lock is applied and whether it is rotational or translational. The information is bundled into a single integer number, that's passed to the solver. " )
    *SetNote( ds_lock_application_r,       "This Dataset captures the information, to which marker, in what direction a lock is applied and whether it is rotational or translational. The information is bundled into a single integer number, that's passed to the solver. " )
    *SetNote( ds_lock_registerdata,       "This DataSet collects th information how the lock is associated with a suspension, so that it can be activated for the right computations. " )
    *SetOption( ds_lock_application_l.opt_direction,       "Z" )
    *SetOption( ds_lock_application_l.opt_mode,       "Translational" )
    *SetInteger( ds_lock_application_l.int_api_value,       (ds_lock_application_l.opt_direction.ival + ds_lock_application_l.opt_mode.ival) * ds_lock_application_l.opt_swap_markers.ival )
    *SetOption( ds_lock_application_r.opt_direction,       "Z" )
    *SetOption( ds_lock_application_r.opt_mode,       "Translational" )
    *SetInteger( ds_lock_application_r.int_api_value,       (ds_lock_application_r.opt_direction.ival + ds_lock_application_r.opt_mode.ival) * ds_lock_application_r.opt_swap_markers.ival )
    *SetOption( ds_lock_registerdata.opt_sidename_r,       "Right" )
    *if( strstr ( PARENT.PARENT.label, "Frnt" ) != -1 || strstr ( PARENT.PARENT.label, "Front" ) != -1 )
      *SetInteger( ds_lock_registerdata.int_axl_index,       0 )
    *else()
      *SetInteger( ds_lock_registerdata.int_axl_index,       1 )
    *endif()
    *SetLocalUserDLLFlag( ss_lock_reg_l,              true )
    *SetSolverString( ss_lock_reg_l,              USER, `USER( {ds_lock_registerdata.int_version.value}, {sa_lock_register_array_l.idstring} )` )
    *SetLocalUserFunction( ss_lock_reg_l,              "msautoutils", , "REGISTER_TRAVEL_LOCK" )
    *SetLocalUserDLLFlag( ss_lock_reg_r,              true )
    *SetSolverString( ss_lock_reg_r,              USER, `USER( {ds_lock_registerdata.int_version.value}, {sa_lock_register_array_r.idstring} )` )
    *SetLocalUserFunction( ss_lock_reg_r,              "msautoutils", , "REGISTER_TRAVEL_LOCK" )
    *SetSolverString( ss_lock_ent_fullvar_l,       `{spr.l.full_varname}` )
    *SetSolverString( ss_lock_ent_fullvar_r,       `{spr.r.full_varname}` )
    *SetSolverArray( sa_lock_register_array_l,       VALUE, 6
, ds_lock_registerdata.int_axl_index.value, ss_lock_ent_fullvar_l.id, ds_lock_registerdata.opt_sidename_l.current_index, spr.l.j.id, spr.l.i.id, ds_lock_application_l.int_api_value.value )
    *SetSolverArray( sa_lock_register_array_r,       VALUE, 6
, ds_lock_registerdata.int_axl_index.value, ss_lock_ent_fullvar_r.id, ds_lock_registerdata.opt_sidename_r.current_index, spr.r.j.id, spr.r.i.id, ds_lock_application_r.int_api_value.value )
  *EndDefine()
  *DefineDataSet( def_ds_lock_or_actuation_application )
    *Option( opt_direction, "Direction", 3, "X", "Y", "Z", 1, 2, 3, "X", "Y", "Z", EDIT )
    *Option( opt_mode, "Actuation Mode", 2, "Translational", "Rotational", 0, 3, "Translation", "Rotation", EDIT )
    *Option( opt_swap_markers, "Swap Markers", 2, "I-Marker is Acting", "J-Marker is Acting", 1, -1, "i", "j", EDIT )
    *Integer( int_api_value, "Result", NO_EDIT )
  *EndDefine()
  *DefineDataSet( def_ds_travel_lock_registerdata )
    *Integer( int_axl_index, "Axle Index", EDIT )
    *Integer( int_version, "API Version", EDIT )
    *Option( opt_sidename_l, "Entity Side - Left (reserved)", 2, "Left", "Right", 0, 1, "Left", "Right", EDIT )
    *Option( opt_sidename_r, "Entity Side - Right (reserved)", 2, "Left", "Right", 0, 1, "Left", "Right", EDIT )
  *EndDefine()
  *DefineSystem( sysdef_stabar, b_susp_att, b_frame_att )
    *Attachment( b_susp_att, "Stabar link attach", BodyPair, "Drop link attach to susp", ,  )
    *Attachment( b_frame_att, "Stabar frame attach", Body, "Stabar attach to frame", ,  )
    *Option( op_overlay_balljt, "Ball jt over bush", 2, "No", "Yes", 1, 2, "No", "Yes", EDIT )
    *PointPair( p_link_susp_att, "Drop link susp att" )
    *PointPair( p_link_cg, "Drop link CG" )
    *PointPair( p_link_stabar_att, "Drop link stabar att" )
    *PointPair( p_stabar_pt1, "Stabar pt 1" )
    *PointPair( p_stabar_pt2, "Stabar pt 2" )
    *PointPair( p_stabar_pt3, "Stabar pt 3" )
    *PointPair( p_stabar_pt4, "Stabar pt 4" )
    *PointPair( p_stabar_pt5, "Stabar pt 5" )
    *PointPair( p_stabar_pt6, "Stabar pt 6" )
    *PointPair( p_stabar_pt7, "Stabar pt 7" )
    *PointPair( p_stabar_mnt, "Stabar mount to frame" )
    *Point( p_stabar_cent, "Stabar center" )
    *PointPair( p_link_stabar_bush_ax, "Link stabar bush ax" )
    *PointPair( p_stabar_mnt_ax, "Stabar frame bush ax" )
    *PointPair( p_link_susp_bush_ax, "Link susp bush ax" )
    *BodyPair( b_link, "Drop link", p_link_cg, , , ,  )
    *PolyBeam( pb_stabar, "Stabilizer bar", p_link_stabar_att.l, p_stabar_pt1.l, p_stabar_pt2.l, p_stabar_pt3.l, p_stabar_pt4.l, p_stabar_pt5.l, p_stabar_mnt.l, p_stabar_pt6.l, p_stabar_pt7.l, p_stabar_cent, p_stabar_pt7.r, p_stabar_pt6.r, p_stabar_mnt.r, p_stabar_pt5.r, p_stabar_pt4.r, p_stabar_pt3.r, p_stabar_pt2.r, p_stabar_pt1.r, p_link_stabar_att.r )
    *BallJoint( bsh_link_stabar_l, "Link stabar bush left", b_link.l, pb_stabar.body@p_link_stabar_att.l, p_link_stabar_att.l, ALLOW_COMPLIANCE )
    *BallJoint( bsh_link_stabar_r, "Link stabar bush right", b_link.r, pb_stabar.body@p_link_stabar_att.r, p_link_stabar_att.r, ALLOW_COMPLIANCE )
    *RevJoint( bsh_stabar_mnt_l, "Stabar frame bush left", b_frame_att, pb_stabar.body@p_stabar_mnt.l, p_stabar_mnt.l, POINT, p_stabar_mnt_ax.l, ALLOW_COMPLIANCE )
    *RevJoint( bsh_stabar_mnt_r, "Stabar frame bush right", b_frame_att, pb_stabar.body@p_stabar_mnt.r, p_stabar_mnt.r, POINT, p_stabar_mnt_ax.r, ALLOW_COMPLIANCE )
    *UJointPair( bsh_link_susp, "Drop link susp bush ", b_link, b_susp_att, p_link_susp_att, SHAFT, POINT, p_link_stabar_att, CROSSPIN, VECTOR, V_Global_X, ALLOW_COMPLIANCE )
    *if( op_overlay_balljt.value == "Yes" && bsh_link_stabar_l.isbush == true )
      *BallJoint( j_link_stabar_l2, "Lnk stabar ball jt -l", bsh_link_stabar_l.b1, bsh_link_stabar_l.b2, bsh_link_stabar_l.i.origin )
    *endif()
    *if( op_overlay_balljt.value == "Yes" && bsh_link_stabar_r.isbush == true )
      *BallJoint( j_link_stabar_r2, "Lnk stabar ball jt -r", bsh_link_stabar_r.b1, bsh_link_stabar_r.b2, bsh_link_stabar_r.i.origin )
    *endif()
    *if( op_overlay_balljt.value == "Yes" && bsh_link_susp.isbush == true )
      *BallJointPair( j_link_susp2, "Link susp ball jt", bsh_link_susp.b1, bsh_link_susp.b2, bsh_link_susp.i.origin )
    *endif()
    *Graphic( g_stabar, "Stabar", TUBE, POLYBEAM, pb_stabar )
    *GraphicPair( g_stalink, "Stabar link", CYLINDER, b_link, p_link_susp_att, POINT, p_link_stabar_att, 5, g_stalink.r1, , 0.0, CAPNONE, 3 )
    *Graphic( g_l_stamnt_sleeve, "Left stabar mount sleeve", gdef_stamnt_sleeve, b_frame_att
             , bsh_stabar_mnt_l.i.origin, bsh_stabar_mnt_l.i.zaxis )
    *Graphic( g_r_stamnt_sleeve, "Right stabar mount sleeve", gdef_stamnt_sleeve, b_frame_att
             , bsh_stabar_mnt_r.i.origin, bsh_stabar_mnt_r.i.zaxis )
    *Graphic( g_l_stamnt_bush, "Left stabar mount bushing", gdef_stamnt_bush, bsh_stabar_mnt_l.b1
             , bsh_stabar_mnt_l.i.origin, bsh_stabar_mnt_l.i.zaxis )
    *Graphic( g_r_stamnt_bush, "Right stabar mount bushing", gdef_stamnt_bush, bsh_stabar_mnt_r.b1
             , bsh_stabar_mnt_r.i.origin, bsh_stabar_mnt_r.i.zaxis )
    *if( bsh_link_stabar_l.isbush == true )
      *Graphic( g_l_stalnk_sleeve, "Left link/bar sleeve", gdef_stalnk_sleeve, b_link.l
               , bsh_link_stabar_l.i.origin, bsh_link_stabar_l.i.zaxis )
      *Graphic( g_l_stalnk_bush, "Left link/bar bush", gdef_stalnk_bush, bsh_link_stabar_l.b1
               , bsh_link_stabar_l.i.origin, bsh_link_stabar_l.i.zaxis )
      *Graphic( g_l_stalnk_pin, "Left link/bar pin", gdef_stalnk_pin, pb_stabar.body@p_link_stabar_att.l
               , bsh_link_stabar_l.i.origin, bsh_link_stabar_l.i.zaxis )
    *else()
      *Graphic( g_bsh_link_stabar_l, "Link stabar bush left", SPHERE, bsh_link_stabar_l.b1, bsh_link_stabar_l.i.origin, 15, 3 )
    *endif()
    *if( bsh_link_stabar_r.isbush == true )
      *Graphic( g_r_stalnk_sleeve, "Right link/bar sleeve", gdef_stalnk_sleeve, b_link.r
               , bsh_link_stabar_r.i.origin, bsh_link_stabar_r.i.zaxis )
      *Graphic( g_r_stalnk_bush, "Right link/bar bush", gdef_stalnk_bush, bsh_link_stabar_r.b1
               , bsh_link_stabar_r.i.origin, bsh_link_stabar_r.i.zaxis )
      *Graphic( g_r_stalnk_pin, "Right link/bar pin", gdef_stalnk_pin, pb_stabar.body@p_link_stabar_att.r
               , bsh_link_stabar_r.i.origin, bsh_link_stabar_r.i.zaxis )
    *else()
      *Graphic( g_bsh_link_stabar_r, "Link stabar bush right", SPHERE, bsh_link_stabar_r.b1, bsh_link_stabar_r.i.origin, 15, 3 )
    *endif()
    *if( bsh_link_susp.isbush == true )
      *Graphic( g_stalnk_sleeve, "Link to susp sleeve", gdef_stalnk_sleeve_pair, b_link
               , bsh_link_susp.i.origin, bsh_link_susp.i.zaxis )
      *Graphic( g_stalnk_bush, "Link to susp bush", gdef_stalnk_bush_pair, bsh_link_susp.b1
               , bsh_link_susp.i.origin, bsh_link_susp.i.zaxis )
      *Graphic( g_stalnk_pin, "Link to susp pin", gdef_stalnk_pin_pair, b_susp_att
               , bsh_link_susp.i.origin, bsh_link_susp.i.zaxis )
    *else()
      *GraphicPair( g_bsh_link_susp, "Link susp bush", SPHERE, bsh_link_susp.b1, bsh_link_susp.i.origin, 15, 3 )
    *endif()
    *SetPoint( p_link_susp_att,      LEFT, 1120.00, -544.00, 929.00 )
    *SetPoint( p_link_cg,            LEFT, (p_link_susp_att.l.x + p_link_stabar_att.l.x)/2, (p_link_susp_att.l.y + p_link_stabar_att.l.y)/2, (p_link_susp_att.l.z + p_link_stabar_att.l.z)/2 )
    *SetPoint( p_link_stabar_att,    LEFT, 1120.00, -544.00, 989.00 )
    *SetPoint( p_stabar_pt1,         LEFT, 1120.00, -515.00, 989.00 )
    *SetPoint( p_stabar_pt2,         LEFT, 1177.00, -515.00, 981.00 )
    *SetPoint( p_stabar_pt3,         LEFT, 1240.00, -480.00, 980.00 )
    *SetPoint( p_stabar_pt4,         LEFT, 1285.00, -438.00, 988.00 )
    *SetPoint( p_stabar_pt5,         LEFT, 1300.00, -400.00, 995.00 )
    *SetPoint( p_stabar_mnt,         LEFT, 1300.00, -360.00, 995.00 )
    *SetPoint( p_stabar_pt6,         LEFT, 1300.00, -200.00, 995.00 )
    *SetPoint( p_stabar_pt7,         LEFT, 1300.00, -100.00, 995.00 )
    *SetPoint( p_stabar_cent,              1300.00, 0.00, 995.00 )
    *SetPoint( p_link_stabar_bush_ax, LEFT, 1120.00, -644.00, 989.00 )
    *SetPoint( p_stabar_mnt_ax,      LEFT, 1300.00, -460.00, 995.00 )
    *SetPoint( p_link_susp_bush_ax,  LEFT, 1220.00, -544.00, 929.00 )
    *SetBodyInertia( b_link,               LEFT, 3.000e-001, 8.811e+001, 8.811e+001, 8.811e+001, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetPolyBeamProps( pb_stabar,                  CIRCULAR, 8.00000e-06, 2.00000e+05, 7.50000e+04, 2.00000e+01, 0.00000e+00, 0.00000e+00, CRATIO, 0.01 )
    *SetOrientation( bsh_stabar_mnt_l.bush,       ONEAXIS, Z, POINT, p_stabar_mnt_ax.l )
    *SetOrientation( bsh_stabar_mnt_r.bush,       ONEAXIS, Z, POINT, p_stabar_mnt_ax.r )
    *SetOrientation( bsh_link_stabar_l.bush,       ONEAXIS, Z, POINT, p_link_stabar_bush_ax.l )
    *SetOrientation( bsh_link_stabar_r.bush,       ONEAXIS, Z, POINT, p_link_stabar_bush_ax.r )
    *SetOrientation( bsh_link_susp.bush,   LEFT, ONEAXIS, Z, POINT, p_link_susp_bush_ax.l )
    *SetBush( bsh_link_stabar_l.bush,       LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetBush( bsh_link_stabar_r.bush,       LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetBush( bsh_stabar_mnt_l.bush,       LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetBush( bsh_stabar_mnt_r.bush,       LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetBush( bsh_link_susp.bush,   LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
  *EndDefine()
  *DefineGraphic( gdef_stamnt_sleeve, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 23, 23, 24, -12, CAPNONE, 3 )
    *Graphic( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 23, 21, 0.1, 12, CAPNONE, 3 )
    *Graphic( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 23, 21, 0.1, -12, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stamnt_bush, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 21, 21, 32, -16, CAPNONE, 3 )
    *Graphic( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 21, 10, 0.1, -16, CAPNONE, 3 )
    *Graphic( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 21, 10, 0.1, 16, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_sleeve, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 12, 12, 16, -8, CAPNONE, 3 )
    *Graphic( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 12, 11, 0.1, 8, CAPNONE, 3 )
    *Graphic( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 12, 11, 0.1, -8, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_bush, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 11, 11, 16, -8, CAPNONE, 3 )
    *Graphic( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 11, 5, 0.1, -8, CAPNONE, 3 )
    *Graphic( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 11, 5, 0.1, 8, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_pin, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_pin, "Pin", CYLINDER, body, point, VECTOR, align, 5, 5, 18, -9, CAPBOTH, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_sleeve_pair, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 12, 12, 16, -8, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 12, 11, 0.1, 8, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 12, 11, 0.1, -8, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_bush_pair, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 11, 11, 16, -8, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 11, 5, 0.1, -8, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 11, 5, 0.1, 8, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_pin_pair, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_pin, "Pin", CYLINDER, body, point, VECTOR, align, 5, 5, 18, -9, CAPBOTH, 3 )
  *EndDefine()
  *DefineSystem( sysdef_str_links, b_tierod_att, b_rackhsg_att, p_otrb )
    *Attachment( b_tierod_att, "Tierod attach", BodyPair, "Tierod attaching body", ,  )
    *Attachment( b_rackhsg_att, "Rackhsg attach", BodyPair, "Rack hsg attaching body", ,  )
    *Attachment( p_otrb, "OTRB", PointPair, "Outer tierod pt", ,  )
    *if( sys_column.label != "" )
      *System( sys_steering_lock, "Steering Lock", sysdef_steering_lock, sys_column.j_st_wheel )
    *else()
      *System( sys_steering_lock_noCol, "Steering Lock", sysdef_steering_lock, j_rack )
    *endif()
    *Integer( str_req_id, "Steering request ID", EDIT )
    *PointPair( p_itrb, "Inr tierod ball jt" )
    *PointPair( p_tierod_cg, "Tierod CG" )
    *Point( p_rack_cg, "Rack CG" )
    *Point( p_pinion_cent, "Center of Pinion" )
    *Point( p_upper_inp, "Upper Input Shaft" )
    *Point( p_upper_pin, "Upper Pinion" )
    *Point( p_pinion_cg, "Pinion CG" )
    *Point( p_rackhsg_cg, "Rack housing CG" )
    *PointPair( p_rackhsg_end, "Rack housing end" )
    *PointPair( p_rackhsg_mnt, "Rack housing mount" )
    *if( Op_Compliant.value == "Yes" )
      *PointPair( p_rackhsg_ax, "Rack housing axial" )
      *PointPair( p_rackhsg_rad, "Rack housing radial" )
    *endif()
    *BodyPair( b_tierod, "Tierod", p_tierod_cg, , , ,  )
    *Body( b_rack, "Rack", p_rack_cg, , , ,  )
    *Body( b_rackhsg, "Rack housing", p_rackhsg_cg, , , ,  )
    *Body( b_pinion, "Pinion", p_pinion_cg, , , ,  )
    *TransJoint( j_rack, "Rack trans joint", b_rackhsg, b_rack, p_rack_cg, POINT, p_itrb.l )
    *RevJoint( j_pinion, "Pinion joint", b_rackhsg, b_pinion, p_pinion_cent, POINT, p_upper_pin )
    *UJointPair( j_itrb, "Inr tierod ball jt", b_tierod, b_rack, p_itrb, SHAFT, POINT, p_otrb, CROSSPIN, VECTOR, Global_Frame.xaxis )
    *BallJointPair( j_otrb, "Otr tierod ball jt", b_tierod, b_tierod_att, p_otrb )
    *if( Op_Compliant.value == "No" )
      *FixedJoint( j_rackhsg_mnt, "Rack housing mount", b_rackhsg, b_rackhsg_att.l, p_rackhsg_mnt.l )
    *else()
      *BushPair( bsh_rackhsg_mnt, "Rack housing mount", b_rackhsg, b_rackhsg_att, p_rackhsg_mnt )
      *GraphicPair( CYLINDER1, "CYLINDER", CYLINDER, b_rackhsg, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 25, 25, 38.1, -19.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER2, "CYLINDER", CYLINDER, b_rackhsg, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 25, 23, .1, -19.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER3, "CYLINDER", CYLINDER, b_rackhsg, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 25, 23, .1, 19.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER4, "CYLINDER", CYLINDER, bsh_rackhsg_mnt.b2, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 23, 23, 40.1, -20.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER5, "CYLINDER", CYLINDER, bsh_rackhsg_mnt.b2, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 23, 10, 0.1, -20.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER6, "CYLINDER", CYLINDER, bsh_rackhsg_mnt.b2, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 23, 10, 0.1, 20.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER7, "CYLINDER", CYLINDER, b_rackhsg_att, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 10, 10, 52, -26, CAPBOTH, 3 )
    *endif()
    *Coupler( c_rackpin, "Rack/Pinion Coupler", 2JOINT, j_rack, j_pinion, TRANS, TRANS )
    *Output( str_link_req, "Rack Displacement and Force (mm - N)", EXPR, `-DZ({j_rack.i.idstring},{j_rack.j.idstring}, {j_rack.j.idstring})`, `-FZ({j_rack.i.idstring},{j_rack.j.idstring},{j_rack.j.idstring})`, `0`, `0`, `0`, `0` )
    *if( SolverMode == "ABAQUS" )
      *Motion( mot_pinion, "Motion pinion", JOINT, j_pinion, ROT )
    *endif()
    *Graphic( CYLINDER8, "CYLINDER", CYLINDER, b_rack, p_itrb.l, POINT, p_itrb.r, 12, CYLINDER8.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( Sphere1, "Sphere", SPHERE, j_itrb.b2, p_itrb, 15, 3 )
    *Graphic( CYLINDER9, "CYLINDER", CYLINDER, b_rackhsg, p_rackhsg_end.l, POINT, p_rackhsg_end.r, 35, CYLINDER9.r1, , 0.0, CAPBOTH, 3 )
    *Graphic( CYLINDER10, "CYLINDER", CYLINDER, b_rackhsg, p_pinion_cent, POINT, p_upper_pin, 25, 25, 75, -35, CAPBEGIN, 3 )
    *GraphicPair( CYLINDER11, "CYLINDER", CYLINDER, b_tierod, p_itrb, POINT, p_otrb, 10, CYLINDER11.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( Sphere2, "Sphere", SPHERE, j_otrb.b2, p_otrb, 15, 3 )
    *Graphic( CYLINDER12, "CYLINDER", CYLINDER, b_pinion, p_pinion_cent, POINT, p_upper_pin, 10, CYLINDER12.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER13, "CYLINDER", CYLINDER, b_pinion, p_pinion_cent, POINT, p_upper_pin, 15, 15, 50, -25, CAPNONE, 3 )
    *System( sys_column, "Steering column 1  (not for abaqus)", sysdef_column, sys_steering.p_upper_inp
             , sys_steering.p_upper_pin, sys_steering.b_pinion, sys_body.b_body )
    *if( sys_column.label != "" )
      *SetNote( sys_steering_lock,          "This system defines how steering should be locked, when computing virtual swing arm axis inside the msautoutils subroutines, that compute swing arm angle and legnth and similar numbers. \n" )
    *else()
      *SetNote( sys_steering_lock_noCol,       "This system defines how steering should be locked, when computing virtual swing arm axis inside the msautoutils subroutines, that compute swing arm angle and legnth and similar numbers. \n" )
    *endif()
    *SetInteger( str_req_id,                 { sys_column.label == "Steering column 1  (not for abaqus)" ? sys_column.str_req.idstring : str_link_req.idstring} )
    *SetEntityId( str_link_req,               60200010 )
    *SetPoint( p_itrb,               LEFT, 1165, -310, 977 )
    *SetPoint( p_tierod_cg,          LEFT, p_itrb.l.x / 2 + p_otrb.l.x / 2, p_itrb.l.y / 2 + p_otrb.l.y / 2, p_itrb.l.z / 2 + p_otrb.l.z / 2 )
    *SetPoint( p_rack_cg,                  p_itrb.l.x / 2 + p_itrb.r.x / 2, p_itrb.l.y / 2 + p_itrb.r.y / 2, p_itrb.l.z / 2 + p_itrb.r.z / 2 )
    *SetPoint( p_pinion_cent,              p_itrb.l.x + 10, p_itrb.l.y + 165, p_itrb.l.z - 15 )
    *SetPoint( p_upper_inp,                p_pinion_cent.x + 125, p_pinion_cent.y - 55, p_pinion_cent.z + 65 )
    *SetPoint( p_upper_pin,                p_upper_inp.x / 2 + p_pinion_cent.x / 2, p_upper_inp.y / 2 + p_pinion_cent.y / 2, p_upper_inp.z / 2 + p_pinion_cent.z / 2 )
    *SetPoint( p_pinion_cg,                p_pinion_cent.x / 2 + p_upper_pin.x / 2, p_pinion_cent.y / 2 + p_upper_pin.y / 2, p_pinion_cent.z / 2 + p_upper_pin.z / 2 )
    *SetPoint( p_rackhsg_mnt,        LEFT, p_itrb.l.x - 45.0, p_itrb.l.y + 165.0, p_itrb.l.z )
    *SetPoint( p_rackhsg_end,        LEFT, p_itrb.l.x, p_itrb.l.y + 75.0, p_itrb.l.z )
    *SetPoint( p_rackhsg_cg,               p_rackhsg_end.l.x / 2 + p_rackhsg_end.r.x / 2, p_rackhsg_end.l.y / 2 + p_rackhsg_end.r.y / 2, p_rackhsg_end.l.z / 2 + p_rackhsg_end.r.z / 2 )
    *SetPoint( p_rackhsg_ax,         LEFT, p_rackhsg_mnt.l.x, p_rackhsg_mnt.l.y, p_rackhsg_mnt.l.z + 100.0 )
    *SetPoint( p_rackhsg_rad,        LEFT, p_rackhsg_mnt.l.x + 100, p_rackhsg_mnt.l.y, p_rackhsg_mnt.l.z )
    *SetBodyInertia( b_tierod,             LEFT, 1.000e+00, 3.000e+04, 3.000e+04, 3.000e+02, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_rack,                     2.000e+00, 3.000e+04, 3.000e+02, 3.000e+04, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_rackhsg,                  8.000e+00, 2.000e+05, 2.000e+02, 2.000e+05, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_pinion,                   1.000e+00, 1.000e+04, 1.000e+04, 1.000e+02, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBush( bsh_rackhsg_mnt,      LEFT, LIN, 3.000e+04, LIN, 3.000e+04, LIN, 1.115e+04, LIN, 3.000e+02, LIN, 3.000e+02, LIN, 1.115e+02, LIN, 1.000e+06, LIN, 1.000e+06, LIN, 1.000e+06, LIN, 1.000e+04, LIN, 1.000e+04, LIN, 1.000e+04, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( bsh_rackhsg_mnt,      LEFT, TWOAXES, ZX, POINT, p_rackhsg_ax.l, POINT, p_rackhsg_rad.l )
    *SetCoupler( c_rackpin,                  8.5 )
    *SetMotion( mot_pinion,                 DISP, LIN, 0 )
  *EndDefine()
  *DefineSystem( sysdef_steering_lock, strJoint )
    *Attachment( strJoint, "Attachment strJoint", Joint, "Select attachment.", ,  )
    *SolverArray( sa_lock_register_array, "Lock Register Array", IC )
    *DataSet( ds_lock_application, "Lock Application", def_ds_lock_or_actuation_application )
    *DataSet( ds_lock_registerdata, "Lock Register Data", def_ds_steering_lock_registerdata )
    *SolverString( ss_strg_jt_fullvar, "Lock Joint Varname" )
    *SolverString( ss_strg_reg, "SpringRegistration" )
    *SetNote( ds_lock_application,        "This Dataset captures the information, to which marker, in what direction a lock is applied and whether it is rotational or translational. The information is bundled into a single integer number, that's passed to the solver. " )
    *SetNote( ds_lock_registerdata,       "This DataSet collects th information how the lock is associated with a suspension, so that it can be activated for the right computations. " )
    *SetOption( ds_lock_application.opt_direction,       "Z" )
    *SetOption( ds_lock_application.opt_mode,       "Rotational" )
    *SetInteger( ds_lock_application.int_api_value,       (ds_lock_application.opt_direction.ival + ds_lock_application.opt_mode.ival) * ds_lock_application.opt_swap_markers.ival )
    *SetInteger( ds_lock_registerdata.int_axl_index,       0 )
    *SetLocalUserDLLFlag( ss_strg_reg,                true )
    *SetSolverString( ss_strg_reg,                USER, `USER( {ds_lock_registerdata.int_version.value}, {sa_lock_register_array.idstring} )` )
    *SetLocalUserFunction( ss_strg_reg,                "msautoutils", , "REGISTER_STEERING_LOCK" )
    *SetSolverString( ss_strg_jt_fullvar,         `{strJoint.full_varname}` )
    *SetSolverArray( sa_lock_register_array,       VALUE, 5
, ds_lock_registerdata.int_axl_index.value, ss_strg_jt_fullvar.id, strJoint.i.id, -1, ds_lock_application.int_api_value.value )
  *EndDefine()
  *DefineDataSet( def_ds_steering_lock_registerdata )
    *Integer( int_axl_index, "Axle Index", EDIT )
    *Integer( int_version, "API Version", EDIT )
  *EndDefine()
  *DefineSystem( sysdef_column, p_lower_uj, p_l_uj_align, b_lis_att
           , b_column_att )
    *Attachment( p_lower_uj, "Lower UJoint", Point, "This is usually the same as the upper input shaft point in the steering system", ,  )
    *Attachment( p_l_uj_align, "Lower UJoint Al.", Point, "This is usually the same as the upper pinion point or the upper wormshaft point in the steering system", ,  )
    *Attachment( b_lis_att, "Input shaft", Body, "This is usually the gear input shaft defined in the boost system", ,  )
    *Attachment( b_column_att, "Column Attach", Body, "This is usually the vehicle body or ground", ,  )
    *Point( p_st_wheel, "Steering Wheel Center" )
    *Point( p_tilt_jt, "Tilt Joint Point" )
    *Point( p_cm_lcs, "CM of Lower Col Shaft" )
    *Point( p_cm_ucs, "CM of Upper Col Shaft" )
    *Point( p_upper_uj, "Upper U-joint Point" )
    *Point( p_tele_jt, "Telescopic Joint Point" )
    *Point( p_cmp_jt, "Comp. Joint Point" )
    *Point( p_cm_uis, "CM of Upper Int Shaft" )
    *Point( p_cm_mis, "CM of Middle Int Shaft" )
    *Point( p_cm_lis, "CM of Lower Int Shaft" )
    *Body( b_st_wheel, "Steering Wheel", p_st_wheel, , , ,  )
    *Body( b_ucs, "Upper Col Shaft", p_cm_ucs, , , ,  )
    *Body( b_lcs, "Lower Col Shaft", p_cm_lcs, , , ,  )
    *Body( b_uis, "Upper Int Shaft", p_cm_uis, , , ,  )
    *Body( b_mis, "Middle Int Shaft", p_cm_mis, , , ,  )
    *Body( b_lis, "Lower Int Shaft", p_cm_lis, , , ,  )
    *FixedJoint( j_swucs, "Fixed joint bet SW and UCS", b_st_wheel, b_ucs, p_st_wheel )
    *UJoint( j_tiltjt, "Tilt Joint", b_ucs, b_lcs, p_tilt_jt, SHAFT, POINT, p_st_wheel, SHAFT, POINT, p_upper_uj )
    *InlineJoint( j_colsupp, "Column Support Joint", b_lcs, b_column_att, p_cm_lcs, ORIGIN, POINT, p_tilt_jt )
    *UJoint( j_upper_uj, "Upper U-Joint", b_lcs, b_uis, p_upper_uj, SHAFT, POINT, p_tilt_jt, SHAFT, POINT, p_tele_jt )
    *TransJoint( j_tele_jt, "Telescopic Joint", b_uis, b_mis, p_tele_jt, POINT, p_cmp_jt )
    *FixedJoint( j_cmp_jt, "Column Compliance Joint", b_mis, b_lis, p_cmp_jt, ALLOW_COMPLIANCE )
    *UJoint( j_lower_uj, "Lower U-Joint", b_lis, b_lis_att, p_lower_uj, SHAFT, POINT, p_cmp_jt, SHAFT, POINT, p_l_uj_align )
    *RevJoint( j_st_wheel, "Steering wheel joint", b_st_wheel, b_column_att, p_st_wheel, POINT, p_tilt_jt )
    *Marker( mrk_st_wheel, "Steering wheel marker", b_st_wheel, p_st_wheel )
    *Output( str_req, "Steering Angle and Torque (deg - Nm)", EXPR, `-AZ({j_st_wheel.i.idstring},{j_st_wheel.j.idstring})*RTOD`, `-TZ({j_st_wheel.i.idstring},{j_st_wheel.j.idstring},{j_st_wheel.j.idstring})/1000`, `0`, `0`, `0`, `0` )
    *Graphic( CYLINDER1, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 135, 150, 15, 0, CAPNONE, 3 )
    *Graphic( CYLINDER2, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 165, 150, 15, 0, CAPNONE, 3 )
    *Graphic( CYLINDER3, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 150, 135, 15, -15, CAPNONE, 3 )
    *Graphic( CYLINDER4, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 150, 165, 15, -15, CAPNONE, 3 )
    *Graphic( CYLINDER5, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 40, 50, 76, -6, CAPBEGIN, 3 )
    *Graphic( str_mark, "Steer angle", CYLINDER, b_st_wheel, p_st_wheel, VECTOR, mrk_st_wheel.zaxis, 5, 5, 150, 0, CAPNONE, 3 )
    *Graphic( CYLINDER6, "CYLINDER", CYLINDER, b_ucs, p_st_wheel, POINT, p_tilt_jt, 10, CYLINDER6.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER7, "CYLINDER", CYLINDER, b_ucs, p_tilt_jt, POINT, p_st_wheel, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER8, "CYLINDER", CYLINDER, b_lcs, p_tilt_jt, POINT, p_upper_uj, 10, CYLINDER8.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER9, "CYLINDER", CYLINDER, b_lcs, p_tilt_jt, POINT, p_upper_uj, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER10, "CYLINDER", CYLINDER, b_lcs, p_upper_uj, POINT, p_tilt_jt, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER11, "CYLINDER", CYLINDER, b_uis, p_upper_uj, POINT, p_tele_jt, 10, CYLINDER11.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER12, "CYLINDER", CYLINDER, b_uis, p_upper_uj, POINT, p_tele_jt, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER13, "CYLINDER", CYLINDER, b_lis, p_cmp_jt, POINT, p_lower_uj, 10, CYLINDER13.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER14, "CYLINDER", CYLINDER, b_lis, p_lower_uj, POINT, p_cmp_jt, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER15, "CYLINDER", CYLINDER, b_mis, p_tele_jt, POINT, p_cmp_jt, 12, CYLINDER15.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER16, "CYLINDER", CYLINDER, b_mis, p_cmp_jt, POINT, p_tele_jt, 30, 30, 2, 2, CAPEND, 3 )
    *Graphic( CYLINDER17, "CYLINDER", CYLINDER, b_lis, p_cmp_jt, POINT, p_lower_uj, 30, 30, 2, 2, CAPEND, 3 )
    *Graphic( CYLINDER18, "CYLINDER", CYLINDER, j_cmp_jt.b1, j_cmp_jt.i.origin, VECTOR, j_cmp_jt.i.zaxis, 30, 30, 4, -2, CAPBOTH, 3 )
    *Graphic( CYLINDER19, "CYLINDER", CYLINDER, b_lis_att, p_lower_uj, POINT, p_l_uj_align, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER20, "CYLINDER", CYLINDER, j_tiltjt.b1, j_tiltjt.i.origin, VECTOR, j_tiltjt.i.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER21, "CYLINDER", CYLINDER, j_tiltjt.b2, j_tiltjt.j.origin, VECTOR, j_tiltjt.j.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER22, "CYLINDER", CYLINDER, j_upper_uj.b1, j_upper_uj.i.origin, VECTOR, j_upper_uj.i.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER23, "CYLINDER", CYLINDER, j_upper_uj.b2, j_upper_uj.j.origin, VECTOR, j_upper_uj.j.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER24, "CYLINDER", CYLINDER, j_lower_uj.b1, j_lower_uj.i.origin, VECTOR, j_lower_uj.i.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER25, "CYLINDER", CYLINDER, j_lower_uj.b2, j_lower_uj.j.origin, VECTOR, j_lower_uj.j.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *SetEntityId( str_req,                    60100010 )
    *SetPoint( p_st_wheel,                 2200.00, -410, 1500.00 )
    *SetPoint( p_upper_uj,                 1650.00, -410, 1325.00 )
    *SetPoint( p_cm_ucs,                   (p_st_wheel.x + p_tilt_jt.x)*1/2, (p_st_wheel.y + p_tilt_jt.y)*1/2, (p_st_wheel.z + p_tilt_jt.z)*1/2 )
    *SetPoint( p_tilt_jt,                  p_upper_uj.x + (p_st_wheel.x - p_upper_uj.x)*2/4, p_upper_uj.y + (p_st_wheel.y - p_upper_uj.y)*2/4, p_upper_uj.z + (p_st_wheel.z - p_upper_uj.z)*2/4 )
    *SetPoint( p_cm_lcs,                   (p_upper_uj.x + p_tilt_jt.x )*1/2, (p_upper_uj.y + p_tilt_jt.y )*1/2, (p_upper_uj.z + p_tilt_jt.z )*1/2 )
    *SetPoint( p_cm_uis,                   (p_upper_uj.x + p_tele_jt.x)*1/2, (p_upper_uj.y + p_tele_jt.y)*1/2, (p_upper_uj.z + p_tele_jt.z)*1/2 )
    *SetPoint( p_tele_jt,                  p_lower_uj.x + (p_upper_uj.x - p_lower_uj.x)*4/6, p_lower_uj.y + (p_upper_uj.y - p_lower_uj.y)*4/6, p_lower_uj.z + (p_upper_uj.z - p_lower_uj.z)*4/6 )
    *SetPoint( p_cm_mis,                   (p_cmp_jt.x + p_tele_jt.x)*1/2, (p_cmp_jt.y + p_tele_jt.y)*1/2, (p_cmp_jt.z + p_tele_jt.z)*1/2 )
    *SetPoint( p_cmp_jt,                   p_lower_uj.x + (p_upper_uj.x - p_lower_uj.x)*2/6, p_lower_uj.y + (p_upper_uj.y - p_lower_uj.y)*2/6, p_lower_uj.z + (p_upper_uj.z - p_lower_uj.z)*2/6 )
    *SetPoint( p_cm_lis,                   (p_cmp_jt.x + p_lower_uj.x)*1/2, (p_cmp_jt.y + p_lower_uj.y)*1/2, (p_cmp_jt.z + p_lower_uj.z)*1/2 )
    *SetBodyInertia( b_st_wheel,                 5.000e+00, 1.5e4, 1.5e4, 2.7e4, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_ucs,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_lcs,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_uis,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_mis,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_lis,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBush( j_cmp_jt.bush,              LIN, 1.000e+04, LIN, 1.000e+04, LIN, 1.000e+04, LIN, 1.000e+01, LIN, 1.000e+01, LIN, 1.000e+01, LIN, 1.000e+08, LIN, 1.000e+08, LIN, 1.000e+08, LIN, 1.000e+05, LIN, 1.000e+05, LIN, 1.000e+05, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( j_cmp_jt.bush,              ONEAXIS, Z, POINT, p_tele_jt )
    *SetOrientation( mrk_st_wheel,               TWOAXES, XZ, POINT, p_upper_uj, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_st_wheel.cm,              ONEAXIS, Z, POINT, p_tilt_jt )
    *SetOrientation( b_ucs.cm,                   ONEAXIS, Z, POINT, p_tilt_jt )
    *SetOrientation( b_lcs.cm,                   ONEAXIS, Z, POINT, p_tilt_jt )
    *SetOrientation( b_uis.cm,                   ONEAXIS, Z, POINT, p_upper_uj )
    *SetOrientation( b_mis.cm,                   ONEAXIS, Z, POINT, p_tele_jt )
    *SetOrientation( b_lis.cm,                   ONEAXIS, Z, POINT, p_lower_uj )
  *EndDefine()
  *DefineSystem( sysdef_sla_rear, b_uca_att, b_lca_att, b_toelink_att
           , b_tens_strut_att )
    *Attachment( b_uca_att, "UCA attach body", BodyPair, "UCA attaching body", ,  )
    *Attachment( b_lca_att, "LCA attach body", BodyPair, "LCA attaching body", ,  )
    *Attachment( b_toelink_att, "Toelink attach body", BodyPair, "Toelink attaching body", ,  )
    *Attachment( b_tens_strut_att, "Tstrut attach body", BodyPair, "Tens. strut attaching body", ,  )
    *Option( op_spin_comp, "Spindle compliance", 2, "No", "Yes", 1, 2, "No", "Yes", EDIT )
    *Option( op_TireGra, "Tire graphics", 2, "On", "Off", 1, 2, "On", "Off", EDIT )
    *PointPair( p_wheel_cg, "Wheel CG" )
    *PointPair( p_wc, "Wheel center" )
    *PointPair( p_spalign, "Spindle align" )
    *PointPair( p_kn_cg, "Knuckle CG" )
    *PointPair( p_lbj, "Lwr ball jt" )
    *PointPair( p_ubj, "Upr ball jt" )
    *PointPair( p_otrb, "Otr tierod ball jt" )
    *PointPair( p_lca_cg, "LCA CG" )
    *PointPair( p_tens_strut_cg, "Tension strut CG" )
    *PointPair( p_tens_strut_att, "Tension strut bush" )
    *PointPair( p_lca_bush, "LCA bush" )
    *PointPair( p_tstrut_at_lca, "Tension strut to LCA" )
    *PointPair( p_uca_cg, "UCA CG" )
    *PointPair( p_uca_frnt_bush, "UCA frnt bush" )
    *PointPair( p_uca_rear_bush, "UCA rear bush" )
    *PointPair( p_toelink_cg, "Toe link CG" )
    *PointPair( p_otr_toelink, "Otr toelink bush" )
    *PointPair( p_inr_toelink, "Inr toelink bush" )
    *PointPair( p_inr_toelink_ax, "Inr toelink bush ax" )
    *PointPair( p_otr_toelink_ax, "Otr toelink bush ax" )
    *PointPair( p_spr_upr, "Spring upr" )
    *PointPair( p_spr_lwr, "Spring lwr" )
    *PointPair( p_shk_upr_bush, "Shock upr bush" )
    *PointPair( p_shk_lwr_bush, "Shock lwr bush" )
    *BodyPair( b_wheel, "Wheel", p_wheel_cg, , , ,  )
    *BodyPair( b_hub, "Wheel hub", p_wheel_cg, , , ,  )
    *BodyPair( b_kn, "Knuckle", p_kn_cg, , , ,  )
    *BodyPair( b_lca, "Lwr control arm", p_lca_cg, , , ,  )
    *BodyPair( b_tens_strut, "Tension strut", p_tens_strut_cg, , , ,  )
    *BodyPair( b_uca, "Upr control arm", p_uca_cg, , , ,  )
    *BodyPair( b_toelink, "Toe link", p_toelink_cg, , , ,  )
    *BallJointPair( j_lbj, "Lwr ball jt", b_kn, b_lca, p_lbj )
    *BallJointPair( j_ubj, "Upr ball jt", b_kn, b_uca, p_ubj )
    *BallJointPair( bsh_otr_toelink, "Otr toelink bush", b_toelink, b_kn, p_otr_toelink, ALLOW_COMPLIANCE )
    *UJointPair( bsh_inr_toelink, "Inr toelink bush", b_toelink, b_toelink_att, p_inr_toelink, SHAFT, POINT, p_otr_toelink, CROSSPIN, VECTOR, Global_Frame.xaxis, ALLOW_COMPLIANCE )
    *RevJointPair( j_w_spin_rj, "Wheel spindle rj", b_hub, b_kn, p_wc, POINT, p_spalign )
    *if( op_spin_comp.value == "No" )
      *FixedJointPair( j_w_hub_fix, "Wheel|Hub fix jt", b_wheel, b_hub, p_wc )
    *else()
      *UJointPair( j_w_hub_uj, "Wheel|Hub comp u jt", b_wheel, b_hub, p_wc, SHAFT, POINT, p_spalign, CROSSPIN, VECTOR, b_wheel.cm.xaxis )
      *BushPair( bsh_w_hub, "Wheel|hub comp. bsh", b_wheel, b_hub, p_wc )
    *endif()
    *UJointPair( j_tens_strut_att, "Tension strut bushing", b_tens_strut, b_tens_strut_att, p_tens_strut_att, SHAFT, POINT, p_tstrut_at_lca, CROSSPIN, POINT, p_lca_bush, ALLOW_COMPLIANCE )
    *UJointPair( j_lca_att, "LCA bushing", b_lca, b_lca_att, p_lca_bush, SHAFT, POINT, p_lbj, CROSSPIN, POINT, p_tens_strut_att, ALLOW_COMPLIANCE )
    *BallJointPair( j_tstrut_to_lca, "Tension strut to LCA", b_tens_strut, b_lca, p_tstrut_at_lca, ALLOW_COMPLIANCE )
    *if( Op_Compliant.value == "Yes" )
      *BushPair( bsh_uca_frnt, "UCA frnt bush", b_uca, b_uca_att, p_uca_frnt_bush )
      *BushPair( bsh_uca_rear, "UCA rear bush", b_uca, b_uca_att, p_uca_rear_bush )
      *Graphic( g_a_arm_sleeve1, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_uca
               , bsh_uca_frnt.i.origin, bsh_uca_frnt.i.zaxis )
      *Graphic( g_a_arm_bush1, "gra_a_arm_bush", gdef_a_arm_bush, bsh_uca_frnt.b2
               , bsh_uca_frnt.i.origin, bsh_uca_frnt.i.zaxis )
      *Graphic( g_a_arm_pin1, "gra_a_arm_pin", gdef_a_arm_pin, b_uca_att
               , bsh_uca_frnt.j.origin, bsh_uca_frnt.j.zaxis )
      *Graphic( g_a_arm_sleeve2, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_uca
               , bsh_uca_rear.i.origin, bsh_uca_rear.i.zaxis )
      *Graphic( g_a_arm_bush2, "gra_a_arm_bush", gdef_a_arm_bush, bsh_uca_rear.b2
               , bsh_uca_rear.i.origin, bsh_uca_rear.i.zaxis )
      *Graphic( g_a_arm_pin2, "gra_a_arm_pin", gdef_a_arm_pin, b_uca_att
               , bsh_uca_rear.j.origin, bsh_uca_rear.j.zaxis )
    *else()
      *RevJointPair( j_uca_bush, "UCA frnt|rear bush", b_uca, b_uca_att, p_uca_frnt_bush, POINT, p_uca_rear_bush )
      *GraphicPair( Sphere1, "Sphere", SPHERE, j_uca_bush.b1, p_uca_frnt_bush, 25, 3 )
      *GraphicPair( Sphere2, "Sphere", SPHERE, j_uca_bush.b1, p_uca_rear_bush, 25, 3 )
    *endif()
    *GraphicPair( g_lca1, "LCA1", CYLINDER, b_lca, p_lbj, POINT, p_tstrut_at_lca, 12, g_lca1.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_lca2, "LCA2", CYLINDER, b_lca, p_tstrut_at_lca, POINT, p_lca_bush, 12, g_lca2.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_tstrut, "Tstrut", CYLINDER, b_tens_strut, p_tstrut_at_lca, POINT, p_tens_strut_att, 12, g_tstrut.r1, , 0.0, CAPNONE, 3 )
    *Graphic( g_a_arm, "gra_a_arm", gdef_a_arm, b_uca
             , p_ubj, p_lbj, p_uca_frnt_bush, p_uca_rear_bush )
    *if( j_tens_strut_att.isbush == true )
      *Graphic( g_tstrut_cup3, "gra_a_arm_sleeve", gdef_tstrut_cup, b_tens_strut
               , j_tens_strut_att.i.origin, j_tens_strut_att.i.zaxis )
      *Graphic( g_tstrut_bush3, "gra_a_arm_bush", gdef_tstrut_bush, j_tens_strut_att.b2
               , j_tens_strut_att.i.origin, j_tens_strut_att.i.zaxis )
      *Graphic( g_tstrut_kn3, "gra_a_arm_pin", gdef_tstrut_kn, b_tens_strut_att
               , j_tens_strut_att.j.origin, j_tens_strut_att.j.zaxis )
    *else()
      *GraphicPair( Sphere3, "Sphere", SPHERE, j_tens_strut_att.b1, j_tens_strut_att.i.origin, 25, 3 )
    *endif()
    *if( j_lca_att.isbush == true )
      *Graphic( g_a_arm_sleeve4, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_lca
               , j_lca_att.i.origin, j_lca_att.i.zaxis )
      *Graphic( g_a_arm_bush4, "gra_a_arm_bush", gdef_a_arm_bush, j_lca_att.b2
               , j_lca_att.i.origin, j_lca_att.i.zaxis )
      *Graphic( g_a_arm_pin4, "gra_a_arm_pin", gdef_a_arm_pin, b_lca_att
               , j_lca_att.j.origin, j_lca_att.j.zaxis )
    *else()
      *GraphicPair( Sphere4, "Sphere", SPHERE, j_lca_att.b1, j_lca_att.i.origin, 25, 3 )
    *endif()
    *if( j_tstrut_to_lca.isbush == true )
      *Graphic( g_tstrut_cup5, "gra_a_arm_sleeve", gdef_tstrut_cup, b_tens_strut
               , j_tstrut_to_lca.i.origin, j_tstrut_to_lca.i.zaxis )
      *Graphic( g_tstrut_bush5, "gra_a_arm_bush", gdef_tstrut_bush, j_tstrut_to_lca.b2
               , j_tstrut_to_lca.i.origin, j_tstrut_to_lca.i.zaxis )
      *Graphic( g_tstrut_kn5, "gra_a_arm_pin", gdef_tstrut_kn, b_lca
               , j_tstrut_to_lca.j.origin, j_tstrut_to_lca.j.zaxis )
    *else()
      *GraphicPair( Sphere5, "Sphere", SPHERE, j_tstrut_to_lca.b1, j_tstrut_to_lca.i.origin, 25, 3 )
    *endif()
    *GraphicPair( Sphere6, "Sphere", SPHERE, j_lbj.b1, p_lbj, 15, 3 )
    *GraphicPair( Sphere7, "Sphere", SPHERE, j_ubj.b1, p_ubj, 15, 3 )
    *if( op_TireGra.value == "On" )
      *GraphicPair( g_tire, "Tire", TIRE, b_wheel, p_wc, POINT, p_spalign, "P215/70*15" )
    *endif()
    *Graphic( g_kn, "gra_kn", gdef_kn, b_kn
             , p_wc, p_spalign, p_ubj, p_lbj, p_otrb )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, b_toelink, p_otr_toelink, POINT, p_inr_toelink, 10, Cylinder3.r1, , 0.0, CAPNONE, 3 )
    *Graphic( g_link_sleeve1, "gra_link_sleeve", gdef_link_sleeve, b_toelink
             , bsh_inr_toelink.i.origin, bsh_inr_toelink.i.zaxis )
    *Graphic( g_link_bush1, "gra_link_bush", gdef_link_bush, bsh_inr_toelink.b2
             , bsh_inr_toelink.i.origin, bsh_inr_toelink.i.zaxis )
    *Graphic( g_link_pin1, "gra_link_pin", gdef_link_pin, b_toelink_att
             , bsh_inr_toelink.j.origin, bsh_inr_toelink.j.zaxis )
    *Graphic( g_link_sleeve2, "gra_link_sleeve", gdef_link_sleeve, b_toelink
             , bsh_otr_toelink.i.origin, bsh_otr_toelink.i.zaxis )
    *Graphic( g_link_bush2, "gra_link_bush", gdef_link_bush, bsh_otr_toelink.b2
             , bsh_otr_toelink.i.origin, bsh_otr_toelink.i.zaxis )
    *Graphic( g_link_pin2, "gra_link_pin", gdef_link_pin, b_kn
             , bsh_otr_toelink.j.origin, bsh_otr_toelink.j.zaxis )
    *DataSet( ds_wh_align, "Static Wheel Alignment", def_ds_wh_align )
    *Form( frm_wh_align, "Static Wheel Alignment", def_frm_wh_align, ds_wh_align )
    *System( sys_rear_shock, "Rear shock absorber ( with inline jts )", sysdef_shock_inl_r, sys_body.b_body
             , sys_rear_susp.b_lca, sys_rear_susp.p_shk_upr_bush, sys_rear_susp.p_shk_lwr_bush )
    *System( sys_rear_spring, "Rear coil spring", sysdef_r_coil_spr, sys_body.b_body
             , sys_rear_susp.b_lca, sys_rear_susp.p_spr_upr, sys_rear_susp.p_spr_lwr )
    *SetPoint( p_wc,                 LEFT, 3700.00, -750.00, 1000.00 )
    *SetPoint( p_wheel_cg,           LEFT, 3700.00, -750.00, 1000.00 )
    *SetPoint( p_spalign,            LEFT, p_wc.l.x + 100*COS(ds_wh_align.camb.value*PI/180)*SIN(ds_wh_align.toe.value*PI/180), p_wc.l.y + 100*COS(ds_wh_align.camb.value*PI/180)*COS(ds_wh_align.toe.value*PI/180), p_wc.l.z + 100*SIN(ds_wh_align.camb.value*PI/180) )
    *SetPoint( p_kn_cg,              LEFT, 3700.00, -680.00, 999.80 )
    *SetPoint( p_lbj,                LEFT, 3674.00, -702.00, 884.00 )
    *SetPoint( p_ubj,                LEFT, 3735.00, -657.00, 1165.00 )
    *SetPoint( p_otrb,               LEFT, 3560.00, -660.00, 1005.00 )
    *SetPoint( p_tens_strut_att,     LEFT, 4000.00, -195.00, 905.00 )
    *SetPoint( p_tstrut_at_lca,      LEFT, 3700.00, -450.00, 899.00 )
    *SetPoint( p_lca_bush,           LEFT, 3700.00, -300.00, 900.00 )
    *SetPoint( p_lca_cg,             LEFT, 3850.00, -400.00, 892.50 )
    *SetPoint( p_uca_frnt_bush,      LEFT, 3570.00, -375.00, 1185.00 )
    *SetPoint( p_uca_rear_bush,      LEFT, 3880.00, -370.00, 1150.00 )
    *SetPoint( p_uca_cg,             LEFT, 3700.00, -500.00, 1160.00 )
    *SetPoint( p_spr_upr,            LEFT, 3690.00, -450.00, 1180.00 )
    *SetPoint( p_spr_lwr,            LEFT, 3690.00, -500.00, 950.00 )
    *SetPoint( p_shk_upr_bush,       LEFT, 3710.00, -450.00, 1180.00 )
    *SetPoint( p_shk_lwr_bush,       LEFT, 3710.00, -500.00, 930.00 )
    *SetPoint( p_toelink_cg,         LEFT, 3555.00, -568.00, 1010.00 )
    *SetPoint( p_otr_toelink,        LEFT, 3560.00, -660.00, 1005.00 )
    *SetPoint( p_inr_toelink,        LEFT, 3550.00, -467.50, 1013.50 )
    *SetPoint( p_inr_toelink_ax,     LEFT, 3650.00, -467.50, 1013.50 )
    *SetPoint( p_otr_toelink_ax,     LEFT, 3660.00, -660.00, 1005.00 )
    *SetPoint( p_tens_strut_cg,      LEFT, p_tstrut_at_lca.l.x, p_tstrut_at_lca.l.y, p_tstrut_at_lca.l.z )
    *SetBodyInertia( b_wheel,              LEFT, 20, 1.750e+06, 1.750e+06, 3.000e+06, 0, 0, 0 )
    *SetOrientation( b_wheel.cm.l,               TWOAXES, ZX, POINT, p_spalign.l, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_wheel.cm.r,               TWOAXES, ZX, POINT, p_spalign.r, VECTOR, Global_Frame.zaxis )
    *SetBodyInertia( b_hub,                LEFT, 10.00e+000, 70000, 70000, 1e5, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetOrientation( b_hub.cm.l,                 TWOAXES, ZX, POINT, p_spalign.l, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_hub.cm.r,                 TWOAXES, ZX, POINT, p_spalign.r, VECTOR, Global_Frame.zaxis )
    *SetBodyIC( b_hub.l,                    , , , , , b_wheel.l.wz )
    *SetBodyIC( b_hub.r,                    , , , , , b_wheel.r.wz )
    *SetBodyICFlag( b_hub.l,                    false, false, false, false, false, false )
    *SetBodyICFlag( b_hub.r,                    false, false, false, false, false, false )
    *SetBodyInertia( b_kn,                 LEFT, 3.000e+000, 4.089e+003, 4.089e+003, 4.089e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_lca,                LEFT, 2.000e+000, 2.081e+003, 2.081e+003, 2.081e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_tens_strut,         LEFT, 2.000e+000, 2.081e+003, 2.081e+003, 2.081e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_uca,                LEFT, 2.000e+000, 2.081e+003, 2.081e+003, 2.081e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_toelink,            LEFT, 1.000e+000, 6.553e+002, 6.553e+002, 6.553e+002, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBush( bsh_inr_toelink.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_inr_toelink.bush, LEFT, TWOAXES, XZ, POINT, p_otr_toelink.l, POINT, p_inr_toelink_ax.l )
    *SetBush( bsh_otr_toelink.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_otr_toelink.bush, LEFT, TWOAXES, XZ, POINT, p_inr_toelink.l, POINT, p_otr_toelink_ax.l )
    *SetBush( j_tens_strut_att.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_tens_strut_att.bush, LEFT, ONEAXIS, Z, POINT, p_tstrut_at_lca.l )
    *SetBush( bsh_uca_frnt,         LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_uca_frnt,         LEFT, TWOAXES, ZX, POINT, p_uca_rear_bush.l, POINT, p_ubj.l )
    *SetBush( j_lca_att.bush,       LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_lca_att.bush,       LEFT, ONEAXIS, Z, POINT, p_tens_strut_att.l )
    *SetBush( bsh_uca_rear,         LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_uca_rear,         LEFT, TWOAXES, ZY, POINT, p_uca_frnt_bush.l, POINT, p_ubj.l )
    *SetBush( j_tstrut_to_lca.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_tstrut_to_lca.bush, LEFT, ONEAXIS, Z, POINT, p_tens_strut_att.l )
    *SetBush( bsh_w_hub,            LEFT, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 1745329.252*180/PI, LIN, 1745329.252*180/PI, LIN, 0.0*180/PI, LIN, 17453.29252*180/PI, LIN, 17453.29252*180/PI, LIN, 0.0*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_w_hub,            LEFT, TWOAXES, ZX, POINT, p_spalign.l, VECTOR, j_w_hub_uj.l.j.zaxis )
    *SetColorMaterialReference( g_tire.l,                   MODEL.mat_gray6 )
    *SetColorMaterialReference( g_tire.r,                   MODEL.mat_gray6 )
  *EndDefine()
  *DefineGraphic( gdef_link_sleeve, body, p_bush, v_bush )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bush, "Attachment p_bush", PointPair, "Select attachment.", ,  )
    *Attachment( v_bush, "Attachment v_bush", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, p_bush, VECTOR, v_bush, 22, 22, 22, -11, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, p_bush, VECTOR, v_bush, 22, 19, 0.1, 11, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, p_bush, VECTOR, v_bush, 22, 19, 0.1, -11, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_link_bush, body, p_bush, v_bush )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bush, "Attachment p_bush", PointPair, "Select attachment.", ,  )
    *Attachment( v_bush, "Attachment v_bush", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, p_bush, VECTOR, v_bush, 19, 19, 22, -11, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, p_bush, VECTOR, v_bush, 8, 19, 2, -13, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, p_bush, VECTOR, v_bush, 19, 8, 2, 11, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_link_pin, body, p_bush, v_bush )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bush, "Attachment p_bush", PointPair, "Select attachment.", ,  )
    *Attachment( v_bush, "Attachment v_bush", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_pin, "Pin", CYLINDER, body, p_bush, VECTOR, v_bush, 8, 8, 32, -16, CAPBOTH, 3 )
  *EndDefine()
  *DefineSystem( sysdef_shock_inl_r, b_shk_rod_att, b_shk_tube_att, p_shk_upr_bush
           , p_shk_lwr_bush )
    *Attachment( b_shk_rod_att, "Shk rod (upr shk) attach", BodyPair, "Shock rod|upr shk attaching body", ,  )
    *Attachment( b_shk_tube_att, "Shk tube (lwr shk) attach", BodyPair, "Shock tube|lwr shk attaching body", ,  )
    *Attachment( p_shk_upr_bush, "Shk upr bushing", PointPair, "Shock upper bushing location", ,  )
    *Attachment( p_shk_lwr_bush, "Shk lwr bushing", PointPair, "Shock lower bushing location", ,  )
    *PointPair( p_shk_rod_cg, "Shock rod CG" )
    *PointPair( p_shk_rod_lwr, "Shk rod lwr" )
    *PointPair( p_shk_upr_bush_ax, "Shk upr bush ax" )
    *PointPair( p_shk_tube_cg, "Shock tube CG" )
    *PointPair( p_shk_tube_upr, "Shk tube upr" )
    *PointPair( p_shk_lwr_bush_ax, "Shk lwr bush ax" )
    *BodyPair( b_shk_rod, "Shock rod (upr shk)", p_shk_rod_cg, , , ,  )
    *BodyPair( b_shk_tube, "Shock tube (lwr shk)", p_shk_tube_cg, , , ,  )
    *InlineJointPair( j_shk_lwr_inline, "Lwr shock inline joint", b_shk_rod, b_shk_tube, p_shk_rod_lwr, ORIGIN, POINT, p_shk_tube_upr )
    *InlineJointPair( j_shk_upr_inline, "Upr shock inline joint", b_shk_tube, b_shk_rod, p_shk_tube_upr, ORIGIN, POINT, p_shk_rod_lwr )
    *UJointPair( bsh_shk_upr, "Shk upr bush", b_shk_rod, b_shk_rod_att, p_shk_upr_bush, SHAFT, POINT, p_shk_lwr_bush, CROSSPIN, POINT, p_shk_upr_bush_ax, ALLOW_COMPLIANCE )
    *UJointPair( bsh_shk_lwr, "Shk lwr bush", b_shk_tube, b_shk_tube_att, p_shk_lwr_bush, SHAFT, POINT, p_shk_upr_bush, CROSSPIN, POINT, p_shk_lwr_bush_ax, ALLOW_COMPLIANCE )
    *CoilSpringPair( dmp, "Shock damper", b_shk_rod, b_shk_tube, p_shk_upr_bush, p_shk_lwr_bush )
    *Graphic( g_shk_rod, "gra_shk_rod", gdef_shk_rod_r, b_shk_rod
             , p_shk_upr_bush, p_shk_rod_lwr )
    *Graphic( g_shk_tube, "gra_shk_tube", gdef_shk_tube_r, b_shk_tube
             , p_shk_tube_upr, p_shk_lwr_bush )
    *if( bsh_shk_upr.isbush == true )
      *Graphic( g_shk_bush_sleeve1, "gra_shk_bush_sleeve", gdef_shk_bush_sleeve_r, b_shk_rod
               , bsh_shk_upr.i.origin, bsh_shk_upr.i.zaxis )
      *Graphic( g_shk_bush1, "gra_shk_bush", gdef_shk_bush_r, bsh_shk_upr.b2
               , bsh_shk_upr.i.origin, bsh_shk_upr.i.zaxis )
      *Graphic( g_shk_pin1, "gra_shk_pin", gdef_shk_pin_r, b_shk_rod_att
               , bsh_shk_upr.j.origin, bsh_shk_upr.j.zaxis )
    *else()
      *GraphicPair( Sphere1, "Sphere", SPHERE, b_shk_rod, p_shk_upr_bush, 15, 3 )
    *endif()
    *if( bsh_shk_lwr.isbush == true )
      *Graphic( g_shk_bush_sleeve2, "gra_shk_bush_sleeve", gdef_shk_bush_sleeve_r, b_shk_tube
               , bsh_shk_lwr.i.origin, bsh_shk_lwr.i.zaxis )
      *Graphic( g_shk_bush2, "gra_shk_bush", gdef_shk_bush_r, bsh_shk_lwr.b2
               , bsh_shk_lwr.i.origin, bsh_shk_lwr.i.zaxis )
      *Graphic( g_shk_pin2, "gra_shk_pin", gdef_shk_pin_r, b_shk_tube_att
               , bsh_shk_lwr.j.origin, bsh_shk_lwr.j.zaxis )
    *else()
      *GraphicPair( Sphere2, "Sphere", SPHERE, b_shk_tube, p_shk_lwr_bush, 15, 3 )
    *endif()
    *Output( shk_l_disp, "Left shock disp", DISP, j_shk_lwr_inline.l.i.origin, j_shk_lwr_inline.l.b1, j_shk_lwr_inline.l.i.origin, j_shk_lwr_inline.l.b2, j_shk_lwr_inline.l.j, BOTH_MARKERS )
    *Output( shk_r_disp, "Right shock disp", DISP, j_shk_lwr_inline.r.i.origin, j_shk_lwr_inline.r.b1, j_shk_lwr_inline.r.i.origin, j_shk_lwr_inline.r.b2, j_shk_lwr_inline.r.j, BOTH_MARKERS )
    *Output( shk_l_vel, "Left shock vel", VEL, dmp.l.i.origin, dmp.l.b1, dmp.l.j.origin, dmp.l.b2, j_shk_lwr_inline.l.j, BOTH_MARKERS )
    *Output( shk_r_vel, "Right shock vel", VEL, dmp.r.i.origin, dmp.r.b1, dmp.r.j.origin, dmp.r.b2, j_shk_lwr_inline.r.j, BOTH_MARKERS )
    *DataSet( ds_shk, "Shock rod/tube lengths", dsdef_shock_r )
    *Form( frm_shk, "Shock rod/tube lengths", frmdef_shock_r, ds_shk )
    *SetEntityId( shk_l_disp,                 10102010 )
    *SetEntityId( shk_r_disp,                 10102110 )
    *SetEntityId( shk_l_vel,                  10102020 )
    *SetEntityId( shk_r_vel,                  10102120 )
    *SetReal( ds_shk.shk_len,             sqrt((p_shk_upr_bush.l.x-p_shk_lwr_bush.l.x)^2 +(p_shk_upr_bush.l.y-p_shk_lwr_bush.l.y)^2+(p_shk_upr_bush.l.z-p_shk_lwr_bush.l.z)^2) )
    *SetReal( ds_shk.shk_rod_len,         150 )
    *SetReal( ds_shk.shk_tube_len,        153 )
    *SetPoint( p_shk_upr_bush_ax,    LEFT, p_shk_upr_bush.l.x + 100, p_shk_upr_bush.l.y, p_shk_upr_bush.l.z )
    *SetPoint( p_shk_lwr_bush_ax,    LEFT, p_shk_lwr_bush.l.x + 100, p_shk_lwr_bush.l.y, p_shk_lwr_bush.l.z )
    *SetPoint( p_shk_rod_lwr,        LEFT, p_shk_upr_bush.l.x + (p_shk_lwr_bush.l.x-p_shk_upr_bush.l.x)/ds_shk.shk_len.value*ds_shk.shk_rod_len.value, p_shk_upr_bush.l.y + (p_shk_lwr_bush.l.y-p_shk_upr_bush.l.y)/ds_shk.shk_len.value*ds_shk.shk_rod_len.value, p_shk_upr_bush.l.z + (p_shk_lwr_bush.l.z-p_shk_upr_bush.l.z)/ds_shk.shk_len.value*ds_shk.shk_rod_len.value )
    *SetPoint( p_shk_tube_upr,       LEFT, p_shk_lwr_bush.l.x + (p_shk_upr_bush.l.x-p_shk_lwr_bush.l.x)/ds_shk.shk_len.value*ds_shk.shk_tube_len.value, p_shk_lwr_bush.l.y + (p_shk_upr_bush.l.y-p_shk_lwr_bush.l.y)/ds_shk.shk_len.value*ds_shk.shk_tube_len.value, p_shk_lwr_bush.l.z + (p_shk_upr_bush.l.z-p_shk_lwr_bush.l.z)/ds_shk.shk_len.value*ds_shk.shk_tube_len.value )
    *SetPoint( p_shk_rod_cg,         LEFT, p_shk_upr_bush.l.x / 2 + p_shk_rod_lwr.l.x / 2, p_shk_upr_bush.l.y / 2 + p_shk_rod_lwr.l.y / 2, p_shk_upr_bush.l.z / 2 + p_shk_rod_lwr.l.z / 2 )
    *SetPoint( p_shk_tube_cg,        LEFT, p_shk_lwr_bush.l.x / 2 + p_shk_tube_upr.l.x / 2, p_shk_lwr_bush.l.y / 2 + p_shk_tube_upr.l.y / 2, p_shk_lwr_bush.l.z / 2 + p_shk_tube_upr.l.z / 2 )
    *SetBodyInertia( b_shk_rod,            LEFT, 1.000e+000, 6.553e+002, 6.553e+002, 6.553e+002, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_shk_tube,           LEFT, 1.000e+000, 6.553e+002, 6.553e+002, 6.553e+002, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetCoilSpring( dmp,                  LEFT, LIN, 0, LIN, 1, 0, 0 )
    *SetBush( bsh_shk_lwr.bush,     LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_shk_lwr.bush,     LEFT, TWOAXES, XZ, POINT, p_shk_upr_bush.l, POINT, p_shk_lwr_bush_ax.l )
    *SetBush( bsh_shk_upr.bush,     LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_shk_upr.bush,     LEFT, TWOAXES, XZ, POINT, p_shk_lwr_bush.l, POINT, p_shk_upr_bush_ax.l )
  *EndDefine()
  *DefineGraphic( gdef_shk_rod_r, b_shk_upr_sleeve, p_rod_upr, p_rod_lwr )
    *Attachment( b_shk_upr_sleeve, "Attachment b_shk_upr_sleeve", BodyPair, "Select attachment.", ,  )
    *Attachment( p_rod_upr, "Attachment p_rod_upr", PointPair, "Select attachment.", ,  )
    *Attachment( p_rod_lwr, "Attachment p_rod_lwr", PointPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_shk_upr_sleeve, p_rod_upr, POINT, p_rod_lwr, 18, 18, 145, 18, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_shk_upr_sleeve, p_rod_upr, POINT, p_rod_lwr, 7, 18, 5, 13, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_shk_tube_r, b_shk_lwr_sleeve, p_tube_upr, p_tube_lwr )
    *Attachment( b_shk_lwr_sleeve, "Attachment b_shk_lwr_sleeve", BodyPair, "Select attachment.", ,  )
    *Attachment( p_tube_upr, "Attachment p_tube_upr", PointPair, "Select attachment.", ,  )
    *Attachment( p_tube_lwr, "Attachment p_tube_lwr", PointPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_shk_lwr_sleeve, p_tube_lwr, POINT, p_tube_upr, 14, 14, 125, 18, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_shk_lwr_sleeve, p_tube_lwr, POINT, p_tube_upr, 7, 14, 5, 13, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_shk_bush_sleeve_r, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, body, point, VECTOR, align, 15, 15, 18, -9, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, body, point, VECTOR, align, 15, 13, 0.1, 9, CAPNONE, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, body, point, VECTOR, align, 13, 15, 0.1, -9, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_shk_bush_r, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, body, point, VECTOR, align, 13, 13, 18, -9, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, body, point, VECTOR, align, 6, 13, 2, -11, CAPNONE, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, body, point, VECTOR, align, 13, 6, 2, 9, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_shk_pin_r, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, body, point, VECTOR, align, 6, 6, 30, -15, CAPBOTH, 3 )
  *EndDefine()
  *DefineDataSet( dsdef_shock_r )
    *Real( shk_len, "Shock length", EDIT )
    *Real( shk_rod_len, "Shock rod (upr shk) length", EDIT )
    *Real( shk_tube_len, "Shock tube (lwr shk) length", EDIT )
  *EndDefine()
  *DefineForm( frmdef_shock_r, ds )
    *SetRowsCols( 3, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 40 )
    *ColumnLabel( 1, 2, "Rod/Tube Lengths" )
    *SetCell( 1, 1, ds.shk_len.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.shk_len.value, "%5.1f", RIGHT, NO_EDIT )
    *SetCell( 2, 1, ds.shk_rod_len.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.shk_rod_len.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 3, 1, ds.shk_tube_len.label, "", LEFT, NO_EDIT )
    *SetCell( 3, 2, ds.shk_tube_len.value, "%5.1f", RIGHT, EDIT )
  *EndDefine()
  *DefineSystem( sysdef_r_coil_spr, b_spr_upr_att, b_spr_lwr_att, p_spr_upr
           , p_spr_lwr )
    *Attachment( b_spr_upr_att, "Spr upr attach", BodyPair, "Spring upper attach", ,  )
    *Attachment( b_spr_lwr_att, "Spr lwr attach", BodyPair, "Spring lower attach", ,  )
    *Attachment( p_spr_upr, "Spr upr point", PointPair, "Spr upr point", ,  )
    *Attachment( p_spr_lwr, "Spr lwr point", PointPair, "Spr lwr point", ,  )
    *System( sys_travel_lock, "Travel Lock", sysdef_travel_lock_coil, cspr )
    *CoilSpringPair( cspr, "Coil spring", b_spr_upr_att, b_spr_lwr_att, p_spr_upr, p_spr_lwr )
    *GraphicPair( g_spring, "Coil spring", SPRING, cspr, cspr.p1, cspr.p2, 4, 50 )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_spr_upr_att, p_spr_upr, POINT, p_spr_lwr, 60, 60, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_spr_upr_att, p_spr_upr, POINT, p_spr_lwr, 35, 35, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, b_spr_upr_att, p_spr_upr, POINT, p_spr_lwr, 60, 35, 0.1, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder4, "Cylinder", CYLINDER, b_spr_lwr_att, p_spr_lwr, POINT, p_spr_upr, 60, 60, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder5, "Cylinder", CYLINDER, b_spr_lwr_att, p_spr_lwr, POINT, p_spr_upr, 35, 35, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder6, "Cylinder", CYLINDER, b_spr_lwr_att, p_spr_lwr, POINT, p_spr_upr, 60, 35, 0.1, -10, CAPNONE, 3 )
    *Output( spr_l_disp, "Left spring length", DISP, cspr.l.i.origin, cspr.l.b1, cspr.l.j.origin, cspr.l.b2, cspr.l.i, BOTH_MARKERS )
    *Output( spr_r_disp, "Right spring length", DISP, cspr.r.i.origin, cspr.r.b1, cspr.r.j.origin, cspr.r.b2, cspr.r.i, BOTH_MARKERS )
    *Output( spr_l_vel, "Left spring vel", VEL, cspr.l.i.origin, cspr.l.b1, cspr.l.j.origin, cspr.l.b2, cspr.l.i, BOTH_MARKERS )
    *Output( spr_r_vel, "Right spring vel", VEL, cspr.r.i.origin, cspr.r.b1, cspr.r.j.origin, cspr.r.b2, cspr.r.i, BOTH_MARKERS )
    *SetNote( sys_travel_lock,            "This system defines how travel should be locked, when computing virtual steer axis inside the msautoutils subroutines, that compute scrub radius, caster trail and similar numbers. \n" )
    *SetEntityId( spr_l_disp,                 10103010 )
    *SetEntityId( spr_r_disp,                 10103110 )
    *SetEntityId( spr_l_vel,                  10103020 )
    *SetEntityId( spr_r_vel,                  10103120 )
    *SetCoilSpring( cspr,                 LEFT, LIN, 90, LIN, 0.000e+00, 6150, sqrt((p_spr_upr.l.x-p_spr_lwr.l.x)^2+(p_spr_upr.l.y-p_spr_lwr.l.y)^2+(p_spr_upr.l.z-p_spr_lwr.l.z)^2) )
  *EndDefine()
  *DefineSystem( sysdef_pwrtrain, b_body )
    *Attachment( b_body, "Powertrain mount body", BodyPair, "Body to which powertrain is mounted", sys_body.b_body,  )
    *SolverVariable( sv_throttle_output, "Driver Throttle Output" )
    *SolverVariable( sv_driver_gear_output, "Dummy Driver Gear Output" )
    *SolverVariable( sv_clutch_output, "Dummy Driver Clutch Output" )
    *SolverVariable( sv_engine_speed, "Dummy Engine Speed" )
    *SolverVariable( sv_torque_output, "Drive Torque" )
    *ActionReactionForce( frc_drive_torque, "Differential Torque", ROT, b_main_shaft, b_pwrtrain, p_main_shaft_cg, b_main_shaft.cm )
    *SolverArray( sa_powertrain, "Powertrain Array", IC )
    *SolverArray( sa_powertrain_type, "Powertrain Type", IC )
    *SolverString( st_engine_map, "Engine Map String" )
    *Output( o_throttle_torque, "Engine torque - F2 | Throttle - F3", EXPR, `VARVAL({sv_torque_output.idstring})`, `VARVAL({sv_throttle_output.idstring})`, `0`, `0`, `0`, `0` )
    *Curve( crv_gear_ratio, "Gear Ratios", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
    *DataSet( ds_powertrain_dat, "Powertrain Data (engine, clutch)", def_ds_powertrain_dat )
    *Point( p_engtrans_cg, "Engine/transmission CG" )
    *Point( p_main_shaft_cg, "Main shaft CG" )
    *PointPair( p_eng_mnt, "Engine mount" )
    *PointPair( p_eng_mnt_ax, "Engine mount align." )
    *Point( p_trans_mnt, "Transmission mount" )
    *Point( p_trans_mnt_ax, "Transmission mount align." )
    *Point( p_rear_crank, "Rear of crank shaft" )
    *Point( p_uj, "Front ujoint (RWD only)" )
    *Point( p_trans_tail, "Tail of transmission" )
    *Marker( mrk_graphic, "Engine/transmission graphics", b_pwrtrain, p_rear_crank )
    *Body( b_pwrtrain, "Engine/Trans", p_engtrans_cg, , , ,  )
    *Body( b_main_shaft, "Main shaft", p_main_shaft_cg, , , ,  )
    *RevJoint( j_main_shaft, "Main shaft to trans.", b_pwrtrain, b_main_shaft, p_rear_crank, POINT, p_trans_tail )
    *DataSet( ds_trans, "Transmission data", dsdef_trans )
    *Form( frm_trans, "Transmission data", frmdef_trans, ds_trans )
    *Graphic( g_eng_trans, "Engine/trans body", FILE, b_pwrtrain, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Toolkit/Powertrain/long_pwr.g"}, {"eng_trans"}, MARKER, mrk_graphic, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0 )
    *if( Op_Compliant.value == "Yes" )
      *BushPair( bsh_eng_mnt, "Engine Mount", b_pwrtrain, b_body, p_eng_mnt )
      *Bush( bsh_trans_mnt, "Transmission Mount", b_pwrtrain, b_body.l, p_trans_mnt )
      *Graphic( g_mount1_eng, "Mount 1 at engine", gdef_bush_cant1, b_pwrtrain
               , p_eng_mnt, p_eng_mnt_ax )
      *Graphic( g_mount1_att, "Mount 1 at att", gdef_bush_cant2, bsh_eng_mnt.b2
               , p_eng_mnt, p_eng_mnt_ax )
      *Graphic( g_trans_eng, "Trans mnt at engine", gdef_bush_cant1_single, b_pwrtrain
               , p_trans_mnt, p_trans_mnt_ax )
      *Graphic( g_trans_att, "Trans mnt at att", gdef_bush_cant2_single, bsh_trans_mnt.b2
               , p_trans_mnt, p_trans_mnt_ax )
    *else()
      *FixedJoint( j_engmount, "Engine Fixed Joint", b_pwrtrain, b_body.l, p_trans_mnt )
    *endif()
    *SetSolverArray( sa_powertrain,              VALUE, 6
, 0, ds_powertrain_dat.max_torque.value, ds_powertrain_dat.min_torque.value, ds_powertrain_dat.throttle_scaling.value, 0, 0 )
    *SetSolverArray( sa_powertrain_type,         VALUE, 1
, 05 )
    *SetReal( ds_powertrain_dat.throttle_scaling,       1.0 )
    *SetReal( ds_powertrain_dat.max_torque,       1000000*1.1 )
    *SetReal( ds_powertrain_dat.min_torque,       -500 )
    *SetReal( ds_powertrain_dat.trans_efficiency,       .99 )
    *SetCurve( crv_gear_ratio,             VALUE, 2
, 0, 1, VALUE, 2
, 0, 1 )
    *SetSolverVariable( sv_torque_output,           USER, `USER(1,{sa_powertrain.idstring},{sys_pwrtrain.sys_tc.sys_tc_fmu.label != "" ? ( sys_pwrtrain.sys_tc.sys_tc_fmu.state == true ? sys_pwrtrain.sys_tc.sys_tc_fmu.sv_fmu_throttle_output.idstring : sv_throttle_output.idstring ) : sv_throttle_output.idstring})`, OFF )
    *SetLocalUserDLLFlag( sv_torque_output,           true )
    *SetLocalUserFunction( sv_torque_output,           "msautoutils", , "VIRTUAL_POWERTRAIN" )
    *SetOrientation( mrk_graphic,                TWOAXES, XZ, POINT, p_trans_tail, VECTOR, Global_Frame.zaxis )
    *SetPoint( p_main_shaft_cg,            (p_rear_crank.x+p_trans_tail.x)/2, (p_rear_crank.y+p_trans_tail.y)/2, (p_rear_crank.z+p_trans_tail.z)/2 )
    *SetPoint( p_engtrans_cg,              1300, 5, 1075 )
    *SetPoint( p_eng_mnt,            LEFT, 1100, -275, 1100 )
    *SetPoint( p_trans_mnt,                2100, 0, 1025 )
    *SetPoint( p_eng_mnt_ax,         LEFT, p_eng_mnt.l.x, p_eng_mnt.l.y + 50, p_eng_mnt.l.z + 100 )
    *SetPoint( p_trans_mnt_ax,             p_trans_mnt.x, p_trans_mnt.y, p_trans_mnt.z + 100 )
    *SetPoint( p_rear_crank,               1400, 15, 1100 )
    *SetPoint( p_trans_tail,               2160, 0, 1080 )
    *SetPoint( p_uj,                       p_trans_tail.x + ds_trans.tail_to_uj.value*(p_trans_tail.x-p_rear_crank.x)/ds_trans.length.value, p_trans_tail.y + ds_trans.tail_to_uj.value*(p_trans_tail.y-p_rear_crank.y)/ds_trans.length.value, p_trans_tail.z + ds_trans.tail_to_uj.value*(p_trans_tail.z-p_rear_crank.z)/ds_trans.length.value )
    *SetReal( ds_trans.length,            sqrt((p_trans_tail.x-p_rear_crank.x)^2+(p_trans_tail.y-p_rear_crank.y)^2+(p_trans_tail.z-p_rear_crank.z)^2) )
    *SetReal( ds_trans.tail_to_uj,        100 )
    *SetBodyInertia( b_pwrtrain,                 200, 5.000e+06, 5.000e+06, 5.000e+06, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_main_shaft,               6, 2.000e+04, 2.000e+04, 4.000e+03, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_main_shaft.cm,            ONEAXIS, Z, POINT, p_trans_tail )
    *if( Op_Compliant.value == "Yes" )
      *SetBush( bsh_eng_mnt,          LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI/100, LIN, 7853.981*180/PI/100, LIN, 1047.197551*180/PI/100, LIN, 78.53981*180/PI/10, LIN, 78.53981*180/PI/10, LIN, 10.47197551*180/PI/10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
      *SetOrientation( bsh_eng_mnt,          LEFT, ONEAXIS, Z, POINT, p_eng_mnt_ax.l )
      *SetBush( bsh_trans_mnt,              LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI/100, LIN, 7853.981*180/PI/100, LIN, 1047.197551*180/PI/100, LIN, 78.53981*180/PI/10, LIN, 78.53981*180/PI/10, LIN, 10.47197551*180/PI/10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
      *SetOrientation( bsh_trans_mnt,              ONEAXIS, Z, POINT, p_trans_mnt_ax )
    *endif()
    *SetForce( frc_drive_torque,           LIN, , LIN, , EXPR, `VARVAL({sv_torque_output.idstring})/({MODEL.sys_r_driveline.c_output_shafts_carrier.ratio}*{MODEL.sys_r_driveline.c_pinion.ratio})` )
  *EndDefine()
  *DefineDataSet( def_ds_powertrain_dat )
    *Real( throttle_scaling, "Throttle Scaling", EDIT )
    *Real( max_torque, "Max Powertrain Torque", EDIT )
    *Real( min_torque, "Min Powertrain Torque", EDIT )
    *Real( trans_efficiency, "Transmission Efficiency", EDIT )
  *EndDefine()
  *DefineDataSet( dsdef_trans )
    *Real( length, "Transmission length (mm)", EDIT )
    *Real( tail_to_uj, "Trans. tail to UJ (mm)", EDIT )
  *EndDefine()
  *DefineForm( frmdef_trans, ds )
    *SetRowsCols( 2, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.tail_to_uj.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.tail_to_uj.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 2, 1, ds.length.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.length.value, "%5.1f", RIGHT, NO_EDIT )
  *EndDefine()
  *DefineGraphic( gdef_bush_cant1, body, point, alignment )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( alignment, "Attachment alignment", PointPair, "Select attachment.", ,  )
    *GraphicPair( g_rub_cent, "Center rubber", CYLINDER, body, point, POINT, alignment, 37.5, 37.5, 10, 0, CAPBEGIN, 3 )
    *GraphicPair( g_rub_end, "End rubber", CYLINDER, body, point, POINT, alignment, 37.5, 20.0, 25, 10, CAPNONE, 3 )
    *GraphicPair( g_mnt_plate, "Mounting plate", CYLINDER, body, point, POINT, alignment, 0.0, 50.0, 1, 35, CAPNONE, 3 )
    *GraphicPair( g_pin, "Pin", CYLINDER, body, point, POINT, alignment, 10.0, 10.0, 10, 35, CAPEND, 3 )
  *EndDefine()
  *DefineGraphic( gdef_bush_cant2, body, point, alignment )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( alignment, "Attachment alignment", PointPair, "Select attachment.", ,  )
    *GraphicPair( g_rub_cent, "Center rubber", CYLINDER, body, point, POINT, alignment, 37.5, 37.5, 10, -10, CAPEND, 3 )
    *GraphicPair( g_rub_end, "End rubber", CYLINDER, body, point, POINT, alignment, 20.0, 37.5, 25, -35, CAPNONE, 3 )
    *GraphicPair( g_mnt_plate, "Mounting plate", CYLINDER, body, point, POINT, alignment, 50.0, 0.0, 1, -36, CAPNONE, 3 )
    *GraphicPair( g_pin, "Pin", CYLINDER, body, point, POINT, alignment, 10.0, 10.0, 10, -45, CAPBEGIN, 3 )
  *EndDefine()
  *DefineGraphic( gdef_bush_cant1_single, body, point, alignment )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( alignment, "Attachment alignment", Point, "Select attachment.", ,  )
    *Graphic( g_rub_cent, "Center rubber", CYLINDER, body, point, POINT, alignment, 37.5, 37.5, 10, 0, CAPBEGIN, 3 )
    *Graphic( g_rub_end, "End rubber", CYLINDER, body, point, POINT, alignment, 37.5, 20.0, 25, 10, CAPNONE, 3 )
    *Graphic( g_mnt_plate, "Mounting plate", CYLINDER, body, point, POINT, alignment, 0.0, 50.0, 1, 35, CAPNONE, 3 )
    *Graphic( g_pin, "Pin", CYLINDER, body, point, POINT, alignment, 10.0, 10.0, 10, 35, CAPEND, 3 )
  *EndDefine()
  *DefineGraphic( gdef_bush_cant2_single, body, point, alignment )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( alignment, "Attachment alignment", Point, "Select attachment.", ,  )
    *Graphic( g_rub_cent, "Center rubber", CYLINDER, body, point, POINT, alignment, 37.5, 37.5, 10, -10, CAPEND, 3 )
    *Graphic( g_rub_end, "End rubber", CYLINDER, body, point, POINT, alignment, 20.0, 37.5, 25, -35, CAPNONE, 3 )
    *Graphic( g_mnt_plate, "Mounting plate", CYLINDER, body, point, POINT, alignment, 50.0, 0.0, 1, -36, CAPNONE, 3 )
    *Graphic( g_pin, "Pin", CYLINDER, body, point, POINT, alignment, 10.0, 10.0, 10, -45, CAPBEGIN, 3 )
  *EndDefine()
  *DefinitionInclude( "hwmv://autoent/definitions_mdl/sysDefTirePair.mdl" )
  *DefineSystem( sysdef_tires, p_f_wc, p_r_wc, p_f_spal
           , p_r_spal, b_f_wheel, b_r_wheel )
    *Attachment( p_f_wc, "Front Wheel Center", PointPair, "Front wheel center point", ,  )
    *Attachment( p_r_wc, "Rear  Wheel Center", PointPair, "Rear  wheel center point", ,  )
    *Attachment( p_f_spal, "Front Spindle align", PointPair, "Front Spindle alignment point", ,  )
    *Attachment( p_r_spal, "Rear  Spindle align", PointPair, "Rear  Spindle alignment point", ,  )
    *Attachment( b_f_wheel, "Front Wheel", BodyPair, "Front Wheel Body", ,  )
    *Attachment( b_r_wheel, "Rear  Wheel", BodyPair, "Rear  Wheel Body", ,  )
    *VectorPair( v_f_sp, "Front Spindle" )
    *VectorPair( v_r_sp, "Rear  Spindle" )
    *System( ts_front, "Tire - Front", def_sys_tirepair, b_f_wheel
             , p_f_wc, m_tire_frc_frnt, m_road_ref_frnt, MODEL.Global_Frame, MODEL.Global_Frame )
    *System( ts_rear, "Tire - Rear", def_sys_tirepair, b_r_wheel
             , p_r_wc, m_tire_frc_rear, m_road_ref_rear, MODEL.Global_Frame, MODEL.Global_Frame )
    *PointPair( p_ground_reference_frnt, "Front Ground RM Marker" )
    *MarkerPair( m_road_ref_frnt, "Road Reference Marker Front", MODEL.B_Ground, p_ground_reference_frnt )
    *MarkerPair( m_tire_frc_frnt, "Front Tire Force Reference", b_f_wheel, p_f_wc )
    *MarkerPair( m_road_ref_rear, "Road Reference Marker Rear", MODEL.B_Ground, p_ground_reference_rear )
    *PointPair( p_ground_reference_rear, "Rear Ground RM Marker" )
    *MarkerPair( m_tire_frc_rear, "Rear Tire Force Reference", b_r_wheel, p_r_wc )
    *SetOrientation( m_road_ref_frnt,          , TWOAXES, ZX, DXDYDZ, 0.0, 0.0, 1.0, DXDYDZ, 1.0, 0.0, 0.0
                                               , TWOAXES, ZX, VECTOR, m_road_ref_frnt.l.zaxis, VECTOR, m_road_ref_frnt.l.xaxis )
    *SetOrientation( m_road_ref_rear,          , TWOAXES, ZX, VECTOR, m_road_ref_frnt.l.zaxis, VECTOR, m_road_ref_frnt.l.xaxis
                                               , TWOAXES, ZX, VECTOR, m_road_ref_frnt.l.zaxis, VECTOR, m_road_ref_frnt.l.xaxis )
    *SetPoint( p_ground_reference_frnt.l,       0, 0, p_f_wc.l.z-(ts_front.sys_tire_left.ds_tire_properties.unloaded_radius.value) )
    *SetPoint( p_ground_reference_frnt.r,       0, 0, p_f_wc.r.z-(ts_front.sys_tire_right.ds_tire_properties.unloaded_radius.value) )
    *SetPoint( p_ground_reference_rear.l,       0, 0, p_r_wc.l.z-(ts_rear.sys_tire_left.ds_tire_properties.unloaded_radius.value) )
    *SetPoint( p_ground_reference_rear.r,       0, 0, p_r_wc.r.z-(ts_rear.sys_tire_right.ds_tire_properties.unloaded_radius.value) )
    *SetVector( v_f_sp.l,                   p_f_wc.l.x-p_f_spal.l.x, p_f_wc.l.y-p_f_spal.l.y, p_f_wc.l.z-p_f_spal.l.z )
    *SetVector( v_f_sp.r,                   p_f_spal.r.x-p_f_wc.r.x, p_f_spal.r.y-p_f_wc.r.y, p_f_spal.r.z-p_f_wc.r.z )
    *SetVector( v_r_sp.l,                   p_r_wc.l.x-p_r_spal.l.x, p_r_wc.l.y-p_r_spal.l.y, p_r_wc.l.z-p_r_spal.l.z )
    *SetVector( v_r_sp.r,                   p_r_spal.r.x-p_r_wc.r.x, p_r_spal.r.y-p_r_wc.r.y, p_r_spal.r.z-p_r_wc.r.z )
    *SetOrientation( m_tire_frc_frnt.l,          TWOAXES, YZ, VECTOR, v_f_sp.l, DXDYDZ, 0, 0.0, 1 )
    *SetOrientation( m_tire_frc_frnt.r,          TWOAXES, YZ, VECTOR, v_f_sp.r, DXDYDZ, 0, 0.0, 1 )
    *SetOrientation( m_tire_frc_rear.l,          TWOAXES, YZ, VECTOR, v_r_sp.l, DXDYDZ, 0, 0.0, 1 )
    *SetOrientation( m_tire_frc_rear.r,          TWOAXES, YZ, VECTOR, v_r_sp.r, DXDYDZ, 0, 0.0, 1 )
    *SetOption( sys_frnt_susp.op_TireGra,       "Off" )
    *SetOption( sys_rear_susp.op_TireGra,       "Off" )
    *SetBodyInertia( sys_frnt_susp.b_wheel, LEFT, 0.5, 1.750e+04, 1.750e+04, 3.000e+04, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( sys_rear_susp.b_wheel, LEFT, 0.5, 1.750e+04, 1.750e+04, 3.000e+04, 0.000e+00, 0.000e+00, 0.000e+00 )
  *EndDefine()
  *DefineSystem( def_disk_brakes, TYPED, Brakes, , arg_j_front_wheel_spindle, arg_j_rear_wheel_spindle )
    *Attachment( arg_j_front_wheel_spindle, "Front Wheel Spindle", JointPair, "Select front wheel spindle joint", ,  )
    *Attachment( arg_j_rear_wheel_spindle, "Rear Wheel Spindle", JointPair, "Select rear wheel spindle joint", ,  )
    *DataSet( ds_brakes, "Brake System Information", def_ds_brakes )
    *SolverVariable( sv_front_brake_pressure, "Front Brake Line Pressure" )
    *SolverVariable( sv_rear_brake_pressure, "Rear Brake Line Pressure" )
    *SolverVariable( sv_forward_brake_bias, "Brake Bias (Frontwards)" )
    *SolverVariable( sv_brake_boost, "Brake Boost Ratio" )
    *SolverVariable( sv_brake_demand, "Driver Brake Demand" )
    *System( sys_front_disk_brake, "Front Brakes", def_sys_disk_brake, ds_brakes.int_sv_br_lin_pr_f_l
             , ds_brakes.int_sv_br_lin_pr_f_r, arg_j_front_wheel_spindle )
    *System( sys_rear_disk_brake, "Rear Brakes", def_sys_disk_brake, ds_brakes.int_sv_br_lin_pr_r_l
             , ds_brakes.int_sv_br_lin_pr_r_r, arg_j_rear_wheel_spindle )
    *SetReal( ds_brakes.real_pedal_ratio,       3.5 )
    *SetReal( ds_brakes.real_front_mc_piston_area,       500 )
    *SetReal( ds_brakes.real_rea_mc_piston_area,       500 )
    *SetReal( ds_brakes.real_max_pedal_force,       500 )
    *SetReal( ds_brakes.real_brake_scaling_factor,       1 )
    *SetReal( ds_brakes.real_brake_boost_ratio,       1 )
    *SetInteger( ds_brakes.int_sv_br_lin_pr_f_l,       sys_abs_esp.sys_four_channel.label != "" ? ( sys_abs_esp.sys_four_channel.state == true ? sys_abs_esp.sys_four_channel.sv_brk_lin_out_pr_f_l.id : sv_front_brake_pressure.id ) : sv_front_brake_pressure.id )
    *SetInteger( ds_brakes.int_sv_br_lin_pr_f_r,       sys_abs_esp.sys_four_channel.label != "" ? ( sys_abs_esp.sys_four_channel.state == true ? sys_abs_esp.sys_four_channel.sv_brk_lin_out_pr_f_r.id : sv_front_brake_pressure.id ) : sv_front_brake_pressure.id )
    *SetInteger( ds_brakes.int_sv_br_lin_pr_r_l,       sys_abs_esp.sys_four_channel.label != "" ? ( sys_abs_esp.sys_four_channel.state == true ? sys_abs_esp.sys_four_channel.sv_brk_lin_out_pr_r_l.id : sv_rear_brake_pressure.id  ) : sv_rear_brake_pressure.id )
    *SetInteger( ds_brakes.int_sv_br_lin_pr_r_r,       sys_abs_esp.sys_four_channel.label != "" ? ( sys_abs_esp.sys_four_channel.state == true ? sys_abs_esp.sys_four_channel.sv_brk_lin_out_pr_r_r.id : sv_rear_brake_pressure.id  ) : sv_rear_brake_pressure.id )
    *SetSolverVariable( sv_forward_brake_bias,       LIN, 0.6, OFF )
    *SetSolverVariable( sv_front_brake_pressure,       EXPR, `VARVAL({sv_brake_demand.idstring})*VARVAL({sv_brake_boost.idstring})*{ds_brakes.real_pedal_ratio.value}*VARVAL({sv_forward_brake_bias.idstring})/{ds_brakes.real_front_mc_piston_area.value}*{ds_brakes.real_max_pedal_force.value}/{ds_brakes.real_brake_scaling_factor.value}`, OFF )
    *SetSolverVariable( sv_rear_brake_pressure,       EXPR, `VARVAL({sv_brake_demand.idstring})*VARVAL({sv_brake_boost.idstring})*{ds_brakes.real_pedal_ratio.value}*(1 - VARVAL({sv_forward_brake_bias.idstring}))/{ds_brakes.real_front_mc_piston_area.value}*{ds_brakes.real_max_pedal_force.value}/{ds_brakes.real_brake_scaling_factor.value}`, OFF )
    *SetSolverVariable( sv_brake_boost,             LIN, ds_brakes.real_brake_boost_ratio.value, OFF )
  *EndDefine()
  *DefineDataSet( def_ds_brakes )
    *Real( real_pedal_ratio, "Pedal Ratio", EDIT )
    *Real( real_front_mc_piston_area, "Front Master Cyl Piston Area", EDIT )
    *Real( real_rea_mc_piston_area, "Rear Master Cyl Piston Area", EDIT )
    *Real( real_max_pedal_force, "Maximum Pedal Force", EDIT )
    *Real( real_brake_scaling_factor, "Brake Demand Scaling Factor", EDIT )
    *Real( real_brake_boost_ratio, "Brake Boost ratio", EDIT )
    *Integer( int_sv_br_lin_pr_f_l, "Sol. Var. ID - Brake line pressure - Front-left", EDIT )
    *Integer( int_sv_br_lin_pr_f_r, "Sol. Var. ID - Brake line pressure - Front-right", EDIT )
    *Integer( int_sv_br_lin_pr_r_l, "Sol. Var. ID - Brake line pressure - Rear-left", EDIT )
    *Integer( int_sv_br_lin_pr_r_r, "Sol. Var. ID - Brake line pressure - Rear-right", EDIT )
  *EndDefine()
  *DefineSystem( def_sys_disk_brake, TYPED, Brake Type, , arg_sv_brake_line_pressure_l_id, arg_sv_brake_line_pressure_r_id, arg_j_wheel_spindle )
    *Attachment( arg_sv_brake_line_pressure_l_id, "Sol. Var. ID of Brake Line Pressure-left", IntegerData, "Select brake line pressure ID data", ,  )
    *Attachment( arg_sv_brake_line_pressure_r_id, "Sol. Var. ID of Brake Line Pressure-right", IntegerData, "Select brake line pressure ID data", ,  )
    *Attachment( arg_j_wheel_spindle, "Wheel Spindle", JointPair, "Select wheel spindle joint", ,  )
    *DataSet( ds_disk_brake, "Disk Brake Info", def_ds_disk_brake )
    *ActionReactionForcePair( frc_brake_torque, "Brake Torque", SC_ROT, arg_j_wheel_spindle.b1, arg_j_wheel_spindle.b2, arg_j_wheel_spindle.i.origin, VECTOR, arg_j_wheel_spindle.i.zaxis )
    *Output( o_brake_torque, {THIS.label + " - Brake Torque"}, EXPR, `{frc_brake_torque.l.t.expr}`, `{frc_brake_torque.r.t.expr}`, `0`, `0`, `0`, `0` )
    *SolverVariable( sv_wheel_w_l, {THIS.label + " - Wheel Omega-left" } )
    *SolverVariable( sv_wheel_w_r, {THIS.label + " - Wheel Omega-right"} )
    *SetSolverVariable( sv_wheel_w_l,               EXPR, `-WZ({arg_j_wheel_spindle.l.i.idstring}, {arg_j_wheel_spindle.l.j.idstring}, {arg_j_wheel_spindle.l.j.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_wheel_w_r,               EXPR, `WZ({arg_j_wheel_spindle.r.i.idstring}, {arg_j_wheel_spindle.r.j.idstring}, {arg_j_wheel_spindle.r.j.idstring})`, OFF, 0.0, false, false )
    *SetForce( frc_brake_torque,         , EXPR, `-STEP5(WZ({arg_j_wheel_spindle.l.i.idstring}, {arg_j_wheel_spindle.l.j.idstring}, {arg_j_wheel_spindle.l.j.idstring}), -{ds_disk_brake.real_stiction_omega.value}, -1, {ds_disk_brake.real_stiction_omega.value}, 1)*VARVAL( {arg_sv_brake_line_pressure_l_id.value} )*{ds_disk_brake.real_left_piston_area.value}*{ds_disk_brake.real_left_pad_friction.value}*{ds_disk_brake.real_left_disk_radius.value}`
                                         , EXPR, `-STEP5(WZ({arg_j_wheel_spindle.r.i.idstring}, {arg_j_wheel_spindle.r.j.idstring}, {arg_j_wheel_spindle.r.j.idstring}), -{ds_disk_brake.real_stiction_omega.value}, -1, {ds_disk_brake.real_stiction_omega.value}, 1)*VARVAL( {arg_sv_brake_line_pressure_r_id.value} )*{ds_disk_brake.real_right_piston_area.value} * {ds_disk_brake.real_right_pad_friction.value}*{ds_disk_brake.real_right_disk_radius.value}` )
  *EndDefine()
  *DefineDataSet( def_ds_disk_brake )
    *Real( real_left_disk_radius, "Left disk Effective Radius", EDIT )
    *Real( real_right_disk_radius, "Right disk Effective Radius", EDIT )
    *Real( real_left_piston_area, "Left Piston Area", EDIT )
    *Real( real_right_piston_area, "Right Piston Area", EDIT )
    *Real( real_left_pad_friction, "Left Pad Coefficient of Friction", EDIT )
    *Real( real_right_pad_friction, "Right Pad Coefficient of Friction", EDIT )
    *Real( real_stiction_omega, "Stiction Omega", EDIT )
  *EndDefine()
  *DefineSystem( sysdef_indep_4wd, b_wheel, p_wc, b_diff_mt
           , ds_wheelalign )
    *Attachment( b_wheel, "Wheel Body", BodyPair, "Wheel body", ,  )
    *Attachment( p_wc, "Wheel Center", PointPair, "Wheel center", ,  )
    *Attachment( b_diff_mt, "Carrier mount body", Body, "Carrier mount body", ,  )
    *Attachment( ds_wheelalign, "Wheel alignment", DataSet, "Wheel alignment dataset", ,  )
    *PointPair( p_halfshaft_cg, "Halfshaft cg" )
    *PointPair( p_outer_cv, "Halfshaft Outer CV Joint" )
    *Point( p_carrier_cg, "Carrier CG" )
    *Point( p_carrier, "Carrier to Case" )
    *PointPair( p_output_shaft_cg, "Output Shaft cg" )
    *PointPair( p_output_diff, "Output Shaft to Carrier" )
    *PointPair( p_inner_cv, "Inner CV Joint" )
    *Point( p_pinion, "Pinion Center" )
    *Point( p_pinion_cg, "Pinion CG" )
    *Point( p_ujoint, "Driveshaft front - ujoint" )
    *BodyPair( b_plunge, "Halfshaft Plunge Body", p_inner_cv, , , ,  )
    *BodyPair( b_halfshaft, "Halfshaft", p_halfshaft_cg, , , ,  )
    *Body( b_carrier, "Carrier", p_carrier_cg, , , ,  )
    *Body( b_pinion, "Pinion", p_pinion_cg, , , ,  )
    *BodyPair( b_output_shaft, "Output Shaft", p_output_shaft_cg, , , ,  )
    *RevJoint( j_carrier, "Carrier to Case", b_diff_mt, b_carrier, p_carrier, POINT, p_inner_cv.l )
    *RevJointPair( j_output_diff, "Output Shaft to Diff", b_output_shaft, b_carrier, p_output_diff, POINT, p_inner_cv )
    *TransJointPair( j_plunge, "Plunge to Output Shaft", b_output_shaft, b_plunge, p_inner_cv, POINT, p_output_diff )
    *CVJointPair( j_cv_inner, "Halfshaft Inner CV", b_plunge, b_halfshaft, p_inner_cv, POINT, p_output_diff, POINT, p_outer_cv )
    *CVJointPair( j_cv_outer, "Halfshaft Outer CV", b_wheel, b_halfshaft, p_outer_cv, POINT, p_wc, POINT, p_inner_cv )
    *RevJoint( j_pinion, "Pinion to diff housing", b_pinion, b_diff_mt, p_pinion, POINT, p_ujoint )
    *Coupler( c_output_shafts_carrier, "Output Shafts to Carrier (spider gears)", 2JOINT, j_output_diff.l, j_output_diff.r, TRANS, TRANS )
    *Coupler( c_pinion, "Pinion to Carrier (final drive ratio)", 2JOINT, j_pinion, j_carrier, TRANS, TRANS )
    *Graphic( g_pinion_shaft, "Pinion shaft", CYLINDER, b_pinion, p_pinion, POINT, p_ujoint, 12.7, g_pinion_shaft.r1, , 0.0, CAPEND, 3 )
    *Graphic( g_pinion_gear, "Pinion gear", CYLINDER, b_pinion, p_pinion, POINT, p_ujoint, 12.7, 20.0, 20, -10, CAPBOTH, 3 )
    *Graphic( g_carrier_tube, "Carrier tube", CYLINDER, b_carrier, p_output_diff.l, POINT, p_output_diff.r, 50.8, g_carrier_tube.r1, , 0.0, CAPNONE, 3 )
    *Graphic( g_carrier_cap_left, "Carrier end cap left", CYLINDER, b_carrier, p_output_diff.l, POINT, p_output_diff.r, 12.7, 50.8, 1, -1, CAPNONE, 3 )
    *Graphic( g_carrier_cap_right, "Carrier end cap right", CYLINDER, b_carrier, p_output_diff.r, POINT, p_output_diff.l, 12.7, 50.8, 1, -1, CAPNONE, 3 )
    *Graphic( g_ring_gr, "Ring gear", CYLINDER, b_carrier, p_carrier, POINT, p_output_diff.l, 76.2, 56.2, 7.3, 30, CAPEND, 3 )
    *Graphic( g_ring_gr2, "Ring gear", CYLINDER, b_carrier, p_carrier, POINT, p_output_diff.l, 70.0, 76.2, 20.0, 10, CAPNONE, 3 )
    *Graphic( g_ring_gr3, "Ring gear", CYLINDER, b_carrier, p_carrier, POINT, p_output_diff.l, 12.7, 70.0, 1, 9, CAPNONE, 3 )
    *GraphicPair( g_out_shaft, "Output shaft", CYLINDER, b_output_shaft, p_output_diff, POINT, p_inner_cv, 12.7, g_out_shaft.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_inner_cv, "Inner CV joint", CYLINDER, j_plunge.b1, p_inner_cv, POINT, p_output_diff, 25.4, 25.4, 75, -37.5, CAPEND, 3 )
    *GraphicPair( g_halfshaft, "Halfshaft", CYLINDER, b_halfshaft, p_inner_cv, POINT, p_outer_cv, 12.7, g_halfshaft.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_outer_cv_hs, "Outer CV on halfshaft", CYLINDER, b_halfshaft, p_outer_cv, POINT, p_inner_cv, 25.4, 12.7, 38.1, 0, CAPNONE, 3 )
    *GraphicPair( g_hs_wheel, "Halfshaft at wheel", CYLINDER, b_wheel, p_outer_cv, POINT, p_wc, 12.7, g_hs_wheel.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_outer_cv_wh, "Outer CV on wheel", CYLINDER, b_wheel, p_outer_cv, POINT, p_wc, 25.4, 12.7, 38.1, 0, CAPNONE, 3 )
    *DataSet( ds_axle, "Axle Data", def_ds_axle )
    *SetPoint( p_halfshaft_cg.l,           (p_inner_cv.l.x+p_outer_cv.l.x)/2, (p_inner_cv.l.y+p_outer_cv.l.y)/2, (p_inner_cv.l.z+p_outer_cv.l.z)/2 )
    *SetPoint( p_halfshaft_cg.r,           (p_inner_cv.r.x+p_outer_cv.r.x)/2, (p_inner_cv.r.y+p_outer_cv.r.y)/2, (p_inner_cv.r.z+p_outer_cv.r.z)/2 )
    *SetPoint( p_output_shaft_cg.l,        (p_output_diff.l.x+p_inner_cv.l.x)/2, (p_output_diff.l.y+p_inner_cv.l.y)/2, (p_output_diff.l.z+p_inner_cv.l.z)/2 )
    *SetPoint( p_output_shaft_cg.r,        (p_output_diff.r.x+p_inner_cv.r.x)/2, (p_output_diff.r.y+p_inner_cv.r.y)/2, (p_output_diff.r.z+p_inner_cv.r.z)/2 )
    *SetPoint( p_outer_cv,           LEFT, p_wc.l.x + ds_axle.cv_joint_offset.value*COS(ds_wheelalign.camb.value*PI/180)*SIN(ds_wheelalign.toe.value*PI/180), p_wc.l.y + ds_axle.cv_joint_offset.value*COS(ds_wheelalign.camb.value*PI/180)*COS(ds_wheelalign.toe.value*PI/180), p_wc.l.z + ds_axle.cv_joint_offset.value*SIN(ds_wheelalign.camb.value*PI/180) )
    *SetPoint( p_carrier_cg,               1000, -143, 1000 )
    *SetPoint( p_carrier,                  1000, -100.5, 1000 )
    *SetPoint( p_output_diff.l,            1000, -215.0, 1000 )
    *SetPoint( p_inner_cv.l,               1000, -268.0, 1000 )
    *SetPoint( p_output_diff.r,            1000, -100.0, 1000 )
    *SetPoint( p_inner_cv.r,               1000, 268.0, 1000 )
    *SetPoint( p_pinion,                   1066.00, -150.0, 1005.80 )
    *SetPoint( p_ujoint,                   1215.40, p_pinion.y, 1018.80 )
    *SetPoint( p_pinion_cg,                (p_pinion.x+p_ujoint.x)/2, (p_pinion.y+p_ujoint.y)/2, (p_pinion.z+p_ujoint.z)/2 )
    *SetBodyInertia( b_plunge,             LEFT, 1.5, 2500, 2500, 280, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_halfshaft,          LEFT, 3.5, 3.7e4, 3.7e4, 700, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_output_shaft,       LEFT, 1.5, 2500, 2500, 280, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_carrier,                  8.5, 13800, 13800, 20700, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_pinion,                   2, 4500, 4500, 700, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_plunge.cm.l,              ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_plunge.cm.r,              ONEAXIS, Z, POINT, p_inner_cv.l )
    *SetOrientation( b_halfshaft.cm.l,           ONEAXIS, Z, POINT, p_inner_cv.l )
    *SetOrientation( b_halfshaft.cm.r,           ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_output_shaft.cm.l,        ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_output_shaft.cm.r,        ONEAXIS, Z, POINT, p_inner_cv.l )
    *SetOrientation( b_carrier.cm,               ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_pinion.cm,                ONEAXIS, Z, POINT, p_ujoint )
    *SetReal( ds_axle.cv_joint_offset,       40 )
    *SetBodyIC( b_plunge.l,                 , , , , , b_wheel.l.wz )
    *SetBodyIC( b_plunge.r,                 , , , , , b_wheel.r.wz )
    *SetBodyIC( b_halfshaft.l,              , , , , , b_wheel.l.wz )
    *SetBodyIC( b_halfshaft.r,              , , , , , b_wheel.r.wz )
    *SetBodyIC( b_output_shaft.l,           , , , , , b_wheel.l.wz )
    *SetBodyIC( b_output_shaft.r,           , , , , , b_wheel.r.wz )
    *SetBodyIC( b_carrier,                  , , , , , b_wheel.l.wz )
    *SetBodyIC( b_pinion,                   , , , , , b_carrier.wz*-c_pinion.ratio )
    *SetBodyICFlag( b_plunge.l,                 false, false, false, false, false, false )
    *SetBodyICFlag( b_plunge.r,                 false, false, false, false, false, false )
    *SetBodyICFlag( b_halfshaft.l,              false, false, false, false, false, false )
    *SetBodyICFlag( b_halfshaft.r,              false, false, false, false, false, false )
    *SetBodyICFlag( b_carrier,                  false, false, false, false, false, false )
    *SetBodyICFlag( b_pinion,                   false, false, false, false, false, false )
    *SetBodyICFlag( b_output_shaft.l,           false, false, false, false, false, false )
    *SetBodyICFlag( b_output_shaft.r,           false, false, false, false, false, false )
    *SetCoupler( c_output_shafts_carrier,       -1 )
    *SetCoupler( c_pinion,                   3.70 )
  *EndDefine()
  *DefineDataSet( def_ds_axle )
    *Real( cv_joint_offset, "CV Joint Offset from Wheel center", EDIT )
  *EndDefine()
  *DefineSystem( sysdef_driveshaft, b_slip, b_fixed, p_slip_uj
           , p_slip_uj_al, p_fix_uj, p_fix_uj_al )
    *Attachment( b_slip, "Attach body (slip end)", Body, "Attaching body at slip end", ,  )
    *Attachment( b_fixed, "Attach body (fixed end)", Body, "Attaching body at fixed end", ,  )
    *Attachment( p_slip_uj, "Ujoint point (slip end)", Point, "Ujoint point at slip end", ,  )
    *Attachment( p_slip_uj_al, "Ujoint align (slip end)", Point, "Ujoint alignment at slip end", ,  )
    *Attachment( p_fix_uj, "Ujoint point (fixed end)", Point, "Ujoint point at fixed end", ,  )
    *Attachment( p_fix_uj_al, "Ujoint align (fixed end)", Point, "Ujoint alignment at fixed end", ,  )
    *Point( p_end_of_yoke, "End of slip yoke" )
    *Point( p_driveshaft_cg, "Driveshaft cg" )
    *Point( p_yoke_cg, "Yoke cg" )
    *Body( b_driveshaft, "Driveshaft", p_driveshaft_cg, , , ,  )
    *Body( b_yoke, "Yoke", p_yoke_cg, , , ,  )
    *Vector( v_shaft, "Driveshaft" )
    *Vector( v_fix, "Fixed end" )
    *Vector( v_slip, "Slip end" )
    *Vector( v_cross1, "Crosspin 1" )
    *Vector( v_cross2, "Crosspin 2" )
    *DataSet( ds_lengths, "Driveshaft lengths", dsdef_lengths )
    *Form( frm_lengths, "Driveshaft lengths", frmdef_lengths, ds_lengths )
    *TransJoint( j_yoke, "Yoke Trans jnt", b_slip, b_yoke, p_end_of_yoke, POINT, p_slip_uj )
    *UJoint( j_fix_uj, "Ujoint fixed end", b_fixed, b_driveshaft, p_fix_uj, SHAFT, POINT, p_fix_uj_al, SHAFT, POINT, p_slip_uj )
    *UJoint( j_slip_uj, "Ujoint slip end", b_driveshaft, b_yoke, p_slip_uj, CROSSPIN, VECTOR, j_fix_uj.j.zaxis, SHAFT, POINT, p_slip_uj_al )
    *Template( tmplt_crosspin_vectors, "Template - Crosspin vectors", USER, def_tmplt_crosspin_vectors, v_shaft
             , v_fix )
    *Graphic( CYLINDER1, "CYLINDER", CYLINDER, b_driveshaft, p_fix_uj, POINT, p_slip_uj, 25.0, CYLINDER1.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER2, "CYLINDER", CYLINDER, b_yoke, p_slip_uj, POINT, p_end_of_yoke, 14.0, CYLINDER2.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER3, "CYLINDER", CYLINDER, b_slip, p_end_of_yoke, POINT, p_slip_uj, 17.0, 17.0, 100, -50, CAPBEGIN, 3 )
    *Graphic( CYLINDER4, "CYLINDER", CYLINDER, b_slip, p_end_of_yoke, POINT, p_slip_uj, 17.0, 14.0, 3.0, 50, CAPBEGIN, 3 )
    *Graphic( CYLINDER5, "CYLINDER", CYLINDER, j_fix_uj.b1, j_fix_uj.i.origin, VECTOR, j_fix_uj.i.zaxis, 12, 12, 70, -35, CAPBOTH, 3 )
    *Graphic( CYLINDER6, "CYLINDER", CYLINDER, j_fix_uj.b2, j_fix_uj.j.origin, VECTOR, j_fix_uj.j.zaxis, 12, 12, 70, -35, CAPBOTH, 3 )
    *Graphic( CYLINDER7, "CYLINDER", CYLINDER, j_slip_uj.b1, j_slip_uj.i.origin, VECTOR, j_slip_uj.i.zaxis, 12, 12, 70, -35, CAPBOTH, 3 )
    *Graphic( CYLINDER8, "CYLINDER", CYLINDER, j_slip_uj.b2, j_slip_uj.j.origin, VECTOR, j_slip_uj.j.zaxis, 12, 12, 70, -35, CAPBOTH, 3 )
    *Graphic( CYLINDER9, "CYLINDER", CYLINDER, b_driveshaft, j_fix_uj.j.origin, VECTOR, j_fix_uj.j.zaxis, 15, 15, 15, 17, CAPEND, 3 )
    *Graphic( CYLINDER10, "CYLINDER", CYLINDER, b_driveshaft, j_fix_uj.j.origin, VECTOR, j_fix_uj.j.zaxis, 15, 15, 15, -32, CAPBEGIN, 3 )
    *Graphic( CYLINDER11, "CYLINDER", CYLINDER, b_fixed, j_fix_uj.i.origin, VECTOR, j_fix_uj.i.zaxis, 15, 15, 15, 17, CAPEND, 3 )
    *Graphic( CYLINDER12, "CYLINDER", CYLINDER, b_fixed, j_fix_uj.i.origin, VECTOR, j_fix_uj.i.zaxis, 15, 15, 15, -32, CAPBEGIN, 3 )
    *Graphic( CYLINDER13, "CYLINDER", CYLINDER, b_driveshaft, j_slip_uj.i.origin, VECTOR, j_slip_uj.i.zaxis, 15, 15, 15, 17, CAPEND, 3 )
    *Graphic( CYLINDER14, "CYLINDER", CYLINDER, b_driveshaft, j_slip_uj.i.origin, VECTOR, j_slip_uj.i.zaxis, 15, 15, 15, -32, CAPBEGIN, 3 )
    *Graphic( CYLINDER15, "CYLINDER", CYLINDER, b_yoke, j_slip_uj.j.origin, VECTOR, j_slip_uj.j.zaxis, 15, 15, 15, 17, CAPEND, 3 )
    *Graphic( CYLINDER16, "CYLINDER", CYLINDER, b_yoke, j_slip_uj.j.origin, VECTOR, j_slip_uj.j.zaxis, 15, 15, 15, -32, CAPBEGIN, 3 )
    *Graphic( CYLINDER17, "CYLINDER", CYLINDER, b_driveshaft, p_fix_uj, POINT, p_slip_uj, 30, 30, 15, 2, CAPBEGIN, 3 )
    *Graphic( CYLINDER18, "CYLINDER", CYLINDER, b_fixed, p_fix_uj, POINT, p_fix_uj_al, 30, 30, 15, 2, CAPBEGIN, 3 )
    *Graphic( CYLINDER19, "CYLINDER", CYLINDER, b_driveshaft, p_fix_uj, POINT, p_slip_uj, 30, 0, 30, 17, CAPNONE, 3 )
    *Graphic( CYLINDER20, "CYLINDER", CYLINDER, b_fixed, p_fix_uj, POINT, p_fix_uj_al, 30, 0, 30, 17, CAPNONE, 3 )
    *Graphic( CYLINDER21, "CYLINDER", CYLINDER, b_driveshaft, p_slip_uj, POINT, p_fix_uj, 30, 30, 15, 2, CAPBEGIN, 3 )
    *Graphic( CYLINDER22, "CYLINDER", CYLINDER, b_yoke, p_slip_uj, POINT, p_slip_uj_al, 30, 30, 15, 2, CAPBEGIN, 3 )
    *Graphic( CYLINDER23, "CYLINDER", CYLINDER, b_driveshaft, p_slip_uj, POINT, p_fix_uj, 30, 0, 30, 17, CAPNONE, 3 )
    *Graphic( CYLINDER24, "CYLINDER", CYLINDER, b_yoke, p_slip_uj, POINT, p_slip_uj_al, 30, 0, 30, 17, CAPNONE, 3 )
    *SetPoint( p_driveshaft_cg,            (p_fix_uj.x+p_slip_uj.x)/2, (p_fix_uj.y+p_slip_uj.y)/2, (p_fix_uj.z+p_slip_uj.z)/2 )
    *SetPoint( p_yoke_cg,                  (p_end_of_yoke.x+p_slip_uj.x)/2, (p_end_of_yoke.y+p_slip_uj.y)/2, (p_end_of_yoke.z+p_slip_uj.z)/2 )
    *SetPoint( p_end_of_yoke,              p_slip_uj.x+(p_slip_uj_al.x-p_slip_uj.x)/ds_lengths.slip_mag.value*ds_lengths.yoke_length.value, p_slip_uj.y+(p_slip_uj_al.y-p_slip_uj.y)/ds_lengths.slip_mag.value*ds_lengths.yoke_length.value, p_slip_uj.z+(p_slip_uj_al.z-p_slip_uj.z)/ds_lengths.slip_mag.value*ds_lengths.yoke_length.value )
    *SetVector( v_shaft,                    p_fix_uj.x-p_slip_uj.x, p_fix_uj.y-p_slip_uj.y, p_fix_uj.z-p_slip_uj.z )
    *SetVector( v_fix,                      p_fix_uj_al.x-p_fix_uj.x, p_fix_uj_al.y-p_fix_uj.y, p_fix_uj_al.z-p_fix_uj.z )
    *SetVector( v_slip,                     p_slip_uj.x-p_slip_uj_al.x, p_slip_uj.y-p_slip_uj_al.y, p_slip_uj.z-p_slip_uj_al.z )
    *SetVector( v_cross1,                   eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[0], eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[1], eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[2] )
    *SetVector( v_cross2,                   eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[3], eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[4], eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[5] )
    *SetBodyInertia( b_driveshaft,               15, 1e6, 1e6, 4500, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_yoke,                     2, 6500, 6500, 500, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_driveshaft.cm,            ONEAXIS, Z, POINT, p_slip_uj )
    *SetOrientation( b_yoke.cm,                  ONEAXIS, Z, POINT, p_end_of_yoke )
    *SetBodyIC( b_driveshaft,               , , , , , b_fixed.wz*cos(ds_lengths.theta1_rad.value) )
    *SetBodyIC( b_yoke,                     , , , , , b_driveshaft.wz*cos(ds_lengths.theta2_rad.value)/(1-sin(ds_lengths.beta2_rad.value)^2*sin(ds_lengths.theta2_rad.value)^2) )
    *SetBodyICFlag( b_driveshaft,               false, false, false, false, false, false )
    *SetBodyICFlag( b_yoke,                     false, false, false, false, false, false )
    *SetReal( ds_lengths.yoke_length,       125 )
    *SetReal( ds_lengths.shaft_length,       sqrt(v_shaft.x^2 + v_shaft.y^2 + v_shaft.z^2) )
    *SetReal( ds_lengths.fix_mag,         sqrt(v_fix.x^2 + v_fix.y^2 + v_fix.z^2) )
    *SetReal( ds_lengths.slip_mag,        sqrt(v_slip.x^2 + v_slip.y^2 + v_slip.z^2) )
    *SetReal( ds_lengths.cross1_mag,       sqrt(v_cross1.x^2 + v_cross1.y^2 + v_cross1.z^2) )
    *SetReal( ds_lengths.cross2_mag,       sqrt(v_cross2.x^2 + v_cross2.y^2 + v_cross2.z^2) )
    *SetReal( ds_lengths.theta1_rad,       acos((v_shaft.x*v_fix.x + v_shaft.y*v_fix.y + v_shaft.z*v_fix.z)/ ds_lengths.fix_mag.value/ds_lengths.shaft_length.value) )
    *SetReal( ds_lengths.theta2_rad,       acos((v_shaft.x*v_slip.x + v_shaft.y*v_slip.y + v_shaft.z*v_slip.z)/ ds_lengths.slip_mag.value/ds_lengths.shaft_length.value) )
    *SetReal( ds_lengths.theta1,          ds_lengths.theta1_rad.value*180/PI )
    *SetReal( ds_lengths.theta2,          ds_lengths.theta2_rad.value*180/PI )
    *SetReal( ds_lengths.beta1_rad,       0.0 )
    *SetReal( ds_lengths.beta2_rad,       PI/2-acos((v_cross1.x*v_cross2.x + v_cross1.y*v_cross2.y + v_cross1.z*v_cross2.z)/ ds_lengths.cross1_mag.value/ds_lengths.cross2_mag.value) )
    *SetReal( ds_lengths.beta1,           ds_lengths.beta1_rad.value*180/PI )
    *SetReal( ds_lengths.beta2,           ds_lengths.beta2_rad.value*180/PI )
  *EndDefine()
  *DefineDataSet( dsdef_lengths )
    *Real( yoke_length, "Yoke length (mm)", EDIT )
    *Real( shaft_length, "Driveshaft length (mm)", EDIT )
    *Real( fix_mag, "Uj to align length (mm)", EDIT )
    *Real( slip_mag, "Uj to align length (mm)", EDIT )
    *Real( cross1_mag, "Crosspin vector length (mm)", EDIT )
    *Real( cross2_mag, "Crosspin vector length (mm)", EDIT )
    *Real( theta1_rad, "Ujoint angle 1 (rad)", EDIT )
    *Real( theta2_rad, "Ujoint angle 2 (rad)", EDIT )
    *Real( theta1, "Ujoint #1 theta (deg)", EDIT )
    *Real( theta2, "Ujoint #2 theta (deg)", EDIT )
    *Real( beta1_rad, "Rotation angle 1 (rad)", EDIT )
    *Real( beta2_rad, "Rotation angle 2 (rad)", EDIT )
    *Real( beta1, "Ujoint #1 beta (deg)", EDIT )
    *Real( beta2, "Ujoint #2 beta (deg)", EDIT )
  *EndDefine()
  *DefineForm( frmdef_lengths, ds )
    *SetRowsCols( 6, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.yoke_length.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.yoke_length.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 2, 1, ds.shaft_length.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.shaft_length.value, "%5.1f", RIGHT, NO_EDIT )
    *SetCell( 3, 1, ds.theta1.label, "", LEFT, NO_EDIT )
    *SetCell( 3, 2, ds.theta1.value, "%5.2f", RIGHT, NO_EDIT )
    *SetCell( 4, 1, ds.theta2.label, "", LEFT, NO_EDIT )
    *SetCell( 4, 2, ds.theta2.value, "%5.2f", RIGHT, NO_EDIT )
    *SetCell( 5, 1, ds.beta1.label, "", LEFT, NO_EDIT )
    *SetCell( 5, 2, ds.beta1.value, "%5.2f", RIGHT, NO_EDIT )
    *SetCell( 6, 1, ds.beta2.label, "", LEFT, NO_EDIT )
    *SetCell( 6, 2, ds.beta2.value, "%5.2f", RIGHT, NO_EDIT )
  *EndDefine()
  *DefineTemplate( def_tmplt_crosspin_vectors, v_Driveshaft_vector, v_Fixed_end )
{
  'Template that returns a non-zero vector, used in computing univ. joint axes
  A=v_Driveshaft_vector.data						    'Assign Drive shaft vector data to A
  B=v_Fixed_end.data								    'Assign Fixed end vector data to B
  v_cross1={A} cross {B}								'A X B
  if (mag(v_cross1) == 0)								'Check mag of A X B							
  C={A[1], A[2], A[0]}
  v_cross1={C} cross {B}
  endif
  v_cross2=(v_cross1) cross {A}
  v_of_v= {v_cross1[0]/mag(v_cross1), v_cross1[1]/mag(v_cross1), v_cross1[2]/mag(v_cross1), v_cross2[0]/mag(v_cross2), v_cross2[1]/mag(v_cross2), v_cross2[2]/mag(v_cross2)}
  {v_of_v}
}
  *EndDefine()
  *DefineSystem( sysdef_r_indep, b_wheel, p_wc, b_diff_mt
           , ds_wheelalign )
    *Attachment( b_wheel, "Wheel Body", BodyPair, "Wheel body", ,  )
    *Attachment( p_wc, "Wheel Center", PointPair, "Wheel center", ,  )
    *Attachment( b_diff_mt, "Diff mount body", Body, "Differential mount body", ,  )
    *Attachment( ds_wheelalign, "Wheel alignment", DataSet, "Wheel alignment dataset", ,  )
    *PointPair( p_halfshaft_cg, "Halfshaft CG" )
    *PointPair( p_outer_cv, "Halfshaft Outer CV Joint" )
    *Point( p_carrier_cg, "Carrier cg" )
    *Point( p_carrier, "Carrier to Case" )
    *PointPair( p_output_shaft_cg, "Output Shaft CG" )
    *PointPair( p_output_shaft, "Output Shaft to Carrier" )
    *PointPair( p_inner_cv, "Inner CV Joint" )
    *Point( p_pinion, "Pinion Center" )
    *Point( p_pinion_cg, "Pinion cg" )
    *Point( p_ujoint, "Driveshaft front ujoint" )
    *BodyPair( b_plunge, "Halfshaft Plunge Body", p_inner_cv, , , ,  )
    *BodyPair( b_halfshaft, "Halfshaft", p_halfshaft_cg, , , ,  )
    *Body( b_carrier, "Carrier", p_carrier_cg, , , ,  )
    *Body( b_pinion, "Pinion", p_pinion_cg, , , ,  )
    *BodyPair( b_output_shaft, "Output Shaft", p_output_shaft_cg, , , ,  )
    *RevJoint( j_carrier, "Carrier to Case", b_diff_mt, b_carrier, p_carrier, POINT, p_inner_cv.l )
    *RevJointPair( j_output_shaft, "Output Shaft to Carrier", b_output_shaft, b_carrier, p_output_shaft, POINT, p_inner_cv )
    *TransJointPair( j_plunge, "Plunge to Output Shaft", b_output_shaft, b_plunge, p_inner_cv, POINT, p_output_shaft )
    *CVJointPair( j_inner_cv, "CV Inner", b_plunge, b_halfshaft, p_inner_cv, POINT, p_output_shaft, POINT, p_outer_cv )
    *CVJointPair( j_outer_cv, "CV Outer", b_wheel, b_halfshaft, p_outer_cv, POINT, p_wc, POINT, p_inner_cv )
    *RevJoint( j_pinion, "Pinion to Case", b_pinion, b_diff_mt, p_pinion, POINT, p_ujoint )
    *Coupler( c_output_shafts_carrier, "Output Shafts to Carrier (spider gears)", 2JOINT, j_output_shaft.l, j_output_shaft.r, TRANS, TRANS )
    *Coupler( c_pinion, "Pinion to Carrier (final drive ratio)", 2JOINT, j_pinion, j_carrier, TRANS, TRANS )
    *Graphic( g_pinion_shaft, "Pinion shaft", CYLINDER, b_pinion, p_pinion, POINT, p_ujoint, 12.7, g_pinion_shaft.r1, , 0.0, CAPEND, 3 )
    *Graphic( g_pinion_gear, "Pinion gear", CYLINDER, b_pinion, p_pinion, POINT, p_ujoint, 12.7, 20.0, 20, -10, CAPBOTH, 3 )
    *Graphic( g_carrier_tube, "Carrier tube", CYLINDER, b_carrier, p_output_shaft.l, POINT, p_output_shaft.r, 50.8, g_carrier_tube.r1, , 0.0, CAPNONE, 3 )
    *Graphic( g_carrier_cap_left, "Carrier end cap left", CYLINDER, b_carrier, p_output_shaft.l, POINT, p_output_shaft.r, 12.7, 50.8, 1, -1, CAPNONE, 3 )
    *Graphic( g_carrier_cap_right, "Carrier end cap right", CYLINDER, b_carrier, p_output_shaft.r, POINT, p_output_shaft.l, 12.7, 50.8, 1, -1, CAPNONE, 3 )
    *Graphic( g_ring_gr, "Ring gear", CYLINDER, b_carrier, p_carrier, POINT, p_output_shaft.r, 76.2, 56.2, 7.3, 30, CAPEND, 3 )
    *Graphic( g_ring_gr2, "Ring gear", CYLINDER, b_carrier, p_carrier, POINT, p_output_shaft.r, 70.0, 76.2, 20.0, 10, CAPNONE, 3 )
    *Graphic( g_ring_gr3, "Ring gear", CYLINDER, b_carrier, p_carrier, POINT, p_output_shaft.r, 12.7, 70.0, 1, 9, CAPNONE, 3 )
    *GraphicPair( g_out_shaft, "Output shaft", CYLINDER, b_output_shaft, p_output_shaft, POINT, p_inner_cv, 12.7, g_out_shaft.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_inner_cv, "Inner CV joint", CYLINDER, j_plunge.b1, p_inner_cv, POINT, p_output_shaft, 25.4, 25.4, 75, -37.5, CAPEND, 3 )
    *GraphicPair( g_halfshaft, "Halfshaft", CYLINDER, b_halfshaft, p_inner_cv, POINT, p_outer_cv, 12.7, g_halfshaft.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_outer_cv_hs, "Outer CV on halfshaft", CYLINDER, b_halfshaft, p_outer_cv, POINT, p_inner_cv, 25.4, 12.7, 38.1, 0, CAPNONE, 3 )
    *GraphicPair( g_hs_wheel, "Halfshaft at wheel", CYLINDER, b_wheel, p_outer_cv, POINT, p_wc, 12.7, g_hs_wheel.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_outer_cv_wh, "Outer CV on wheel", CYLINDER, b_wheel, p_outer_cv, POINT, p_wc, 25.4, 12.7, 38.1, 0, CAPNONE, 3 )
    *DataSet( ds_axle_r, "Axle Data", def_ds_axle_rear )
    *SetPoint( p_halfshaft_cg.l,           (p_inner_cv.l.x+p_outer_cv.l.x)/2, (p_inner_cv.l.y+p_outer_cv.l.y)/2, (p_inner_cv.l.z+p_outer_cv.l.z)/2 )
    *SetPoint( p_halfshaft_cg.r,           (p_inner_cv.r.x+p_outer_cv.r.x)/2, (p_inner_cv.r.y+p_outer_cv.r.y)/2, (p_inner_cv.r.z+p_outer_cv.r.z)/2 )
    *SetPoint( p_output_shaft_cg.l,        (p_output_shaft.l.x+p_inner_cv.l.x)/2, (p_output_shaft.l.y+p_inner_cv.l.y)/2, (p_output_shaft.l.z+p_inner_cv.l.z)/2 )
    *SetPoint( p_output_shaft_cg.r,        (p_output_shaft.r.x+p_inner_cv.r.x)/2, (p_output_shaft.r.y+p_inner_cv.r.y)/2, (p_output_shaft.r.z+p_inner_cv.r.z)/2 )
    *SetPoint( p_outer_cv,           LEFT, p_wc.l.x + ds_axle_r.cv_joint_offset.value*COS(ds_wheelalign.camb.value*PI/180)*SIN(ds_wheelalign.toe.value*PI/180), p_wc.l.y + ds_axle_r.cv_joint_offset.value*COS(ds_wheelalign.camb.value*PI/180)*COS(ds_wheelalign.toe.value*PI/180), p_wc.l.z + ds_axle_r.cv_joint_offset.value*SIN(ds_wheelalign.camb.value*PI/180) )
    *SetPoint( p_carrier_cg,               p_wc.l.x, 7.00, p_wc.l.z )
    *SetPoint( p_carrier,                  p_wc.l.x, -49.50, p_wc.l.z )
    *SetPoint( p_output_shaft.l,           p_wc.l.x, -50.00, p_wc.l.z )
    *SetPoint( p_inner_cv.l,               p_wc.l.x, -268.0, p_wc.l.z )
    *SetPoint( p_output_shaft.r,           p_wc.l.x, 65.00, p_wc.l.z )
    *SetPoint( p_inner_cv.r,               p_wc.l.x, 268.0, p_wc.l.z )
    *SetPoint( p_pinion,                   p_wc.l.x-66.00, 0.00, p_wc.l.z+5.80 )
    *SetPoint( p_ujoint,                   p_wc.l.x-215.40, p_pinion.y, p_wc.l.z+18.80 )
    *SetPoint( p_pinion_cg,                (p_pinion.x+p_ujoint.x)/2, (p_pinion.y+p_ujoint.y)/2, (p_pinion.z+p_ujoint.z)/2 )
    *SetBodyInertia( b_plunge,             LEFT, 1.5, 2500, 2500, 280, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_halfshaft,          LEFT, 3.5, 3.7e4, 3.7e4, 700, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_output_shaft,       LEFT, 1.5, 2500, 2500, 280, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_carrier,                  8.5, 13800, 13800, 20700, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_pinion,                   2, 4500, 4500, 700, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_plunge.cm.l,              ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_plunge.cm.r,              ONEAXIS, Z, POINT, p_inner_cv.l )
    *SetOrientation( b_halfshaft.cm.l,           ONEAXIS, Z, POINT, p_inner_cv.l )
    *SetOrientation( b_halfshaft.cm.r,           ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_output_shaft.cm.l,        ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_output_shaft.cm.r,        ONEAXIS, Z, POINT, p_inner_cv.l )
    *SetOrientation( b_carrier.cm,               ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_pinion.cm,                ONEAXIS, Z, POINT, p_ujoint )
    *SetReal( ds_axle_r.cv_joint_offset,       40 )
    *SetBodyIC( b_plunge.l,                 , , , , , b_wheel.l.wz )
    *SetBodyIC( b_plunge.r,                 , , , , , b_wheel.r.wz )
    *SetBodyIC( b_halfshaft.l,              , , , , , b_wheel.l.wz )
    *SetBodyIC( b_halfshaft.r,              , , , , , b_wheel.r.wz )
    *SetBodyIC( b_output_shaft.l,           , , , , , b_wheel.l.wz )
    *SetBodyIC( b_output_shaft.r,           , , , , , b_wheel.r.wz )
    *SetBodyIC( b_carrier,                  , , , , , b_wheel.l.wz )
    *SetBodyIC( b_pinion,                   , , , , , b_carrier.wz*-c_pinion.ratio )
    *SetBodyICFlag( b_plunge.l,                 false, false, false, false, false, false )
    *SetBodyICFlag( b_plunge.r,                 false, false, false, false, false, false )
    *SetBodyICFlag( b_halfshaft.l,              false, false, false, false, false, false )
    *SetBodyICFlag( b_halfshaft.r,              false, false, false, false, false, false )
    *SetBodyICFlag( b_carrier,                  false, false, false, false, false, false )
    *SetBodyICFlag( b_output_shaft.l,           false, false, false, false, false, false )
    *SetBodyICFlag( b_output_shaft.r,           false, false, false, false, false, false )
    *SetBodyICFlag( b_pinion,                   false, false, false, false, false, false )
    *SetCoupler( c_output_shafts_carrier,       -1 )
    *SetCoupler( c_pinion,                   -3.70 )
  *EndDefine()
  *DefineDataSet( def_ds_axle_rear )
    *Real( cv_joint_offset, "CV Joint Offset from Wheel center", EDIT )
  *EndDefine()
  *DefineSystem( sysdef_r_driveshaft, b_slip, b_fixed, p_slip_uj
           , p_slip_uj_al, p_fix_uj, p_fix_uj_al )
    *Attachment( b_slip, "Attach body (slip end)", Body, "Attaching body at slip end", ,  )
    *Attachment( b_fixed, "Attach body (fixed end)", Body, "Attaching body at fixed end", ,  )
    *Attachment( p_slip_uj, "Ujoint point (slip end)", Point, "Ujoint point at slip end", ,  )
    *Attachment( p_slip_uj_al, "Ujoint align (slip end)", Point, "Ujoint alignment at slip end", ,  )
    *Attachment( p_fix_uj, "Ujoint point (fixed end)", Point, "Ujoint point at fixed end", ,  )
    *Attachment( p_fix_uj_al, "Ujoint align (fixed end)", Point, "Ujoint alignment at fixed end", ,  )
    *Point( p_end_of_yoke, "End of slip yoke" )
    *Point( p_driveshaft_cg, "Driveshaft cg" )
    *Point( p_yoke_cg, "Yoke cg" )
    *Body( b_driveshaft, "Driveshaft", p_driveshaft_cg, , , ,  )
    *Body( b_yoke, "Yoke", p_yoke_cg, , , ,  )
    *Vector( v_shaft, "Driveshaft" )
    *Vector( v_fix, "Fixed end" )
    *Vector( v_slip, "Slip end" )
    *Vector( v_cross1, "Crosspin 1" )
    *Vector( v_cross2, "Crosspin 2" )
    *DataSet( ds_lengths, "Driveshaft lengths", dsdef_r_lengths )
    *Form( frm_lengths, "Driveshaft lengths", frmdef_r_lengths, ds_lengths )
    *TransJoint( j_yoke, "Yoke Trans jnt", b_slip, b_yoke, p_end_of_yoke, POINT, p_slip_uj )
    *UJoint( j_fix_uj, "Ujoint fixed end", b_fixed, b_driveshaft, p_fix_uj, SHAFT, POINT, p_fix_uj_al, SHAFT, POINT, p_slip_uj )
    *UJoint( j_slip_uj, "Ujoint slip end", b_driveshaft, b_yoke, p_slip_uj, CROSSPIN, VECTOR, j_fix_uj.j.zaxis, SHAFT, POINT, p_slip_uj_al )
    *Template( tmplt_crosspin_vectors, "Template - Crosspin vectors", USER, def_tmplt_crosspin_vectors, v_shaft
             , v_fix )
    *Graphic( CYLINDER1, "CYLINDER", CYLINDER, b_driveshaft, p_fix_uj, POINT, p_slip_uj, 25.0, CYLINDER1.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER2, "CYLINDER", CYLINDER, b_yoke, p_slip_uj, POINT, p_end_of_yoke, 14.0, CYLINDER2.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER3, "CYLINDER", CYLINDER, b_slip, p_end_of_yoke, POINT, p_slip_uj, 17.0, 17.0, 100, -50, CAPBEGIN, 3 )
    *Graphic( CYLINDER4, "CYLINDER", CYLINDER, b_slip, p_end_of_yoke, POINT, p_slip_uj, 17.0, 14.0, 3.0, 50, CAPBEGIN, 3 )
    *Graphic( CYLINDER5, "CYLINDER", CYLINDER, j_fix_uj.b1, j_fix_uj.i.origin, VECTOR, j_fix_uj.i.zaxis, 12, 12, 70, -35, CAPBOTH, 3 )
    *Graphic( CYLINDER6, "CYLINDER", CYLINDER, j_fix_uj.b2, j_fix_uj.j.origin, VECTOR, j_fix_uj.j.zaxis, 12, 12, 70, -35, CAPBOTH, 3 )
    *Graphic( CYLINDER7, "CYLINDER", CYLINDER, j_slip_uj.b1, j_slip_uj.i.origin, VECTOR, j_slip_uj.i.zaxis, 12, 12, 70, -35, CAPBOTH, 3 )
    *Graphic( CYLINDER8, "CYLINDER", CYLINDER, j_slip_uj.b2, j_slip_uj.j.origin, VECTOR, j_slip_uj.j.zaxis, 12, 12, 70, -35, CAPBOTH, 3 )
    *Graphic( CYLINDER9, "CYLINDER", CYLINDER, b_driveshaft, j_fix_uj.j.origin, VECTOR, j_fix_uj.j.zaxis, 15, 15, 15, 17, CAPEND, 3 )
    *Graphic( CYLINDER10, "CYLINDER", CYLINDER, b_driveshaft, j_fix_uj.j.origin, VECTOR, j_fix_uj.j.zaxis, 15, 15, 15, -32, CAPBEGIN, 3 )
    *Graphic( CYLINDER11, "CYLINDER", CYLINDER, b_fixed, j_fix_uj.i.origin, VECTOR, j_fix_uj.i.zaxis, 15, 15, 15, 17, CAPEND, 3 )
    *Graphic( CYLINDER12, "CYLINDER", CYLINDER, b_fixed, j_fix_uj.i.origin, VECTOR, j_fix_uj.i.zaxis, 15, 15, 15, -32, CAPBEGIN, 3 )
    *Graphic( CYLINDER13, "CYLINDER", CYLINDER, b_driveshaft, j_slip_uj.i.origin, VECTOR, j_slip_uj.i.zaxis, 15, 15, 15, 17, CAPEND, 3 )
    *Graphic( CYLINDER14, "CYLINDER", CYLINDER, b_driveshaft, j_slip_uj.i.origin, VECTOR, j_slip_uj.i.zaxis, 15, 15, 15, -32, CAPBEGIN, 3 )
    *Graphic( CYLINDER15, "CYLINDER", CYLINDER, b_yoke, j_slip_uj.j.origin, VECTOR, j_slip_uj.j.zaxis, 15, 15, 15, 17, CAPEND, 3 )
    *Graphic( CYLINDER16, "CYLINDER", CYLINDER, b_yoke, j_slip_uj.j.origin, VECTOR, j_slip_uj.j.zaxis, 15, 15, 15, -32, CAPBEGIN, 3 )
    *Graphic( CYLINDER17, "CYLINDER", CYLINDER, b_driveshaft, p_fix_uj, POINT, p_slip_uj, 30, 30, 15, 2, CAPBEGIN, 3 )
    *Graphic( CYLINDER18, "CYLINDER", CYLINDER, b_fixed, p_fix_uj, POINT, p_fix_uj_al, 30, 30, 15, 2, CAPBEGIN, 3 )
    *Graphic( CYLINDER19, "CYLINDER", CYLINDER, b_driveshaft, p_fix_uj, POINT, p_slip_uj, 30, 0, 30, 17, CAPNONE, 3 )
    *Graphic( CYLINDER20, "CYLINDER", CYLINDER, b_fixed, p_fix_uj, POINT, p_fix_uj_al, 30, 0, 30, 17, CAPNONE, 3 )
    *Graphic( CYLINDER21, "CYLINDER", CYLINDER, b_driveshaft, p_slip_uj, POINT, p_fix_uj, 30, 30, 15, 2, CAPBEGIN, 3 )
    *Graphic( CYLINDER22, "CYLINDER", CYLINDER, b_yoke, p_slip_uj, POINT, p_slip_uj_al, 30, 30, 15, 2, CAPBEGIN, 3 )
    *Graphic( CYLINDER23, "CYLINDER", CYLINDER, b_driveshaft, p_slip_uj, POINT, p_fix_uj, 30, 0, 30, 17, CAPNONE, 3 )
    *Graphic( CYLINDER24, "CYLINDER", CYLINDER, b_yoke, p_slip_uj, POINT, p_slip_uj_al, 30, 0, 30, 17, CAPNONE, 3 )
    *SetPoint( p_driveshaft_cg,            (p_fix_uj.x+p_slip_uj.x)/2, (p_fix_uj.y+p_slip_uj.y)/2, (p_fix_uj.z+p_slip_uj.z)/2 )
    *SetPoint( p_yoke_cg,                  (p_end_of_yoke.x+p_slip_uj.x)/2, (p_end_of_yoke.y+p_slip_uj.y)/2, (p_end_of_yoke.z+p_slip_uj.z)/2 )
    *SetPoint( p_end_of_yoke,              p_slip_uj.x+(p_slip_uj_al.x-p_slip_uj.x)/ds_lengths.slip_mag.value*ds_lengths.yoke_length.value, p_slip_uj.y+(p_slip_uj_al.y-p_slip_uj.y)/ds_lengths.slip_mag.value*ds_lengths.yoke_length.value, p_slip_uj.z+(p_slip_uj_al.z-p_slip_uj.z)/ds_lengths.slip_mag.value*ds_lengths.yoke_length.value )
    *SetVector( v_shaft,                    p_fix_uj.x-p_slip_uj.x, p_fix_uj.y-p_slip_uj.y, p_fix_uj.z-p_slip_uj.z )
    *SetVector( v_fix,                      p_fix_uj_al.x-p_fix_uj.x, p_fix_uj_al.y-p_fix_uj.y, p_fix_uj_al.z-p_fix_uj.z )
    *SetVector( v_slip,                     p_slip_uj.x-p_slip_uj_al.x, p_slip_uj.y-p_slip_uj_al.y, p_slip_uj.z-p_slip_uj_al.z )
    *SetVector( v_cross1,                   eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[0], eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[1], eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[2] )
    *SetVector( v_cross2,                   eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[3], eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[4], eval({"{"}+tmplt_crosspin_vectors.text+{"}"})[5] )
    *SetBodyInertia( b_driveshaft,               15, 1e6, 1e6, 4500, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_yoke,                     2, 6500, 6500, 500, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_driveshaft.cm,            ONEAXIS, Z, POINT, p_slip_uj )
    *SetOrientation( b_yoke.cm,                  ONEAXIS, Z, POINT, p_end_of_yoke )
    *SetBodyIC( b_driveshaft,               , , , , , b_fixed.wz*cos(ds_lengths.theta1_rad.value) )
    *SetBodyIC( b_yoke,                     , , , , , b_driveshaft.wz*cos(ds_lengths.theta2_rad.value)/(1-sin(ds_lengths.beta2_rad.value)^2*sin(ds_lengths.theta2_rad.value)^2) )
    *SetBodyICFlag( b_driveshaft,               false, false, false, false, false, false )
    *SetBodyICFlag( b_yoke,                     false, false, false, false, false, false )
    *SetReal( ds_lengths.yoke_length,       125 )
    *SetReal( ds_lengths.shaft_length,       sqrt(v_shaft.x^2 + v_shaft.y^2 + v_shaft.z^2) )
    *SetReal( ds_lengths.fix_mag,         sqrt(v_fix.x^2 + v_fix.y^2 + v_fix.z^2) )
    *SetReal( ds_lengths.slip_mag,        sqrt(v_slip.x^2 + v_slip.y^2 + v_slip.z^2) )
    *SetReal( ds_lengths.cross1_mag,       sqrt(v_cross1.x^2 + v_cross1.y^2 + v_cross1.z^2) )
    *SetReal( ds_lengths.cross2_mag,       sqrt(v_cross2.x^2 + v_cross2.y^2 + v_cross2.z^2) )
    *SetReal( ds_lengths.theta1_rad,       acos((v_shaft.x*v_fix.x + v_shaft.y*v_fix.y + v_shaft.z*v_fix.z)/ ds_lengths.fix_mag.value/ds_lengths.shaft_length.value) )
    *SetReal( ds_lengths.theta2_rad,       acos((v_shaft.x*v_slip.x + v_shaft.y*v_slip.y + v_shaft.z*v_slip.z)/ ds_lengths.slip_mag.value/ds_lengths.shaft_length.value) )
    *SetReal( ds_lengths.theta1,          ds_lengths.theta1_rad.value*180/PI )
    *SetReal( ds_lengths.theta2,          ds_lengths.theta2_rad.value*180/PI )
    *SetReal( ds_lengths.beta1_rad,       0.0 )
    *SetReal( ds_lengths.beta2_rad,       PI/2-acos((v_cross1.x*v_cross2.x + v_cross1.y*v_cross2.y + v_cross1.z*v_cross2.z)/ ds_lengths.cross1_mag.value/ds_lengths.cross2_mag.value) )
    *SetReal( ds_lengths.beta1,           ds_lengths.beta1_rad.value*180/PI )
    *SetReal( ds_lengths.beta2,           ds_lengths.beta2_rad.value*180/PI )
  *EndDefine()
  *DefineDataSet( dsdef_r_lengths )
    *Real( yoke_length, "Yoke length (mm)", EDIT )
    *Real( shaft_length, "Driveshaft length (mm)", EDIT )
    *Real( fix_mag, "Uj to align length (mm)", EDIT )
    *Real( slip_mag, "Uj to align length (mm)", EDIT )
    *Real( cross1_mag, "Crosspin vector length (mm)", EDIT )
    *Real( cross2_mag, "Crosspin vector length (mm)", EDIT )
    *Real( theta1_rad, "Ujoint angle 1 (rad)", EDIT )
    *Real( theta2_rad, "Ujoint angle 2 (rad)", EDIT )
    *Real( theta1, "Ujoint #1 theta (deg)", EDIT )
    *Real( theta2, "Ujoint #2 theta (deg)", EDIT )
    *Real( beta1_rad, "Rotation angle 1 (rad)", EDIT )
    *Real( beta2_rad, "Rotation angle 2 (rad)", EDIT )
    *Real( beta1, "Ujoint #1 beta (deg)", EDIT )
    *Real( beta2, "Ujoint #2 beta (deg)", EDIT )
  *EndDefine()
  *DefineForm( frmdef_r_lengths, ds )
    *SetRowsCols( 6, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.yoke_length.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.yoke_length.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 2, 1, ds.shaft_length.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.shaft_length.value, "%5.1f", RIGHT, NO_EDIT )
    *SetCell( 3, 1, ds.theta1.label, "", LEFT, NO_EDIT )
    *SetCell( 3, 2, ds.theta1.value, "%5.2f", RIGHT, NO_EDIT )
    *SetCell( 4, 1, ds.theta2.label, "", LEFT, NO_EDIT )
    *SetCell( 4, 2, ds.theta2.value, "%5.2f", RIGHT, NO_EDIT )
    *SetCell( 5, 1, ds.beta1.label, "", LEFT, NO_EDIT )
    *SetCell( 5, 2, ds.beta1.value, "%5.2f", RIGHT, NO_EDIT )
    *SetCell( 6, 1, ds.beta2.label, "", LEFT, NO_EDIT )
    *SetCell( 6, 2, ds.beta2.value, "%5.2f", RIGHT, NO_EDIT )
  *EndDefine()
  *DefineSystem( sysdef_transfer_case, b_attach, b_frnt_driveshaft, b_rear_driveshaft
           , p_trans_tail, j_rear_drive )
    *Attachment( b_attach, "Transfer case attach", Body, "Transfer case attaching body", ,  )
    *Attachment( b_frnt_driveshaft, "Front driveshaft", Body, "Front driveshaft body for omegas", ,  )
    *Attachment( b_rear_driveshaft, "Rear driveshaft", Body, "Rear driveshaft body for omegas", ,  )
    *Attachment( p_trans_tail, "Transmission tail", Point, "Tail of transmission", ,  )
    *Attachment( j_rear_drive, "Rear drive joint", Joint, "Rear drive joint", ,  )
    *Point( p_frnt_drive, "Front drive gear" )
    *Point( p_rear_drive, "Rear drive gear" )
    *Point( p_frnt_uj, "Front driveshaft rear uj" )
    *Point( p_rear_uj, "Rear driveshaft front uj" )
    *Body( b_frnt_drive, "Front drive gear", p_frnt_drive, , , ,  )
    *RevJoint( j_frnt_drive, "Front drive gear", b_frnt_drive, b_attach, p_frnt_drive, POINT, p_frnt_uj )
    *DataSet( ds_tc_data, "Transfer case data", dsdef_tc_data )
    *Form( frm_tc_data, "Transfer case data", frmdef_tc_data, ds_tc_data )
    *ActionOnlyForce( frc_frnt_coup, "Frnt viscous coupling force", ROT, j_frnt_drive.b1, j_frnt_drive.i.origin, j_frnt_drive.i )
    *ActionOnlyForce( frc_rear_coup, "Rear viscous coupling force", ROT, j_rear_drive.b2, j_rear_drive.j.origin, j_frnt_drive.i )
    *Output( gear_vels, "Gear velocities (deg/sec)", EXPR, `WZ({j_frnt_drive.i.idstring},{j_frnt_drive.j.idstring},{j_frnt_drive.j.idstring})*RTOD`, `WZ({j_rear_drive.i.idstring},{j_rear_drive.j.idstring},{j_rear_drive.j.idstring})*RTOD`, `(WZ({j_frnt_drive.i.idstring},{j_frnt_drive.j.idstring},{j_frnt_drive.j.idstring}){SolverCR}-WZ({j_rear_drive.i.idstring},{j_rear_drive.j.idstring},{j_rear_drive.j.idstring}))*RTOD`, 0, 0, 0 )
    *SetPoint( p_frnt_uj,                  2100, -150, 1050 )
    *SetPoint( p_rear_uj,                  p_trans_tail.x + ds_tc_data.tail_to_uj.value*j_rear_drive.i.zaxis.x/ds_tc_data.da_mag.value, p_trans_tail.y + ds_tc_data.tail_to_uj.value*j_rear_drive.i.zaxis.y/ds_tc_data.da_mag.value, p_trans_tail.z + ds_tc_data.tail_to_uj.value*j_rear_drive.i.zaxis.z/ds_tc_data.da_mag.value )
    *SetPoint( p_frnt_drive,               p_frnt_uj.x + ds_tc_data.f_drive_to_uj.value*j_rear_drive.i.zaxis.x/ds_tc_data.da_mag.value, p_frnt_uj.y + ds_tc_data.f_drive_to_uj.value*j_rear_drive.i.zaxis.y/ds_tc_data.da_mag.value, p_frnt_uj.z + ds_tc_data.f_drive_to_uj.value*j_rear_drive.i.zaxis.z/ds_tc_data.da_mag.value )
    *SetPoint( p_rear_drive,               p_rear_uj.x - ds_tc_data.r_drive_to_uj.value*j_rear_drive.i.zaxis.x/ds_tc_data.da_mag.value, p_rear_uj.y - ds_tc_data.r_drive_to_uj.value*j_rear_drive.i.zaxis.y/ds_tc_data.da_mag.value, p_rear_uj.z - ds_tc_data.r_drive_to_uj.value*j_rear_drive.i.zaxis.z/ds_tc_data.da_mag.value )
    *SetBodyInertia( b_frnt_drive,               6, 20000, 20000, 4000, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_frnt_drive.cm,            ONEAXIS, Z, POINT, p_frnt_uj )
    *SetBodyIC( b_frnt_drive,               , , , , , -b_frnt_driveshaft.wz )
    *SetBodyICFlag( b_frnt_drive,               false, false, false, false, false, false )
    *SetForce( frc_frnt_coup,              LIN, 0, LIN, 0, EXPR, `-{ds_tc_data.damp_rate.value}*(WZ({j_frnt_drive.i.idstring},{j_frnt_drive.j.idstring},{j_frnt_drive.j.idstring}){SolverCR}-WZ({j_rear_drive.i.idstring},{j_rear_drive.j.idstring},{j_rear_drive.j.idstring}))` )
    *SetForce( frc_rear_coup,              LIN, 0, LIN, 0, EXPR, `{ds_tc_data.damp_rate.value}*(WZ({j_frnt_drive.i.idstring},{j_frnt_drive.j.idstring},{j_frnt_drive.j.idstring}){SolverCR}-WZ({j_rear_drive.i.idstring},{j_rear_drive.j.idstring},{j_rear_drive.j.idstring}))` )
    *SetReal( ds_tc_data.damp_rate,       10000 )
    *SetReal( ds_tc_data.tail_to_uj,       200 )
    *SetReal( ds_tc_data.r_drive_to_uj,       100 )
    *SetReal( ds_tc_data.f_drive_to_uj,       100 )
    *SetReal( ds_tc_data.da_mag,          sqrt(j_rear_drive.i.zaxis.x^2+j_rear_drive.i.zaxis.y^2+j_rear_drive.i.zaxis.z^2) )
  *EndDefine()
  *DefineDataSet( dsdef_tc_data )
    *Real( tail_to_uj, "Trans. tail to UJ (mm)", EDIT )
    *Real( r_drive_to_uj, "Rear drive gear to UJ (mm)", EDIT )
    *Real( f_drive_to_uj, "Front drive gear to UJ (mm)", EDIT )
    *Real( da_mag, "Drive axis vector mag. (mm)", EDIT )
    *Real( damp_rate, "Viscous coupler rate (N-mm-sec/rad)", EDIT )
  *EndDefine()
  *DefineForm( frmdef_tc_data, ds )
    *SetRowsCols( 4, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.damp_rate.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.damp_rate.value, "%8.1f", RIGHT, EDIT )
    *SetCell( 2, 1, ds.tail_to_uj.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.tail_to_uj.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 3, 1, ds.r_drive_to_uj.label, "", LEFT, NO_EDIT )
    *SetCell( 3, 2, ds.r_drive_to_uj.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 4, 1, ds.f_drive_to_uj.label, "", LEFT, NO_EDIT )
    *SetCell( 4, 2, ds.f_drive_to_uj.value, "%5.1f", RIGHT, EDIT )
  *EndDefine()

  *BeginContext( sys_tires )

    *BeginContext( ts_front )

      *BeginContext( sys_tire_left )
        *SetFileName( ds_tire_properties.r_propertyFile,       "C:/Program Files/Altair/2022/hwdesktop/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_FlatRoad.rdf" )

        *BeginContext( sys_varsub )
          *SetSolverVariable( sv_long_slip,               EXPR, , OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_long_slip,               true )
          *SetLocalUserFunction( sv_long_slip,               "mbdtire" )
          *SetSolverVariable( sv_long_slip,               USER, `USER(167, {arg_gforce.idstring}, 1)`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_slip_angle,              true )
          *SetLocalUserFunction( sv_slip_angle,              "mbdtire" )
          *SetSolverVariable( sv_slip_angle,              USER, `USER(167, {arg_gforce.idstring}, 2 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_camber_angle,            true )
          *SetLocalUserFunction( sv_camber_angle,            "mbdtire" )
          *SetSolverVariable( sv_camber_angle,            USER, `USER(167, {arg_gforce.idstring}, 3 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_x,              true )
          *SetSolverVariable( sv_cp_force_x,              USER, `USER(167, {arg_gforce.idstring}, 4 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_force_x,              "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_force_y,              true )
          *SetLocalUserFunction( sv_cp_force_y,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_y,              USER, `USER(167, {arg_gforce.idstring}, 5 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_z,              true )
          *SetLocalUserFunction( sv_cp_force_z,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_z,              USER, `USER(167, {arg_gforce.idstring}, 6 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_x,             true )
          *SetLocalUserFunction( sv_cp_moment_x,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_x,             USER, `USER(167, {arg_gforce.idstring}, 7 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_y,             true )
          *SetLocalUserFunction( sv_cp_moment_y,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_y,             USER, `USER(167, {arg_gforce.idstring}, 8 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_z,             true )
          *SetLocalUserFunction( sv_cp_moment_z,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_z,             USER, `USER(167, {arg_gforce.idstring}, 9 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_ang_vel,             true )
          *SetLocalUserFunction( sv_rim_ang_vel,             "mbdtire" )
          *SetSolverVariable( sv_rim_ang_vel,             USER, `USER(167, {arg_gforce.idstring}, 10 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_long_vel,            true )
          *SetLocalUserFunction( sv_rim_long_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_long_vel,            USER, `USER(167, {arg_gforce.idstring}, 11 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_vert_vel,            true )
          *SetLocalUserFunction( sv_rim_vert_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_vert_vel,            USER, `USER(167, {arg_gforce.idstring}, 12 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_roll_rad,                true )
          *SetSolverVariable( sv_roll_rad,                USER, `USER(167, {arg_gforce.idstring}, 13 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_roll_rad,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_x,                true )
          *SetSolverVariable( sv_cp_loc_x,                USER, `USER(167, {arg_gforce.idstring}, 14 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_x,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_y,                true )
          *SetSolverVariable( sv_cp_loc_y,                USER, `USER(167, {arg_gforce.idstring}, 15 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_y,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_z,                true )
          *SetLocalUserFunction( sv_cp_loc_z,                "mbdtire" )
          *SetSolverVariable( sv_cp_loc_z,                USER, `USER(167, {arg_gforce.idstring}, 16 )`, OFF, 0.0, false, false )
        *EndContext()
      *EndContext()

      *BeginContext( sys_tire_right )
        *SetFileName( ds_tire_properties.r_propertyFile,       "C:/Program Files/Altair/2022/hwdesktop/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_FlatRoad.rdf" )

        *BeginContext( sys_varsub )
          *SetSolverVariable( sv_long_slip,               EXPR, , OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_long_slip,               true )
          *SetLocalUserFunction( sv_long_slip,               "mbdtire" )
          *SetSolverVariable( sv_long_slip,               USER, `USER(167, {arg_gforce.idstring}, 1)`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_slip_angle,              true )
          *SetLocalUserFunction( sv_slip_angle,              "mbdtire" )
          *SetSolverVariable( sv_slip_angle,              USER, `USER(167, {arg_gforce.idstring}, 2 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_camber_angle,            true )
          *SetLocalUserFunction( sv_camber_angle,            "mbdtire" )
          *SetSolverVariable( sv_camber_angle,            USER, `USER(167, {arg_gforce.idstring}, 3 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_x,              true )
          *SetSolverVariable( sv_cp_force_x,              USER, `USER(167, {arg_gforce.idstring}, 4 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_force_x,              "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_force_y,              true )
          *SetLocalUserFunction( sv_cp_force_y,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_y,              USER, `USER(167, {arg_gforce.idstring}, 5 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_z,              true )
          *SetLocalUserFunction( sv_cp_force_z,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_z,              USER, `USER(167, {arg_gforce.idstring}, 6 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_x,             true )
          *SetLocalUserFunction( sv_cp_moment_x,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_x,             USER, `USER(167, {arg_gforce.idstring}, 7 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_y,             true )
          *SetLocalUserFunction( sv_cp_moment_y,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_y,             USER, `USER(167, {arg_gforce.idstring}, 8 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_z,             true )
          *SetLocalUserFunction( sv_cp_moment_z,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_z,             USER, `USER(167, {arg_gforce.idstring}, 9 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_ang_vel,             true )
          *SetLocalUserFunction( sv_rim_ang_vel,             "mbdtire" )
          *SetSolverVariable( sv_rim_ang_vel,             USER, `USER(167, {arg_gforce.idstring}, 10 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_long_vel,            true )
          *SetLocalUserFunction( sv_rim_long_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_long_vel,            USER, `USER(167, {arg_gforce.idstring}, 11 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_vert_vel,            true )
          *SetLocalUserFunction( sv_rim_vert_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_vert_vel,            USER, `USER(167, {arg_gforce.idstring}, 12 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_roll_rad,                true )
          *SetSolverVariable( sv_roll_rad,                USER, `USER(167, {arg_gforce.idstring}, 13 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_roll_rad,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_x,                true )
          *SetSolverVariable( sv_cp_loc_x,                USER, `USER(167, {arg_gforce.idstring}, 14 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_x,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_y,                true )
          *SetSolverVariable( sv_cp_loc_y,                USER, `USER(167, {arg_gforce.idstring}, 15 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_y,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_z,                true )
          *SetLocalUserFunction( sv_cp_loc_z,                "mbdtire" )
          *SetSolverVariable( sv_cp_loc_z,                USER, `USER(167, {arg_gforce.idstring}, 16 )`, OFF, 0.0, false, false )
        *EndContext()
      *EndContext()
    *EndContext()

    *BeginContext( ts_rear )

      *BeginContext( sys_tire_left )
        *SetFileName( ds_tire_properties.r_propertyFile,       "C:/Program Files/Altair/2022/hwdesktop/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_FlatRoad.rdf" )

        *BeginContext( sys_varsub )
          *SetSolverVariable( sv_long_slip,               EXPR, , OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_long_slip,               true )
          *SetLocalUserFunction( sv_long_slip,               "mbdtire" )
          *SetSolverVariable( sv_long_slip,               USER, `USER(167, {arg_gforce.idstring}, 1)`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_slip_angle,              true )
          *SetLocalUserFunction( sv_slip_angle,              "mbdtire" )
          *SetSolverVariable( sv_slip_angle,              USER, `USER(167, {arg_gforce.idstring}, 2 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_camber_angle,            true )
          *SetLocalUserFunction( sv_camber_angle,            "mbdtire" )
          *SetSolverVariable( sv_camber_angle,            USER, `USER(167, {arg_gforce.idstring}, 3 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_x,              true )
          *SetSolverVariable( sv_cp_force_x,              USER, `USER(167, {arg_gforce.idstring}, 4 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_force_x,              "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_force_y,              true )
          *SetLocalUserFunction( sv_cp_force_y,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_y,              USER, `USER(167, {arg_gforce.idstring}, 5 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_z,              true )
          *SetLocalUserFunction( sv_cp_force_z,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_z,              USER, `USER(167, {arg_gforce.idstring}, 6 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_x,             true )
          *SetLocalUserFunction( sv_cp_moment_x,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_x,             USER, `USER(167, {arg_gforce.idstring}, 7 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_y,             true )
          *SetLocalUserFunction( sv_cp_moment_y,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_y,             USER, `USER(167, {arg_gforce.idstring}, 8 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_z,             true )
          *SetLocalUserFunction( sv_cp_moment_z,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_z,             USER, `USER(167, {arg_gforce.idstring}, 9 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_ang_vel,             true )
          *SetLocalUserFunction( sv_rim_ang_vel,             "mbdtire" )
          *SetSolverVariable( sv_rim_ang_vel,             USER, `USER(167, {arg_gforce.idstring}, 10 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_long_vel,            true )
          *SetLocalUserFunction( sv_rim_long_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_long_vel,            USER, `USER(167, {arg_gforce.idstring}, 11 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_vert_vel,            true )
          *SetLocalUserFunction( sv_rim_vert_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_vert_vel,            USER, `USER(167, {arg_gforce.idstring}, 12 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_roll_rad,                true )
          *SetSolverVariable( sv_roll_rad,                USER, `USER(167, {arg_gforce.idstring}, 13 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_roll_rad,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_x,                true )
          *SetSolverVariable( sv_cp_loc_x,                USER, `USER(167, {arg_gforce.idstring}, 14 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_x,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_y,                true )
          *SetSolverVariable( sv_cp_loc_y,                USER, `USER(167, {arg_gforce.idstring}, 15 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_y,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_z,                true )
          *SetLocalUserFunction( sv_cp_loc_z,                "mbdtire" )
          *SetSolverVariable( sv_cp_loc_z,                USER, `USER(167, {arg_gforce.idstring}, 16 )`, OFF, 0.0, false, false )
        *EndContext()
      *EndContext()

      *BeginContext( sys_tire_right )
        *SetFileName( ds_tire_properties.r_propertyFile,       "C:/Program Files/Altair/2022/hwdesktop/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_FlatRoad.rdf" )

        *BeginContext( sys_varsub )
          *SetSolverVariable( sv_long_slip,               EXPR, , OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_long_slip,               true )
          *SetLocalUserFunction( sv_long_slip,               "mbdtire" )
          *SetSolverVariable( sv_long_slip,               USER, `USER(167, {arg_gforce.idstring}, 1)`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_slip_angle,              true )
          *SetLocalUserFunction( sv_slip_angle,              "mbdtire" )
          *SetSolverVariable( sv_slip_angle,              USER, `USER(167, {arg_gforce.idstring}, 2 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_camber_angle,            true )
          *SetLocalUserFunction( sv_camber_angle,            "mbdtire" )
          *SetSolverVariable( sv_camber_angle,            USER, `USER(167, {arg_gforce.idstring}, 3 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_x,              true )
          *SetSolverVariable( sv_cp_force_x,              USER, `USER(167, {arg_gforce.idstring}, 4 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_force_x,              "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_force_y,              true )
          *SetLocalUserFunction( sv_cp_force_y,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_y,              USER, `USER(167, {arg_gforce.idstring}, 5 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_z,              true )
          *SetLocalUserFunction( sv_cp_force_z,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_z,              USER, `USER(167, {arg_gforce.idstring}, 6 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_x,             true )
          *SetLocalUserFunction( sv_cp_moment_x,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_x,             USER, `USER(167, {arg_gforce.idstring}, 7 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_y,             true )
          *SetLocalUserFunction( sv_cp_moment_y,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_y,             USER, `USER(167, {arg_gforce.idstring}, 8 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_z,             true )
          *SetLocalUserFunction( sv_cp_moment_z,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_z,             USER, `USER(167, {arg_gforce.idstring}, 9 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_ang_vel,             true )
          *SetLocalUserFunction( sv_rim_ang_vel,             "mbdtire" )
          *SetSolverVariable( sv_rim_ang_vel,             USER, `USER(167, {arg_gforce.idstring}, 10 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_long_vel,            true )
          *SetLocalUserFunction( sv_rim_long_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_long_vel,            USER, `USER(167, {arg_gforce.idstring}, 11 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_vert_vel,            true )
          *SetLocalUserFunction( sv_rim_vert_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_vert_vel,            USER, `USER(167, {arg_gforce.idstring}, 12 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_roll_rad,                true )
          *SetSolverVariable( sv_roll_rad,                USER, `USER(167, {arg_gforce.idstring}, 13 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_roll_rad,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_x,                true )
          *SetSolverVariable( sv_cp_loc_x,                USER, `USER(167, {arg_gforce.idstring}, 14 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_x,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_y,                true )
          *SetSolverVariable( sv_cp_loc_y,                USER, `USER(167, {arg_gforce.idstring}, 15 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_y,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_z,                true )
          *SetLocalUserFunction( sv_cp_loc_z,                "mbdtire" )
          *SetSolverVariable( sv_cp_loc_z,                USER, `USER(167, {arg_gforce.idstring}, 16 )`, OFF, 0.0, false, false )
        *EndContext()
      *EndContext()
    *EndContext()
  *EndContext()

  *BeginContext( sys_brakes )

    *BeginContext( sys_front_disk_brake )
      *SetReal( ds_disk_brake.real_left_disk_radius,       275 )
      *SetReal( ds_disk_brake.real_right_disk_radius,       ds_disk_brake.real_left_disk_radius.value )
      *SetReal( ds_disk_brake.real_left_piston_area,       10000 )
      *SetReal( ds_disk_brake.real_left_pad_friction,       0.32 )
      *SetReal( ds_disk_brake.real_right_piston_area,       ds_disk_brake.real_left_piston_area.value )
      *SetReal( ds_disk_brake.real_right_pad_friction,       ds_disk_brake.real_left_pad_friction.value )
      *SetReal( ds_disk_brake.real_stiction_omega,       0.001 )
    *EndContext()

    *BeginContext( sys_rear_disk_brake )
      *SetReal( ds_disk_brake.real_left_disk_radius,       260 )
      *SetReal( ds_disk_brake.real_right_disk_radius,       ds_disk_brake.real_left_disk_radius.value )
      *SetReal( ds_disk_brake.real_left_piston_area,       8000 )
      *SetReal( ds_disk_brake.real_left_pad_friction,       0.32 )
      *SetReal( ds_disk_brake.real_right_piston_area,       ds_disk_brake.real_left_piston_area.value )
      *SetReal( ds_disk_brake.real_right_pad_friction,       ds_disk_brake.real_left_pad_friction.value )
      *SetReal( ds_disk_brake.real_stiction_omega,       0.001 )
    *EndContext()
  *EndContext()

  *BeginContext( altair_driver )
    *SetOption( ds_vehicle_params.op_driver_type,       "Non-leaning" )
    *SetReal( ds_vehicle_params.veh_mass,       1551.9393606399992 )
    *SetReal( ds_vehicle_params.drive_ratio,       1.0 )
    *SetReal( ds_vehicle_params.max_f_brake_torque,       1848000.0 )
    *SetReal( ds_vehicle_params.max_r_brake_torque,       931840.0 )
    *SetReal( ds_vehicle_params.brake_bias,       0.6 )
    *SetReal( ds_vehicle_params.veh_izz,       2825425136.0742245 )
    *SetFileName( ds_analysis_settings.driver_task_file,       "" )

    *BeginContext( sys_gyro )
      *SetPoint( p_gyro,                     att_b_veh.cg.x  +  ds_gyro.cg2gyrox.value, att_b_veh.cg.y  +  ds_gyro.cg2gyroy.value, att_b_veh.cg.z  +  ds_gyro.cg2gyroz.value )
    *EndContext()
  *EndContext()

  *BeginContext( event_2 )
    *SetFileName( ds_run_param.output_xml_file,       "//homes.mtu.edu/home/Desktop/MEEM 4450/Project 1 model.xml" )
  *EndContext()
*EndMDL()

*BeginWizardSelections()

  *BeginAssemblySelections()
    *Selection(model_type, "Full vehicle with driver")
    *Selection(drive_type, "Four wheel drive")
    *Selection(sys_body, "Body")
    *Selection(sys_instrumentation, "Instrumentation")
    *Selection(sys_frnt_sub, "None")
    *Selection(sys_frnt_susp, "Frnt SLA susp (2 pc. LCA)")
    *Selection(sys_steering, "Rackpin steering")
    *Selection(sys_rear_sub, "None")
    *Selection(sys_rear_susp, "Rear SLA susp (2 pc. LCA)")
    *Selection(sys_pwrtrain, "Longitudinal engine/trans")
    *Selection(sys_tires, "AutoTires")
    *Selection(sys_column, "Steering column 1  (not for abaqus)")
    *Selection(sys_boost, "None")
    *Selection(sys_frnt_shock, "Frnt shock absorber ( with inline jts )")
    *Selection(sys_frnt_spring, "Frnt coil spring")
    *Selection(sys_frnt_stabar, "Frnt stabar with links")
    *Selection(sys_rear_shock, "Rear shock absorber ( with inline jts )")
    *Selection(sys_rear_spring, "Rear coil spring")
    *Selection(sys_rear_stabar, "None")
    *Selection(sys_frnt_jnc_bmp, "None")
    *Selection(sys_frnt_reb_bmp, "None")
    *Selection(sys_rear_jnc_bmp, "None")
    *Selection(sys_rear_reb_bmp, "None")
    *Selection(sys_brakes, "Disk Brakes")
    *Selection(sys_driveline, "Independent 4wd")
    *Selection(sys_frnt_driveshaft, "Front driveshaft")
    *Selection(sys_r_driveline, "Rear diff and halfshafts")
    *Selection(sys_rear_driveshaft, "Rear driveshaft")
    *Selection(sys_transfer_case, "Transfer case")
    *Selection(sys_aerodynamic_forces, "None")
    *Selection(sys_abs_esp, "None")
    *Selection(altair_driver, "Altair Driver")
  *EndAssemblySelections()

*EndWizardSelections()
